/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 00:09:57 GMT 2023
 */
package org.mockito.internal.configuration.injection;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.mockito.internal.configuration.injection.FinalMockCandidateFilter;
import org.mockito.internal.configuration.injection.OngoingInjecter;

public class FinalMockCandidateFilterTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        List<Object> list0 = linkedList0.subList(0, 0);
        Integer integer0 = new Integer(4455);
        linkedList0.offer(integer0);
        Object object0 = new Object();
        // Undeclared exception!
        try {
            finalMockCandidateFilter0.filterCandidate(list0, (Field) null, object0);
            fail("Expecting exception: ConcurrentModificationException");
        } catch (ConcurrentModificationException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
        Object object0 = new Object();
        // Undeclared exception!
        try {
            finalMockCandidateFilter0.filterCandidate((Collection<Object>) null, (Field) null, object0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        Integer integer0 = new Integer(4455);
        linkedList0.offer(integer0);
        OngoingInjecter ongoingInjecter0 = finalMockCandidateFilter0.filterCandidate(linkedList0, (Field) null, (Object) null);
        assertNotNull(ongoingInjecter0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        OngoingInjecter ongoingInjecter0 = finalMockCandidateFilter0.filterCandidate(linkedList0, (Field) null, linkedList0);
        assertNotNull(ongoingInjecter0);
    }
}
