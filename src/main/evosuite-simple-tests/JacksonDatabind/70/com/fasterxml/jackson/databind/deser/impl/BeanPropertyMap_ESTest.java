/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 22:38:51 GMT 2023
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanPropertyMap_ESTest extends BeanPropertyMap_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(priorityQueue0, false);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", "");
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
        assertEquals(0, settableBeanPropertyArray0.length);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HashSet<SettableBeanProperty> hashSet0 = new HashSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(hashSet0, false);
        int int0 = beanPropertyMap0.size();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        beanPropertyMap0.withProperty(creatorProperty0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
        assertNotSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, javaType0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("sF>G~U8MQ>~", "sF>G~U8MQ>~");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        BeanPropertyMap beanPropertyMap2 = beanPropertyMap0.withProperty(settableBeanProperty0);
        BeanPropertyMap beanPropertyMap3 = new BeanPropertyMap(beanPropertyMap2, true);
        assertEquals(3, beanPropertyMap3.size());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        MissingNode missingNode0 = MissingNode.getInstance();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 8, missingNode0, propertyMetadata0);
        stack0.add((SettableBeanProperty) creatorProperty0);
        stack0.add((SettableBeanProperty) creatorProperty0);
        stack0.add((SettableBeanProperty) creatorProperty0);
        stack0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
        assertEquals(4, beanPropertyMap0.size());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        stack0.setSize(225);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        assertEquals(225, beanPropertyMap0.size());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        stack0.add((SettableBeanProperty) null);
        stack0.add((SettableBeanProperty) null);
        stack0.add((SettableBeanProperty) null);
        stack0.add((SettableBeanProperty) null);
        stack0.add((SettableBeanProperty) null);
        stack0.add((SettableBeanProperty) null);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
        assertEquals(6, beanPropertyMap0.size());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("sFG~Us8MQ>~", "sFG~Us8MQ>~");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        beanPropertyMap0.withProperty(creatorProperty0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(settableBeanProperty0);
        beanPropertyMap1.withProperty(settableBeanProperty0);
        assertEquals("sFG~Us8MQ>~sFG~Us8MQ>~", settableBeanProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("sFG~Us8MQ>~", "sFG~Us8MQ>~");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        beanPropertyMap0.withProperty(creatorProperty0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(settableBeanProperty0);
        beanPropertyMap1.withProperty(settableBeanProperty0);
        assertNotSame(creatorProperty0, settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2040109468), typeFactory0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.renameAll(nameTransformer_Chained0);
        assertEquals(1, beanPropertyMap2.size());
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        linkedHashSet0.add((SettableBeanProperty) null);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer_Chained0);
        assertNotSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        linkedHashSet0.add((SettableBeanProperty) null);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer_Chained0);
        assertEquals(1, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(priorityQueue0, false);
        Stack<String> stack0 = new Stack<String>();
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        Charset charset0 = Charset.defaultCharset();
        Set<String> set0 = charset0.aliases();
        BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withoutProperties(set0);
        assertEquals(1, beanPropertyMap2.size());
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 11, (Object) null, propertyMetadata0);
        beanPropertyMap0.withProperty(creatorProperty0);
        beanPropertyMap0.remove(creatorProperty0);
        Charset charset0 = Charset.defaultCharset();
        Set<String> set0 = charset0.aliases();
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);
        assertEquals(0, beanPropertyMap0.size());
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 11, (Object) null, propertyMetadata0);
        beanPropertyMap0.withProperty(creatorProperty0);
        beanPropertyMap0.remove(creatorProperty0);
        Charset charset0 = Charset.defaultCharset();
        Set<String> set0 = charset0.aliases();
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);
        assertNotSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4, propertyName0, propertyMetadata0);
        beanPropertyMap0.withProperty(creatorProperty0);
        Stack<String> stack1 = new Stack<String>();
        stack1.add("");
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack1);
        assertNotSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4, propertyName0, propertyMetadata0);
        beanPropertyMap0.withProperty(creatorProperty0);
        Stack<String> stack1 = new Stack<String>();
        stack1.add("");
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack1);
        assertEquals(0, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        beanPropertyMap0.withProperty(creatorProperty0);
        beanPropertyMap0.replace(creatorProperty0);
        assertFalse(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Error> class1 = Error.class;
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "m]>>.NAUZN", false, arrayType0, jsonTypeInfo_As0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, typeBindings0, propertyMetadata0);
        beanPropertyMap0.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(0);
        assertNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Error> class1 = Error.class;
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "m]>>.NAUZN", false, arrayType0, jsonTypeInfo_As0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, typeBindings0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        beanPropertyMap1.assignIndexes();
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(0);
        assertNull(settableBeanProperty0.getManagedReferenceName());
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(priorityQueue0, false);
        // Undeclared exception!
        try {
            beanPropertyMap0.find((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not pass null property name
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("'jg'jg");
        assertNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1434, javaType0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("sFG~Us8MQ>~", "sFG~Us8MQ>~");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        SettableBeanProperty settableBeanProperty1 = beanPropertyMap0.find("sfg~us8mq>~sfg~us8mq>~");
        assertEquals("sFG~Us8MQ>~sFG~Us8MQ>~", settableBeanProperty1.getName());
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1434, javaType0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("sFG~Us8MQ>~", "sFG~Us8MQ>~");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        SettableBeanProperty settableBeanProperty1 = beanPropertyMap0.find("sfg~us8mq>~sfg~us8mq>~");
        assertNotNull(settableBeanProperty1);
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("MtJg", "MtJg");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        SettableBeanProperty settableBeanProperty1 = beanPropertyMap1.find("'jg'jg");
        assertNull(settableBeanProperty1);
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("MtJg", "MtJg");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(settableBeanProperty0);
        SettableBeanProperty settableBeanProperty1 = creatorProperty0.withSimpleName("'jg'jg");
        beanPropertyMap0.withProperty(settableBeanProperty1);
        SettableBeanProperty settableBeanProperty2 = beanPropertyMap1.find("'jg'jg");
        assertEquals("'jg'jg", settableBeanProperty2.getName());
    }

    @Test(timeout = 4000)
    public void test2531() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("MtJg", "MtJg");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(settableBeanProperty0);
        SettableBeanProperty settableBeanProperty1 = creatorProperty0.withSimpleName("'jg'jg");
        beanPropertyMap0.withProperty(settableBeanProperty1);
        SettableBeanProperty settableBeanProperty2 = beanPropertyMap1.find("'jg'jg");
        assertEquals("MtJgMtJg", settableBeanProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("MtJg", "MtJg");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(settableBeanProperty0);
        SettableBeanProperty settableBeanProperty1 = creatorProperty0.withSimpleName("'jg'jg");
        beanPropertyMap0.withProperty(settableBeanProperty1);
        SettableBeanProperty settableBeanProperty2 = beanPropertyMap1.find("'jg'jg");
        assertNotNull(settableBeanProperty2);
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, javaType0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("sFG~Us8MQ>~", "sFG~Us8MQ>~");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1._rename(creatorProperty0, nameTransformer0);
        BeanPropertyMap beanPropertyMap2 = beanPropertyMap0.withProperty(settableBeanProperty0);
        beanPropertyMap2.remove(settableBeanProperty0);
        assertEquals(2, beanPropertyMap2.size());
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-219), (Object) null, propertyMetadata0);
        // Undeclared exception!
        try {
            beanPropertyMap0.remove(creatorProperty0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // No entry '' found, can't remove
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.unknownTypeIdException(javaType0, ";P&XYA!?#RX[}}Mk", "Null SerializerProvider passed for ");
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1400), jsonMappingException0, propertyMetadata0);
        stack0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);
        // Undeclared exception!
        try {
            beanPropertyMap0.findDeserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null, "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
        }
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = beanPropertyMap0.findDeserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, "Could not instantiate DOMImplementationRegistry: ", "Could not instantiate DOMImplementationRegistry: ");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3037() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        MissingNode missingNode0 = MissingNode.getInstance();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 8, missingNode0, propertyMetadata0);
        stack0.add((SettableBeanProperty) creatorProperty0);
        stack0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);
        String string0 = beanPropertyMap0.toString();
        assertEquals("Properties=[(null), (null)]", string0);
    }

    @Test(timeout = 4000)
    public void test3138() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("}", "}");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, nameTransformer0);
        assertNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test3239() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1441), annotationMap0, (PropertyMetadata) null);
        JsonDeserializer<DeserializationFeature> jsonDeserializer0 = (JsonDeserializer<DeserializationFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<DeserializationFeature> jsonDeserializer1 = (JsonDeserializer<DeserializationFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(jsonDeserializer0).when(jsonDeserializer1).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer1);
        assertNotSame(settableBeanProperty0, creatorProperty1);
    }

    @Test(timeout = 4000)
    public void test3340() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = new PropertyName("2VZ8-Qpbj~Sa]kR8X", "2VZ8-Qpbj~Sa]kR8X");
        Class<String> class0 = String.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 8232);
        AnnotationMap annotationMap0 = new AnnotationMap();
        Object object0 = new Object();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 76, object0, propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer1);
        assertSame(settableBeanProperty0, creatorProperty1);
    }

    @Test(timeout = 4000)
    public void test3441() throws Throwable {
        ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
        MockRuntimeException mockRuntimeException0 = new MockRuntimeException("jd:-wzia[n>h9\"");
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockRuntimeException0, "jd:-wzia[n>h9\"");
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        // Undeclared exception!
        try {
            beanPropertyMap0.wrapAndThrow(invocationTargetException0, arrayDeque0, "jd:-wzia[n>h9\"", defaultDeserializationContext_Impl0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test3542() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, "H>L=%.");
        MockError mockError0 = new MockError("kkWw*DAT*Q(", (Throwable) null);
        try {
            beanPropertyMap0.wrapAndThrow(invocationTargetException0, mockError0, "Non-hex character '%c' (value 0x%s), not valid for UUID String", defaultDeserializationContext_Impl0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // H>L=%. (through reference chain: org.evosuite.runtime.mock.java.lang.MockError[\"Non-hex character '%c' (value 0x%s), not valid for UUID String\"])
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test3643() throws Throwable {
        LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
        MockError mockError0 = new MockError();
        // Undeclared exception!
        try {
            beanPropertyMap0.wrapAndThrow(mockError0, "", (String) null, (DeserializationContext) null);
            fail("Expecting exception: Error");
        } catch (Error e) {
        }
    }

    @Test(timeout = 4000)
    public void test3744() throws Throwable {
        PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(priorityQueue0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException((String) null);
        // Undeclared exception!
        try {
            beanPropertyMap0.wrapAndThrow(jsonMappingException0, beanDeserializerFactory0, (String) null, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Can not pass null fieldName
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
        }
    }

    @Test(timeout = 4000)
    public void test3845() throws Throwable {
        TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        MockIOException mockIOException0 = new MockIOException();
        try {
            beanPropertyMap0.wrapAndThrow(mockIOException0, "e#3B8", "e#3B8", defaultDeserializationContext_Impl0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test3946() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        MockIOException mockIOException0 = new MockIOException();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        try {
            beanPropertyMap0.wrapAndThrow(mockIOException0, (Object) null, "gel(P{<//S@&<cSX*e", (DeserializationContext) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test4047() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        try {
            beanPropertyMap0.wrapAndThrow(sQLInvalidAuthorizationSpecException0, beanDeserializerFactory0, "Could not instantiate DOMImplementationRegistry: ", (DeserializationContext) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // (was java.sql.SQLInvalidAuthorizationSpecException) (through reference chain: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[\"Could not instantiate DOMImplementationRegistry: \"])
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test4148() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, javaType0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("sF>G~U8MQ>~", "sF>G~U8MQ>~");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        beanPropertyMap1.replace(settableBeanProperty0);
        assertNotSame(settableBeanProperty0, creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test4249() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("com.fasterxml.jackson.databind.deser.impl.ValueInjector", "com.fasterxml.jackson.databind.deser.impl.ValueInjector");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        SettableBeanProperty settableBeanProperty1 = beanPropertyMap0._rename(settableBeanProperty0, nameTransformer0);
        BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(settableBeanProperty1);
        beanPropertyMap2.replace(settableBeanProperty1);
        assertEquals(0, beanPropertyMap2.size());
    }

    @Test(timeout = 4000)
    public void test4350() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1433, javaType0, propertyMetadata0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("sFG~Us8MQ>~", "sFG~Us8MQ>~");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty0, nameTransformer0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        beanPropertyMap0.withProperty(settableBeanProperty0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(settableBeanProperty0);
        // Undeclared exception!
        try {
            beanPropertyMap1.replace(creatorProperty0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // No entry '' found, can't replace
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
        }
    }
}
