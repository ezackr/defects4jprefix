/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 03:49:31 GMT 2023
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Map;
import java.util.Properties;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicReference;
import org.junit.runner.RunWith;

public class TypeFactoryTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
        assertNotNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
        assertFalse(javaType0.isConcrete());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        assertFalse(collectionType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        assertFalse(typeFactory1.equals((Object) typeFactory0));
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
        assertFalse(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
        assertNotNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        assertTrue(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        assertNotNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        assertFalse(mapLikeType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SerializationFeature> class0 = SerializationFeature.class;
        Class<AnnotationIntrospector.ReferenceProperty.Type>[] classArray0 = (Class<AnnotationIntrospector.ReferenceProperty.Type>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, classArray0);
        assertTrue(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) sequenceInputStream0);
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        MappingIterator<SettableBeanProperty> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        assertNotNull(mappingIterator0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<TreeSet> class0 = TreeSet.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        assertFalse(collectionLikeType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        Class<ArrayType> class1 = ArrayType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        assertFalse(collectionLikeType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ReferenceType> class0 = ReferenceType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        assertTrue(arrayType0.isArrayType());
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        // Undeclared exception!
        try {
            typeFactory0.constructType((TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        // Undeclared exception!
        try {
            typeFactory0.constructRawMapType(class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
        }
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$5");
        assertFalse(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        try {
            typeFactory1.findClass("OX&oWF~ /2Wj(P");
            fail("Expecting exception: ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            //
            // OX&oWF~ /2Wj(P
        }
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, typeBindings0);
        assertEquals(0, javaTypeArray0.length);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        // Undeclared exception!
        try {
            typeFactory0.constructReferenceType(class0, (JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        try {
            typeFactory0.findClass("OX&oWF~ /2Wj(P");
            fail("Expecting exception: ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            //
            // OX&oWF~ /2Wj(P
        }
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        // Undeclared exception!
        try {
            typeFactory0.constructArrayType((JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
        assertNotSame(typeFactory1, typeFactory0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
        assertNotSame(typeFactory0, typeFactory2);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Class<?> class0 = TypeFactory.rawClass(simpleType0);
        assertFalse(class0.isEnum());
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        Class<LinkedList> class0 = LinkedList.class;
        Class<?> class1 = TypeFactory.rawClass(class0);
        assertEquals(1, class1.getModifiers());
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("void");
        assertEquals(0, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("int");
        assertTrue(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("long");
        assertTrue(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("float");
        assertFalse(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("double");
        assertEquals("double", class0.toString());
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("boolean");
        assertEquals("boolean", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("byte");
        assertEquals("byte", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("char");
        assertFalse(javaType0.isArrayType());
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("short");
        assertFalse(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(collectionType0, class0);
        assertEquals(1, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(collectionType0, class0);
        assertSame(javaType0, collectionType0);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._unknownType();
        Class<Integer> class0 = Integer.class;
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        assertTrue(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test3438() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._unknownType();
        Class<Integer> class0 = Integer.class;
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        assertFalse(javaType1.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test3539() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class0 = MapLikeType.class;
        // Undeclared exception!
        try {
            typeFactory0.constructSpecializedType(simpleType0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class com.fasterxml.jackson.databind.type.MapLikeType not subtype of [simple type, class int]
        }
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        Class<SerializationFeature> class0 = SerializationFeature.class;
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapperFeature> class0 = MapperFeature.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        Class<Object> class1 = Object.class;
        // Undeclared exception!
        try {
            typeFactory0.constructGeneralizedType(mapLikeType0, class1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Internal error: class java.lang.Object not included as super-type for [map-like type; class com.fasterxml.jackson.databind.MapperFeature, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]
        }
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ReferenceType> class0 = ReferenceType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        JavaType javaType0 = typeFactory0.constructGeneralizedType(mapLikeType0, class0);
        assertTrue(javaType0.isContainerType());
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ReferenceType> class0 = ReferenceType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        Class<Object> class1 = Object.class;
        JavaType javaType0 = typeFactory0.constructGeneralizedType(mapLikeType0, class1);
        assertFalse(javaType0.isContainerType());
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        Class<MapType> class0 = MapType.class;
        // Undeclared exception!
        try {
            typeFactory0.constructGeneralizedType(javaType0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class com.fasterxml.jackson.databind.type.MapType not a super-type of [simple type, class java.lang.Object]
        }
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapperFeature> class0 = MapperFeature.class;
        Class<CollectionType> class1 = CollectionType.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class1);
        assertEquals(0, javaTypeArray0.length);
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapLikeType> class0 = MapLikeType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        JavaType javaType0 = typeFactory0.moreSpecificType(mapLikeType0, simpleType0);
        assertFalse(javaType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
        assertNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapLikeType> class0 = MapLikeType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        JavaType javaType0 = typeFactory0.moreSpecificType(mapLikeType0, (JavaType) null);
        assertTrue(javaType0.isMapLikeType());
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, javaType0);
        assertTrue(javaType1.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        JavaType[] javaTypeArray0 = new JavaType[2];
        javaTypeArray0[0] = (JavaType) simpleType0;
        LinkedList<MapType> linkedList0 = new LinkedList<MapType>();
        ReferenceType referenceType0 = new ReferenceType(class0, (TypeBindings) null, simpleType0, javaTypeArray0, javaTypeArray0[0], (Object) null, linkedList0, false);
        MapType mapType0 = new MapType(referenceType0, simpleType0, javaTypeArray0[0]);
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, (JavaType) referenceType0);
        JavaType javaType0 = typeFactory0.moreSpecificType(collectionType0, javaTypeArray0[0]);
        assertTrue(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        // Undeclared exception!
        try {
            typeFactory0.constructType((Type) null, (Class<?>) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
        }
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.constructType((Type) javaType0, javaType0);
        assertTrue(javaType1.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        // Undeclared exception!
        try {
            typeFactory0.constructType((Type) null, (JavaType) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
        }
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        // Undeclared exception!
        try {
            typeFactory0.constructMapType((Class<? extends Map>) null, class0, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        // Undeclared exception!
        try {
            typeFactory0.constructMapType(class0, class0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
        }
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SerializationFeature> class0 = SerializationFeature.class;
        Class<AnnotationIntrospector.ReferenceProperty.Type>[] classArray0 = (Class<AnnotationIntrospector.ReferenceProperty.Type>[]) Array.newInstance(Class.class, 1);
        // Undeclared exception!
        try {
            typeFactory0.constructParametrizedType(class0, class0, classArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        AtomicReference<ArrayType> atomicReference0 = new AtomicReference<ArrayType>();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
        JsonFactory jsonFactory3 = jsonFactory2.copy();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
        JsonFactory jsonFactory4 = jsonFactory3.enable(jsonFactory_Feature0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory4, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
        objectMapper1.readerForUpdating(atomicReference0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
        TypeFactory typeFactory1 = TypeFactory.instance;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        Class<ArrayList> class0 = ArrayList.class;
        Class<ObjectMapper.DefaultTyping> class1 = ObjectMapper.DefaultTyping.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        assertTrue(collectionType0.isCollectionLikeType());
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        Class<LinkedList> class1 = LinkedList.class;
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (JavaType) mapLikeType0);
        JavaType javaType0 = typeFactory0._constructSimple(class0, typeBindings0, mapLikeType0, (JavaType[]) null);
        assertEquals(1, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SerializationFeature> class0 = SerializationFeature.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        assertTrue(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn(simpleType0, (JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<LinkedList> class0 = LinkedList.class;
        // Undeclared exception!
        try {
            typeFactory1.constructCollectionType(class0, class0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$2120155304) return null for type [simple type, class int]
        }
    }

    @Test(timeout = 4000)
    public void test5761() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<MapLikeType> class0 = MapLikeType.class;
        // Undeclared exception!
        try {
            typeFactory1.constructRawMapLikeType(class0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$2120155304) return null for type [simple type, class java.lang.Object]
        }
    }

    @Test(timeout = 4000)
    public void test5862() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        Class<DecimalNode> class1 = DecimalNode.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);
        assertFalse(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test5963() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<ArrayType> atomicReference0 = new AtomicReference<ArrayType>();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test6064() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
        doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
        doReturn((Type) null).when(parameterizedType0).getRawType();
        // Undeclared exception!
        try {
            typeFactory0._fromParamType((ClassStack) null, parameterizedType0, (TypeBindings) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
