/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 16:45:37 GMT 2023
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.HierarchicType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.time.chrono.IsoEra;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Stack;
import org.junit.runner.RunWith;

public class TypeFactoryTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        assertTrue(collectionType0.isContainerType());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectReader> class0 = ObjectReader.class;
        // Undeclared exception!
        try {
            typeFactory0.constructParametricType(class0, (JavaType[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        JavaType[] javaTypeArray0 = new JavaType[2];
        // Undeclared exception!
        try {
            typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<IsoEra> class0 = IsoEra.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        assertEquals(0, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory0 = new TypeFactory((TypeParser) null, typeModifierArray0);
        Class<HashMap> class0 = HashMap.class;
        Class<CollectionType> class1 = CollectionType.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
        assertFalse(mapType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapType> class0 = MapType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        assertTrue(mapLikeType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        assertTrue(collectionLikeType0.isConcrete());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        assertFalse(collectionType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class0 = MapLikeType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        assertTrue(collectionLikeType0.hasGenericTypes());
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Module> class0 = Module.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        assertEquals(1, arrayType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        // Undeclared exception!
        try {
            typeFactory0.constructType((TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        assertEquals(2, mapType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test1514() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) simpleType0);
        assertFalse(collectionLikeType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test1615() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ObjectReader> class0 = ObjectReader.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        assertFalse(mapLikeType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1716() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        try {
            typeFactory0.constructFromCanonical("Class ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse type 'Class' (remaining: ''): Can not locate class 'Class', problem: Class 'Class.class' should be in target project, but could not be found!
        }
    }

    @Test(timeout = 4000)
    public void test1817() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        Class<MapLikeType>[] classArray0 = (Class<MapLikeType>[]) Array.newInstance(Class.class, 1);
        // Undeclared exception!
        try {
            typeFactory0.constructParametricType(class0, classArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1918() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        Class<CollectionType> class1 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, typeBindings0.UNBOUND, typeBindings0.UNBOUND);
        assertFalse(mapLikeType0.isCollectionLikeType());
    }

    @Test(timeout = 4000)
    public void test2019() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        ArrayType arrayType0 = typeFactory0.constructArrayType(typeBindings0.UNBOUND);
        assertEquals(1, arrayType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test2120() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        assertNotSame(typeFactory0, typeFactory1);
    }

    @Test(timeout = 4000)
    public void test2221() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
        assertNotSame(typeFactory0, typeFactory1);
    }

    @Test(timeout = 4000)
    public void test2322() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[1];
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
        assertNotSame(typeFactory2, typeFactory1);
    }

    @Test(timeout = 4000)
    public void test2423() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayType> class0 = ArrayType.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        Class<?> class1 = TypeFactory.rawClass(typeBindings0.UNBOUND);
        assertFalse(class1.isInterface());
    }

    @Test(timeout = 4000)
    public void test2524() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        Class<?> class1 = TypeFactory.rawClass(class0);
        assertFalse(class1.isInterface());
    }

    @Test(timeout = 4000)
    public void test2625() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        assertFalse(javaType1.isEnumType());
    }

    @Test(timeout = 4000)
    public void test2726() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(typeBindings0.UNBOUND, class0);
        assertFalse(javaType0.isArrayType());
    }

    @Test(timeout = 4000)
    public void test2827() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        // Undeclared exception!
        try {
            typeFactory0.constructSpecializedType(simpleType0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class java.lang.Class not subtype of [simple type, class boolean]
        }
    }

    @Test(timeout = 4000)
    public void test2928() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<IsoEra> class0 = IsoEra.class;
        Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
        Class<Integer> class1 = Integer.class;
        // Undeclared exception!
        try {
            typeFactory0.constructSpecializedType(javaType0, class1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class java.lang.Integer is not assignable to java.time.chrono.IsoEra
        }
    }

    @Test(timeout = 4000)
    public void test3029() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3130() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<IsoEra> class0 = IsoEra.class;
        Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(javaType0, class0);
        assertFalse(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<IsoEra> class0 = IsoEra.class;
        Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(javaType0, class0);
        assertNull(javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        Class<Object> class1 = Object.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class1);
        assertNull(javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        JavaType javaType0 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, (JavaType) null);
        assertFalse(javaType0.isMapLikeType());
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, simpleType0);
        assertTrue(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MissingNode> class0 = MissingNode.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        JavaType javaType0 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, simpleType0);
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
        assertFalse(javaType0.isCollectionLikeType());
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MissingNode> class0 = MissingNode.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        JavaType javaType0 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, simpleType0);
        assertFalse(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) null);
        assertFalse(javaType0.isMapLikeType());
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        JavaType javaType0 = typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);
        assertTrue(javaType0.isConcrete());
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        // Undeclared exception!
        try {
            typeFactory0.constructType((Type) null, (JavaType) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
        }
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Class<LinkedList> class0 = LinkedList.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[1];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        // Undeclared exception!
        try {
            typeFactory1._fromParameterizedClass(class0, linkedList0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleType> class0 = SimpleType.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        // Undeclared exception!
        try {
            typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter type mismatch for com.fasterxml.jackson.databind.type.SimpleType (and target com.fasterxml.jackson.databind.type.SimpleType): expected 0 parameters, was given 1
        }
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        // Undeclared exception!
        try {
            typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Need exactly 2 parameter types for Map types (java.util.HashMap)
        }
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        // Undeclared exception!
        try {
            typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        JavaType[] javaTypeArray0 = new JavaType[4];
        // Undeclared exception!
        try {
            typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Need exactly 1 parameter type for Collection types (java.util.ArrayList)
        }
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionType> class0 = CollectionType.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithView((Class<?>) class0);
        // Undeclared exception!
        try {
            objectMapper0.writeValueAsString(objectWriter0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/fasterxml/jackson/databind/JsonMappingException$Reference
        }
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Long> class0 = Long.TYPE;
        Class<Integer> class1 = Integer.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);
        assertTrue(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<IsoEra> class0 = IsoEra.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        assertFalse(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Stack<JavaType> stack0 = new Stack<JavaType>();
        Class<IsoEra> class0 = IsoEra.class;
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
        assertFalse(javaType0.hasGenericTypes());
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        assertFalse(javaType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        linkedList0.add((JavaType) mapType0);
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        assertFalse(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        linkedList0.add((JavaType) mapType0);
        linkedList0.add((JavaType) mapType0);
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        assertFalse(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        assertFalse(javaType0.isArrayType());
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        Stack<JavaType> stack0 = new Stack<JavaType>();
        stack0.add(typeBindings0.UNBOUND);
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
        assertEquals(1, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Stack<JavaType> stack0 = new Stack<JavaType>();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        stack0.add((JavaType) simpleType0);
        Class<InputStream> class0 = InputStream.class;
        // Undeclared exception!
        try {
            typeFactory0._fromParameterizedClass(class0, stack0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter type mismatch for java.io.InputStream (and target java.io.InputStream): expected 0 parameters, was given 1
        }
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        Class<MissingNode> class1 = MissingNode.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
        Class<?> class2 = mapType0.getParameterSource();
        Class<IsoEra> class3 = IsoEra.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class2, (Class<?>) class3);
        assertFalse(javaType0.isArrayType());
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        HierarchicType hierarchicType0 = typeFactory0._cachedHashMapType;
        JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes(hierarchicType0, "): expected ", (TypeBindings) null);
        assertFalse(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        // Undeclared exception!
        try {
            typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class java.lang.String is not a subtype of com.fasterxml.jackson.databind.type.CollectionLikeType
        }
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionLikeType> class1 = CollectionLikeType.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
        assertNull(hierarchicType0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<Object> class1 = Object.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
        assertFalse(hierarchicType0.isGeneric());
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class0);
        typeFactory0._arrayListSuperInterfaceChain(hierarchicType0);
        HierarchicType hierarchicType1 = typeFactory0._arrayListSuperInterfaceChain(hierarchicType0);
        assertFalse(hierarchicType1.isGeneric());
    }

    @Test(timeout = 4000)
    public void test6162() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class0);
        typeFactory0._arrayListSuperInterfaceChain(hierarchicType0);
        HierarchicType hierarchicType1 = typeFactory0._arrayListSuperInterfaceChain(hierarchicType0);
        assertNotNull(hierarchicType1);
    }
}
