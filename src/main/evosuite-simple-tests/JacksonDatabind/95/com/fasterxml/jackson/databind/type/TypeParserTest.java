/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 04:17:02 GMT 2023
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeParser;
import org.junit.runner.RunWith;

public class TypeParserTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        try {
            typeParser0.parse("com.fasterxml.jackson.databind.type.TypeParser,MyTokenizr");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse type 'com.fasterxml.jackson.databind.type.TypeParser,MyTokenizr' (remaining: 'MyTokenizr'): Unexpected tokens after complete type
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        assertNotSame(typeFactory0, typeFactory1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeParser typeParser1 = typeParser0.withFactory(typeFactory0);
        assertSame(typeParser1, typeParser0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        JavaType javaType0 = typeParser0.parse("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
        assertFalse(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        try {
            typeParser0.parse("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse type '' (remaining: ''): Unexpected end-of-string
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        try {
            typeParser0.parse("[B<IzLLwAmK^xY~H9");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse type '[B<IzLLwAmK^xY~H9' (remaining: ''): Can not locate class 'IzLLwAmK^xY~H9', problem: Class 'IzLLwAmK^xY~H9.class' should be in target project, but could not be found!
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer("");
        try {
            typeParser0.parseTypes(typeParser_MyTokenizer0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse type '' (remaining: ''): Unexpected end-of-string
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
        typeParser_MyTokenizer0.pushBack("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
        try {
            typeParser0.parseTypes(typeParser_MyTokenizer0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse type 'com.fasterxml.jackson.core.util.DefaultPrettyPrinter' (remaining: ''): Unexpected token 'com.fasterxml.jackson.core.util.DefaultPrettyPrinter', expected ',' or '>')
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer("com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer");
        try {
            typeParser0.parseTypes(typeParser_MyTokenizer0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse type 'com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer' (remaining: ''): Unexpected end-of-string
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer(">");
        typeParser_MyTokenizer0.pushBack("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        typeParser0.parseTypes(typeParser_MyTokenizer0);
        assertEquals("", typeParser_MyTokenizer0.getRemainingInput());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser.MyTokenizer typeParser_MyTokenizer0 = new TypeParser.MyTokenizer("', expected ',' or '>')");
        typeParser_MyTokenizer0.nextToken("', expected ',' or '>')");
        typeParser_MyTokenizer0.pushBack("com.fasterxml.jackson.databind.type.TypeBase");
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        try {
            typeParser0.parseTypes(typeParser_MyTokenizer0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse type '', expected ',' or '>')' (remaining: 'expected ',' or '>')'): Can not locate class '', problem:
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TypeParser typeParser0 = new TypeParser((TypeFactory) null);
        // Undeclared exception!
        try {
            typeParser0.parse("\"YcRu=7");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
