/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 05 00:13:24 GMT 2023
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.HashMap;
import java.util.Map;
import org.junit.runner.RunWith;

public class ReferenceTypeTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<CollectionType> class0 = CollectionType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        ReferenceType referenceType1 = (ReferenceType) referenceType0.refine(class0, typeBindings0, simpleType0, (JavaType[]) null);
        assertFalse(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        JavaType javaType0 = referenceType0.getReferencedType();
        assertTrue(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        boolean boolean0 = referenceType0.isReferenceType();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        String string0 = referenceType0.toString();
        assertEquals("[reference type, class java.lang.Comparable<java.lang.Comparable<[simple type, class java.lang.Comparable]>]", string0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        String string0 = referenceType0.getErasedSignature();
        assertEquals("Ljava/lang/Comparable;", string0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<ReferenceType> class0 = ReferenceType.class;
        ReferenceType referenceType1 = (ReferenceType) referenceType0._narrow(class0);
        boolean boolean0 = referenceType1.equals(referenceType0);
        assertFalse(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<ReferenceType> class0 = ReferenceType.class;
        ReferenceType referenceType1 = (ReferenceType) referenceType0._narrow(class0);
        boolean boolean0 = referenceType1.equals(referenceType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        boolean boolean0 = referenceType0.hasContentType();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        // Undeclared exception!
        try {
            ReferenceType.construct((Class<?>) class0, (JavaType) referenceType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "java.lang.Comparable<java.lang.Comparable");
        referenceType0.getGenericSignature(stringBuilder0);
        assertEquals("java.lang.Comparable<java.lang.ComparableLjava/lang/Comparable<Ljava/lang/Comparable;>;", stringBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1596, 1596);
        TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        JavaType[] javaTypeArray0 = new JavaType[2];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, javaTypeArray0, (JavaType) mapType0);
        assertFalse(referenceType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1596, 1596);
        TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        JavaType[] javaTypeArray0 = new JavaType[2];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, javaTypeArray0, (JavaType) mapType0);
        assertTrue(referenceType0.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<Object> class1 = Object.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        Object object0 = new Object();
        ReferenceType referenceType0 = new ReferenceType(class1, typeBindings0, placeholderForType0, javaTypeArray0, placeholderForType0, placeholderForType0, mapType0, object0, true);
        JavaType javaType0 = referenceType0.getAnchorType();
        assertFalse(referenceType0.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<Object> class1 = Object.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        Object object0 = new Object();
        ReferenceType referenceType0 = new ReferenceType(class1, typeBindings0, placeholderForType0, javaTypeArray0, placeholderForType0, placeholderForType0, mapType0, object0, true);
        JavaType javaType0 = referenceType0.getAnchorType();
        assertNotNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        CollectionType collectionType0 = new CollectionType(simpleType0, referenceType0);
        JavaType javaType0 = collectionType0.withHandlersFrom(referenceType0);
        assertSame(javaType0, collectionType0);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        // Undeclared exception!
        try {
            ReferenceType.upgradeFrom(referenceType0, (JavaType) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Missing referencedType
        }
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-11));
        // Undeclared exception!
        try {
            ReferenceType.upgradeFrom((JavaType) null, placeholderForType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler(class0);
        ReferenceType referenceType2 = (ReferenceType) referenceType1.withContentType(simpleType0);
        assertNotSame(referenceType2, referenceType1);
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler(class0);
        ReferenceType referenceType2 = (ReferenceType) referenceType1.withContentType(simpleType0);
        assertTrue(referenceType0.equals((Object) referenceType1));
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler(class0);
        ReferenceType referenceType2 = (ReferenceType) referenceType1.withContentType(simpleType0);
        assertFalse(referenceType2.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler(class0);
        ReferenceType referenceType2 = (ReferenceType) referenceType1.withContentType(simpleType0);
        assertTrue(referenceType2.equals((Object) referenceType1));
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler(class0);
        ReferenceType referenceType2 = (ReferenceType) referenceType1.withContentType(simpleType0);
        assertFalse(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentType(simpleType0);
        assertTrue(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withTypeHandler(simpleType0);
        assertFalse(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withTypeHandler(simpleType0);
        assertTrue(referenceType1.equals((Object) referenceType0));
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
        assertTrue(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        Class<CollectionType> class0 = CollectionType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
        assertTrue(referenceType1.equals((Object) referenceType0));
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        Class<CollectionType> class0 = CollectionType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
        assertFalse(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
        assertTrue(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(referenceType0);
        boolean boolean0 = referenceType1.isAnchorType();
        assertTrue(referenceType0.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(referenceType0);
        boolean boolean0 = referenceType1.isAnchorType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(referenceType0);
        boolean boolean0 = referenceType1.isAnchorType();
        assertTrue(referenceType0.equals((Object) referenceType1));
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
        assertTrue(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
        assertTrue(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test2334() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        boolean boolean0 = referenceType1.equals(referenceType0);
        assertTrue(referenceType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        boolean boolean0 = referenceType1.equals(referenceType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2336() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        boolean boolean0 = referenceType1.equals(referenceType0);
        assertFalse(referenceType1.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test2437() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        ReferenceType referenceType2 = referenceType1.withStaticTyping();
        assertSame(referenceType2, referenceType1);
    }

    @Test(timeout = 4000)
    public void test2438() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        ReferenceType referenceType2 = referenceType1.withStaticTyping();
        assertTrue(referenceType2.equals((Object) referenceType0));
    }

    @Test(timeout = 4000)
    public void test2439() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        ReferenceType referenceType2 = referenceType1.withStaticTyping();
        assertFalse(referenceType2.isAnchorType());
    }

    @Test(timeout = 4000)
    public void test2540() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        boolean boolean0 = referenceType0.isAnchorType();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2641() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        boolean boolean0 = referenceType0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2742() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        boolean boolean0 = referenceType0.equals(referenceType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2843() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        boolean boolean0 = referenceType0.equals("");
        assertFalse(boolean0);
    }
}
