/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 21:00:55 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.net.URI;
import java.sql.SQLClientInfoException;
import java.sql.SQLNonTransientException;
import java.text.DateFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicReference;
import org.junit.runner.RunWith;

public class DeserializationContextTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
        // Undeclared exception!
        try {
            defaultDeserializationContext0.readValue((JsonParser) null, javaType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[3];
        Long long0 = new Long(3873L);
        Class<Throwable> class0 = Throwable.class;
        try {
            defaultDeserializationContext0.handleWeirdNumberValue(class0, long0, "Q?f;cy~Z$jN_", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize value of type `java.lang.Throwable` from number 3873: Q?f;cy~Z$jN_
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.unknownTypeException((JavaType) null, "ZFFH[", "!=");
        assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        assertFalse(objectMapper1.equals((Object) objectMapper0));
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        Object[] objectArray0 = new Object[6];
        // Undeclared exception!
        try {
            deserializationContext0.reportWrongTokenException((JsonParser) null, jsonToken0, "MBp`XI`9aG24}]", objectArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Throwable> class0 = Throwable.class;
        try {
            defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) null, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input when binding data into `java.lang.Throwable`
            //  at [Source: UNKNOWN; line: 1, column: 0]
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        File file0 = MockFile.createTempFile("[method ", "[_L>uHanGJ% 7oW/", (File) mockFile0);
        try {
            objectReader0.readValue(file0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object object0 = defaultDeserializationContext0.getAttribute("");
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Class<MapType> class0 = MapType.class;
        // Undeclared exception!
        try {
            deserializationContext0.mappingException(class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        // Undeclared exception!
        try {
            deserializationContext0.canOverrideAccessModifiers();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Object[] objectArray0 = new Object[4];
        // Undeclared exception!
        try {
            deserializationContext0.reportInputMismatch((JsonDeserializer<?>) null, "", objectArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        // Undeclared exception!
        try {
            deserializationContext0.getLocale();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JavaType javaType0 = TypeFactory.unknownType();
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        // Undeclared exception!
        try {
            defaultDeserializationContext_Impl0.reportWrongTokenException(javaType0, jsonToken0, "", (Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        // Undeclared exception!
        try {
            deserializationContext0.mappingException("(m#j#Q_w6<\"XM", (Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        // Undeclared exception!
        try {
            deserializationContext0.findClass("h/");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Object[] objectArray0 = new Object[7];
        try {
            deserializationContext0.reportMappingException("wx?+#L^.e-l;-GzNM}", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // wx?+#L^.e-l;-GzNM}
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
        Object[] objectArray0 = new Object[9];
        // Undeclared exception!
        try {
            deserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "", objectArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.mappingException("E");
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        deserializationContext0.endOfInputException(class0);
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Class<PlaceholderForType> class1 = PlaceholderForType.class;
        // Undeclared exception!
        try {
            defaultDeserializationContext0.readValue((JsonParser) null, class1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        // Undeclared exception!
        try {
            deserializationContext0.getBase64Variant();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Class<Throwable> class0 = Throwable.class;
        JsonFactory jsonFactory0 = new JsonFactory();
        StringReader stringReader0 = new StringReader("8^Rm Mu$1}?(89C");
        JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        try {
            deserializationContext0.reportTrailingTokens((Class<?>) class0, (JsonParser) jsonParserDelegate0, jsonToken0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Trailing token (of type START_OBJECT) found after value (bound as `java.lang.Throwable`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
            //  at [Source: (StringReader); line: 1, column: 0]
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        try {
            defaultDeserializationContext0.parseDate("Q?f;cy~Z$jPN_");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse Date value 'Q?f;cy~Z$jPN_': Cannot parse date \"Q?f;cy~Z$jPN_\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[4];
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        try {
            defaultDeserializationContext0.handleWeirdStringValue(class0, "com.fasterxml.jackson.annotation.JsonFormat$Shape", "com.fasterxml.jackson.annotation.JsonFormat$Shape", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize value of type `com.fasterxml.jackson.databind.deser.BeanDeserializer` from String \"com.fasterxml.jackson.annotation.JsonFormat$Shape\": com.fasterxml.jackson.annotation.JsonFormat$Shape
        }
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        // Undeclared exception!
        try {
            defaultDeserializationContext_Impl0.instantiationException(class0, "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<MatchStrength> class0 = MatchStrength.class;
        JsonToken jsonToken0 = JsonToken.END_OBJECT;
        Object[] objectArray0 = new Object[2];
        // Undeclared exception!
        try {
            defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, "k>>", objectArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[2];
        // Undeclared exception!
        try {
            defaultDeserializationContext_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "<AbU9", objectArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        MockDate mockDate0 = new MockDate((-1L));
        // Undeclared exception!
        try {
            defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        JavaType javaType0 = TypeFactory.unknownType();
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        try {
            defaultDeserializationContext0.handleWeirdNativeValue(javaType0, simpleObjectIdResolver0, (JsonParser) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.annotation.SimpleObjectIdResolver`: incompatible types
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Object[] objectArray0 = new Object[2];
        try {
            deserializationContext0.reportMissingContent("", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
        }
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        // Undeclared exception!
        try {
            defaultDeserializationContext_Impl0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) beanDeserializerFactory0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[5];
        // Undeclared exception!
        try {
            defaultDeserializationContext0.reportBadTypeDefinition((BeanDescription) null, (String) null, objectArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Class<?> class0 = defaultDeserializationContext0.getActiveView();
        assertNull(class0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        DeserializerFactory deserializerFactory0 = deserializationContext0.getFactory();
        assertNotNull(deserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        DeserializerFactory deserializerFactory0 = deserializationContext0.getFactory();
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
        assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<PlaceholderForType> class0 = PlaceholderForType.class;
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        defaultDeserializationContext_Impl0.mappingException(class0, jsonToken0);
        assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        int int0 = defaultDeserializationContext_Impl0.getDeserializationFeatures();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        // Undeclared exception!
        try {
            defaultDeserializationContext_Impl0.setAttribute(jsonFactory0, jsonFactory0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        // Undeclared exception!
        try {
            defaultDeserializationContext_Impl0.getNodeFactory();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
        try {
            defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot pass null DeserializerFactory
        }
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.getContextualType();
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        try {
            objectMapper0.treeToValue((TreeNode) arrayNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize instance of `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` out of START_ARRAY token
            //  at [Source: UNKNOWN; line: -1, column: -1]
        }
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(4415);
        assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(4415);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(0);
        assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        boolean boolean0 = deserializationContext0.hasSomeOfFeatures(3791);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures(1269);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, 4415, 561);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        JsonDeserializer<MockSimpleDateFormat> jsonDeserializer0 = (JsonDeserializer<MockSimpleDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        try {
            defaultDeserializationContext0.findInjectableValue(jsonDeserializer0, (BeanProperty) null, injectableValues_Std0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized inject value id type (`com.fasterxml.jackson.databind.JsonDeserializer$MockitoMock$329186939`), expecting String
            //  at [Source: UNKNOWN; line: 1, column: 0]
        }
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        // Undeclared exception!
        try {
            deserializationContext0.findInjectableValue(bigDecimal0, beanProperty_Bogus0, beanProperty_Bogus0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JavaType javaType0 = TypeFactory.unknownType();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = deserializationContext0.hasValueDeserializerFor(javaType0, atomicReference0);
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JavaType javaType0 = TypeFactory.unknownType();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = deserializationContext0.hasValueDeserializerFor(javaType0, atomicReference0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        // Undeclared exception!
        try {
            deserializationContext0.hasValueDeserializerFor((JavaType) null, (AtomicReference<Throwable>) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null JavaType passed
        }
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        JavaType javaType0 = defaultDeserializationContext0.constructType((Class<?>) null);
        assertNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        deserializationContext0.returnObjectBuffer(objectBuffer0);
        ObjectBuffer objectBuffer1 = deserializationContext0.leaseObjectBuffer();
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5156() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        deserializationContext0.returnObjectBuffer(objectBuffer0);
        ObjectBuffer objectBuffer1 = deserializationContext0.leaseObjectBuffer();
        assertSame(objectBuffer1, objectBuffer0);
    }

    @Test(timeout = 4000)
    public void test5157() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        ObjectBuffer objectBuffer0 = new ObjectBuffer();
        deserializationContext0.returnObjectBuffer(objectBuffer0);
        ObjectBuffer objectBuffer1 = deserializationContext0.leaseObjectBuffer();
        assertNotNull(objectBuffer1);
    }

    @Test(timeout = 4000)
    public void test5258() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        ObjectBuffer objectBuffer0 = deserializationContext0.leaseObjectBuffer();
        assertNotNull(objectBuffer0);
    }

    @Test(timeout = 4000)
    public void test5259() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        ObjectBuffer objectBuffer0 = deserializationContext0.leaseObjectBuffer();
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5360() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getArrayBuilders();
        ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
        assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5361() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getArrayBuilders();
        ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
        assertNotNull(arrayBuilders0);
    }

    @Test(timeout = 4000)
    public void test5462() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        // Undeclared exception!
        try {
            defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, (JsonDeserializer<?>) null, "", "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.JsonDeserializer.class), any(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        JsonDeserializer<BuilderBasedDeserializer> jsonDeserializer0 = (JsonDeserializer<BuilderBasedDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
        // Undeclared exception!
        try {
            defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, jsonDeserializer0, objectReader0, "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5664() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.JsonDeserializer.class), any(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        JsonDeserializer<BuilderBasedDeserializer> jsonDeserializer0 = (JsonDeserializer<BuilderBasedDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        boolean boolean0 = defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, jsonDeserializer0, objectReader0, "");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5765() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[4];
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        try {
            defaultDeserializationContext0.handleWeirdKey(class0, "Uexpected end-of-input when inding dataiinto %s", "Uexpected end-of-input when inding dataiinto %s", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.deser.BeanDeserializer` from String \"Uexpected end-of-input when inding dataiinto %s\": Uexpected end-of-input when inding dataiinto null
        }
    }

    @Test(timeout = 4000)
    public void test5866() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[3];
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        try {
            defaultDeserializationContext0.handleWeirdKey(class0, "UexpeUted end-of-input when inding dataiinto %s", "UexpeUted end-of-input when inding dataiinto %s", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize value of type `com.fasterxml.jackson.databind.deser.BeanDeserializer` from String \"UexpeUted end-of-input when inding dataiinto %s\": DeserializationProblemHandler.handleWeirdStringValue() for type class com.fasterxml.jackson.databind.deser.BeanDeserializer returned value of type class com.fasterxml.jackson.databind.ObjectMapper
        }
    }

    @Test(timeout = 4000)
    public void test5967() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[3];
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        Object object0 = defaultDeserializationContext0.handleWeirdKey(class0, "UexpeUted end-of-input when inding dataiinto %s", "UexpeUted end-of-input when inding dataiinto %s", objectArray0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test6068() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[4];
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        try {
            defaultDeserializationContext0.handleWeirdStringValue(class0, "com.fasterxml.jackson.annotation.JsonFormat$Shape", "com.fasterxml.jackson.annotation.JsonFormat$Shape", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize value of type `com.fasterxml.jackson.databind.deser.BeanDeserializer` from String \"com.fasterxml.jackson.annotation.JsonFormat$Shape\": DeserializationProblemHandler.handleWeirdStringValue() for type class com.fasterxml.jackson.databind.deser.BeanDeserializer returned value of type class com.fasterxml.jackson.databind.ObjectMapper
        }
    }

    @Test(timeout = 4000)
    public void test6169() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), anyString(), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[4];
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        Object object0 = defaultDeserializationContext0.handleWeirdStringValue(class0, (String) null, "", objectArray0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test6270() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdNumberValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(java.lang.Number.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[4];
        Long long0 = new Long(2396L);
        Class<Object> class0 = Object.class;
        Object object0 = defaultDeserializationContext0.handleWeirdNumberValue(class0, long0, "Q?f;cy~Z$jPN_", objectArray0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test6371() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdNumberValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(java.lang.Number.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[3];
        Long long0 = new Long(3873L);
        Class<Throwable> class0 = Throwable.class;
        try {
            defaultDeserializationContext0.handleWeirdNumberValue(class0, long0, "Q?f;cy~Z$jN_", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot deserialize value of type `java.lang.Throwable` from number 3873: DeserializationProblemHandler.handleWeirdNumberValue() for type class java.lang.Throwable returned value of type class com.fasterxml.jackson.databind.ObjectMapper
        }
    }

    @Test(timeout = 4000)
    public void test6472() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(), any(com.fasterxml.jackson.core.JsonParser.class));
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        try {
            defaultDeserializationContext0.handleWeirdNativeValue(mapType0, mapType0, (JsonParser) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // DeserializationProblemHandler.handleWeirdNativeValue() for type [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] returned value of type class com.fasterxml.jackson.databind.ObjectMapper
        }
    }

    @Test(timeout = 4000)
    public void test6573() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(), any(com.fasterxml.jackson.core.JsonParser.class));
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        Object object0 = defaultDeserializationContext0.handleWeirdNativeValue(mapType0, mapType0, (JsonParser) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test6674() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        try {
            objectMapper0.treeToValue((TreeNode) decimalNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` (no Creators, like default construct, exist): no suitable creator method found to deserialize from Number value (10)
            //  at [Source: UNKNOWN; line: -1, column: -1]
        }
    }

    @Test(timeout = 4000)
    public void test6775() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Class<DateFormat> class0 = DateFormat.class;
        JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
        try {
            defaultDeserializationContext0.readValue((JsonParser) null, javaType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // DeserializationProblemHandler.handleMissingInstantiator() for type class java.text.DateFormat returned value of type `com.fasterxml.jackson.databind.ObjectMapper`
        }
    }

    @Test(timeout = 4000)
    public void test6876() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Class<DateFormat> class0 = DateFormat.class;
        JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
        Integer integer0 = defaultDeserializationContext0.readValue((JsonParser) null, javaType0);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test6977() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Object[] objectArray0 = new Object[3];
        Class<String> class0 = String.class;
        try {
            defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, (JsonParser) null, "", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `java.lang.String` (although at least one Creator exists):
        }
    }

    @Test(timeout = 4000)
    public void test7078() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
        Class<Throwable> class0 = Throwable.class;
        try {
            defaultDeserializationContext0.handleInstantiationProblem(class0, (Object) null, sQLClientInfoException0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `java.lang.Throwable`, problem: `java.sql.SQLClientInfoException`
        }
    }

    @Test(timeout = 4000)
    public void test7179() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleInstantiationProblem(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(), any(java.lang.Throwable.class));
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper1.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
        Class<String> class0 = String.class;
        try {
            defaultDeserializationContext0.handleInstantiationProblem(class0, (Object) null, sQLClientInfoException0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // DeserializationProblemHandler.handleInstantiationProblem() for type class java.lang.String returned value of type `com.fasterxml.jackson.databind.ObjectMapper`
        }
    }

    @Test(timeout = 4000)
    public void test7280() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleInstantiationProblem(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(), any(java.lang.Throwable.class));
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
        Class<String> class0 = String.class;
        Object object0 = defaultDeserializationContext0.handleInstantiationProblem(class0, objectMapper0, sQLClientInfoException0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test7381() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.core.JsonToken.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        Class<Throwable> class0 = Throwable.class;
        Throwable throwable0 = defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) null, class0);
        assertNull(throwable0);
    }

    @Test(timeout = 4000)
    public void test7482() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(objectMapper0).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.core.JsonToken.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper1.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Class<Throwable> class0 = Throwable.class;
        JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
        Object[] objectArray0 = new Object[2];
        try {
            defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // DeserializationProblemHandler.handleUnexpectedToken() for type `java.lang.Throwable` returned value of type `com.fasterxml.jackson.databind.ObjectMapper`
        }
    }

    @Test(timeout = 4000)
    public void test7583() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        JsonToken jsonToken0 = JsonToken.END_OBJECT;
        Object[] objectArray0 = new Object[3];
        try {
            defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "Could not resolve type id '%s' as a subtype of %s", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Could not resolve type id 'null' as a subtype of null
        }
    }

    @Test(timeout = 4000)
    public void test7684() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), anyString(), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Class<DateFormat> class0 = DateFormat.class;
        JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
        try {
            defaultDeserializationContext0.handleUnknownTypeId(javaType0, "", (TypeIdResolver) null, "");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Could not resolve type id '' as a subtype of [simple type, class java.text.DateFormat]:
        }
    }

    @Test(timeout = 4000)
    public void test7785() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-2766));
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(placeholderForType0).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), anyString(), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<Integer> class0 = Integer.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) placeholderForType0);
        try {
            defaultDeserializationContext0.handleUnknownTypeId(collectionLikeType0, "@% c`XHa@$X", (TypeIdResolver) null, "@% c`XHa@$X");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Could not resolve type id '@% c`XHa@$X' as a subtype of [collection-like type; class java.lang.Integer, contains $-2765]: problem handler tried to resolve into non-subtype: $-2765
        }
    }

    @Test(timeout = 4000)
    public void test7886() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-2766));
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(placeholderForType0).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), anyString(), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
        objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        JavaType javaType0 = defaultDeserializationContext0.handleUnknownTypeId(placeholderForType0, "@% c`XHa@$X", (TypeIdResolver) null, "No Object Id found for an instance of %s, to assign to property '%s'");
        assertFalse(javaType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test7987() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(deserializationProblemHandler0).handleMissingTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper1.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
        try {
            defaultDeserializationContext0.handleMissingTypeId(javaType0, classNameIdResolver0, "NOT_AVAILABLE");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: NOT_AVAILABLE
        }
    }

    @Test(timeout = 4000)
    public void test8088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(deserializationProblemHandler0).handleMissingTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.databind.JavaType.class), any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class), anyString());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
        ObjectReader objectReader0 = objectMapper1.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
        try {
            defaultDeserializationContext0.handleMissingTypeId((JavaType) null, classNameIdResolver0, "K");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Missing type id when trying to resolve subtype of null: K
        }
    }

    @Test(timeout = 4000)
    public void test8189() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        Class<Object> class0 = Object.class;
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, class0);
        assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test8190() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        Class<Object> class0 = Object.class;
        boolean boolean0 = ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8291() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectMapper0.getDeserializationContext();
        Class<Void> class0 = Void.TYPE;
        // Undeclared exception!
        try {
            ((DeserializationContext) defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class void is not a primitive type
        }
    }

    @Test(timeout = 4000)
    public void test8392() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        Object[] objectArray0 = new Object[8];
        try {
            defaultDeserializationContext0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            //
        }
    }

    @Test(timeout = 4000)
    public void test8493() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object[] objectArray0 = new Object[1];
        try {
            defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, "Current token (%s) not of boolean type", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not of boolean type
        }
    }

    @Test(timeout = 4000)
    public void test8594() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.reportUnknownProperty(beanDeserializerFactory0, "JSON", (JsonDeserializer<?>) null);
        assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test8695() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
        // Undeclared exception!
        try {
            defaultDeserializationContext0.reportUnknownProperty((Object) null, "DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s", jsonDeserializer0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test8796() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
        try {
            defaultDeserializationContext0.reportUnknownProperty(jsonParser_Feature0, "JSON", (JsonDeserializer<?>) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized field \"JSON\" (class com.fasterxml.jackson.core.JsonParser$Feature), not marked as ignorable
            //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.JsonParser$Feature[\"JSON\"])
        }
    }

    @Test(timeout = 4000)
    public void test8897() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        PlaceholderForType placeholderForType0 = defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
        assertNull(placeholderForType0);
    }

    @Test(timeout = 4000)
    public void test8998() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Class<InputStream> class0 = InputStream.class;
        try {
            defaultDeserializationContext0.handleInstantiationProblem(class0, (Object) null, (Throwable) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `java.io.InputStream`, problem: N/A
        }
    }

    @Test(timeout = 4000)
    public void test9099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
        Class<Void> class0 = Void.class;
        MockThrowable mockThrowable0 = new MockThrowable();
        SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(mockThrowable0);
        try {
            defaultDeserializationContext0.handleInstantiationProblem(class0, objectReader0, sQLNonTransientException0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot construct instance of `java.lang.Void`, problem: org.evosuite.runtime.mock.java.lang.MockThrowable
        }
    }
}
