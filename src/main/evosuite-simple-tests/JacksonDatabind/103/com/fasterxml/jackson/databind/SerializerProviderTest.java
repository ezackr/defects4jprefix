/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 04:30:13 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.text.DateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;

public class SerializerProviderTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        try {
            serializerProvider0.findValueSerializer((JavaType) null, (BeanProperty) beanProperty_Bogus0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Null passed for `valueType` of `findValueSerializer()`
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.getLocale();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.findTypeSerializer((JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.setAttribute(beanProperty_Bogus0, beanProperty_Bogus0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", "JSON", 37);
        Object[] objectArray0 = new Object[4];
        JsonMappingException jsonMappingException0 = ((SerializerProvider) defaultSerializerProvider_Impl0).mappingException((Throwable) sQLRecoverableException0, "JSON", objectArray0);
        assertNotNull(jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<NullNode> class0 = NullNode.class;
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.hasSerializationFeatures(0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Object object0 = serializerProvider0.getAttribute((Object) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Class<ObjectReader> class0 = ObjectReader.class;
        try {
            serializerProvider0.reportBadDefinition((Class<?>) class0, ")`r\"g4*S-'XPzox.e", (Throwable) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // )`r\"g4*S-'XPzox.e
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        try {
            defaultSerializerProvider_Impl0.resolveSubType((JavaType) null, "^f");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Could not resolve type id '^f' as a subtype of null: problem: (java.lang.NullPointerException) null
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
        try {
            serializerProvider0.reportBadDefinition((JavaType) null, "", (Throwable) sQLFeatureNotSupportedException0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            //
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Class<MockDateFormat> class0 = MockDateFormat.class;
        JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer(class0, (BeanProperty) null);
        assertFalse(jsonSerializer0.isUnwrappingSerializer());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        assertNotSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullKeySerializer((JavaType) null, (BeanProperty) null);
        assertFalse(jsonSerializer0.usesObjectId());
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<?> class0 = defaultSerializerProvider_Impl0.getSerializationView();
        assertNull(class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<?> class0 = defaultSerializerProvider_Impl0.getActiveView();
        assertNull(class0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
        assertFalse(jsonSerializer0.usesObjectId());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        boolean boolean0 = serializerProvider0.canOverrideAccessModifiers();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getDefaultNullKeySerializer();
        assertFalse(jsonSerializer0.usesObjectId());
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
        SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
        Object[] objectArray0 = new Object[0];
        try {
            serializerProvider0.reportMappingProblem((Throwable) sQLTransactionRollbackException0, "Cannot pass null JsonSerializer", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Cannot pass null JsonSerializer
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.getTimeZone();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.getFilterProvider();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.setDefaultKeySerializer((JsonSerializer<Object>) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot pass null JsonSerializer
        }
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.setNullValueSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.setNullValueSerializer((JsonSerializer<Object>) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot pass null JsonSerializer
        }
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.setNullKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.setNullKeySerializer((JsonSerializer<Object>) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot pass null JsonSerializer
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        assertEquals(5, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        Class<ReferenceType> class0 = ReferenceType.class;
        objectMapper0.writerFor(class0);
        defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, true, (BeanProperty) null);
        assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        LinkedList<BeanPropertyWriter> linkedList0 = new LinkedList<BeanPropertyWriter>();
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
        objectMapper0.setSerializerFactory(serializerFactory0);
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        try {
            objectMapper0.writeValueAsBytes(simpleObjectIdResolver0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Invalid type definition for type `com.fasterxml.jackson.annotation.SimpleObjectIdResolver`: Failed to construct BeanSerializer for [simple type, class com.fasterxml.jackson.annotation.SimpleObjectIdResolver]: (java.lang.NullPointerException) null
        }
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JavaType> class0 = JavaType.class;
        objectMapper0.canSerialize(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        Class<UnknownSerializer> class1 = UnknownSerializer.class;
        defaultSerializerProvider_Impl0.findValueSerializer(class1);
        assertEquals(7, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JavaType> class0 = JavaType.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JavaType> class0 = JavaType.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
        assertEquals(5, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JavaType> class0 = JavaType.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
        assertNotNull(jsonSerializer0);
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        Class<Integer> class0 = Integer.class;
        objectMapper0.canSerialize(class0);
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
        assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
        Class<Object> class0 = Object.class;
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
        assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
        assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
        assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        assertEquals(5, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
        Class<Object> class0 = Object.class;
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        Class<BeanSerializer> class0 = BeanSerializer.class;
        defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, false, (BeanProperty) null);
        assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
        ObjectWriter objectWriter1 = objectMapper0.writerFor(class0);
        assertTrue(objectWriter1.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) simpleType0, true, (BeanProperty) beanProperty_Bogus0);
        defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) simpleType0, true, (BeanProperty) beanProperty_Bogus0);
        assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<ReferenceType> class0 = ReferenceType.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) collectionLikeType0, false, (BeanProperty) null);
        assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        Class<Object> class0 = Object.class;
        ((SerializerProvider) defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        boolean boolean0 = serializerProvider0.isUnknownTypeSerializer((JsonSerializer<?>) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        Class<ObjectInputStream> class0 = ObjectInputStream.class;
        ((SerializerProvider) defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider) defaultSerializerProvider_Impl0)._handleContextualResolvable((JsonSerializer<?>) null, (BeanProperty) null);
        assertNull(jsonSerializer0);
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        // Undeclared exception!
        try {
            serializerProvider0.defaultSerializeValue(objectMapper0, (JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        // Undeclared exception!
        try {
            serializerProvider0.defaultSerializeValue((Object) null, (JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5154() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, (JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5255() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, true);
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.defaultSerializeField("", "", filteringGeneratorDelegate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5356() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, false);
        serializerProvider0.defaultSerializeField("7WZFww;x'Z JJQbm#E*", (Object) null, filteringGeneratorDelegate0);
        assertTrue(serializerProvider0.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test5457() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, true);
        defaultSerializerProvider_Impl0.defaultSerializeField("", (Object) null, filteringGeneratorDelegate0);
        assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
    }

    @Test(timeout = 4000)
    public void test5558() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        // Undeclared exception!
        try {
            serializerProvider0.defaultSerializeDateValue((-1L), (JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5659() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        objectMapper0.setDateFormat(dateFormat0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5760() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5861() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        // Undeclared exception!
        try {
            serializerProvider0.defaultSerializeDateKey(1934L, (JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test5962() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test6063() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        // Undeclared exception!
        try {
            serializerProvider0.defaultSerializeNull((JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test6164() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            defaultSerializerProvider_Impl0.defaultSerializeNull((JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test6265() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Object[] objectArray0 = new Object[1];
        try {
            serializerProvider0.reportBadTypeDefinition((BeanDescription) null, ":", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Invalid type definition for type N/A: :
        }
    }

    @Test(timeout = 4000)
    public void test6366() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
        objectMapper0.setSerializerFactory(serializerFactory0);
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        try {
            objectMapper0.writeValueAsBytes(simpleObjectIdResolver0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Invalid type definition for type `com.fasterxml.jackson.annotation.SimpleObjectIdResolver`: Failed to construct BeanSerializer for [simple type, class com.fasterxml.jackson.annotation.SimpleObjectIdResolver]: (java.lang.NullPointerException) null
        }
    }

    @Test(timeout = 4000)
    public void test6467() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Object[] objectArray0 = new Object[2];
        try {
            serializerProvider0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Invalid definition for property N/A (of type N/A):
        }
    }

    @Test(timeout = 4000)
    public void test6568() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, collectionLikeType0, (ClassIntrospector.MixInResolver) null);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        PropertyName propertyName0 = new PropertyName("o9.vD%P59/A$lfE", "o9.vD%P59/A$lfE");
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, jacksonAnnotationIntrospector0, false, propertyName0);
        Object[] objectArray0 = new Object[1];
        try {
            serializerProvider0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) pOJOPropertyBuilder0, "`~w> )<?xW7oh8L>", objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Invalid definition for property \"o9.vD%P59/A$lfE\" (of type `java.lang.String`): `~w> )<?xW7oh8L>
        }
    }

    @Test(timeout = 4000)
    public void test6669() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<UnknownSerializer> class0 = UnknownSerializer.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        try {
            ((SerializerProvider) defaultSerializerProvider_Impl0)._reportIncompatibleRootType(objectMapper0, mapLikeType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Incompatible types: declared root type ([map-like type; class com.fasterxml.jackson.databind.ser.impl.UnknownSerializer, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]) vs `com.fasterxml.jackson.databind.ObjectMapper`
        }
    }

    @Test(timeout = 4000)
    public void test6770() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
        ((SerializerProvider) defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test6871() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        Class<UnknownSerializer> class0 = UnknownSerializer.class;
        JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
        ((SerializerProvider) defaultSerializerProvider_Impl0)._handleContextualResolvable(jsonSerializer0, (BeanProperty) null);
        assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test6972() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JsonSerializer<Object> jsonSerializer0 = serializerProvider0.serializerInstance((Annotated) null, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        assertFalse(jsonSerializer0.usesObjectId());
    }

    @Test(timeout = 4000)
    public void test7073() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        Class<BeanSerializer> class0 = BeanSerializer.class;
        JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider) defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, jsonSerializer0);
        assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
    }

    @Test(timeout = 4000)
    public void test7174() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        StdDateFormat stdDateFormat0 = (StdDateFormat) ((SerializerProvider) defaultSerializerProvider_Impl0)._dateFormat();
        StdDateFormat stdDateFormat1 = (StdDateFormat) ((SerializerProvider) defaultSerializerProvider_Impl0)._dateFormat();
        assertSame(stdDateFormat1, stdDateFormat0);
    }
}
