/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 04:43:53 GMT 2023
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.SQLFeatureNotSupportedException;
import org.junit.runner.RunWith;

public class SettableBeanPropertyTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-196), (Object) null, propertyMetadata0);
        // Undeclared exception!
        try {
            creatorProperty0._throwAsIOE((Exception) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd$4s}VC", true, (JavaType) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, asPropertyTypeDeserializer0, propertyMetadata0);
        int int0 = creatorProperty0.getPropertyIndex();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd$4s}VC", true, (JavaType) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, asPropertyTypeDeserializer0, propertyMetadata0);
        int int0 = creatorProperty0.getPropertyIndex();
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 883, (Object) null, propertyMetadata0);
        Class<Annotation> class0 = Annotation.class;
        // Undeclared exception!
        try {
            creatorProperty0.getContextAnnotation(class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd|$4saVC", true, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 8, asPropertyTypeDeserializer0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        objectIdReferenceProperty0.getInjectableValueId();
        assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd|$4saVC", true, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 8, asPropertyTypeDeserializer0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        objectIdReferenceProperty0.getInjectableValueId();
        assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
        // Undeclared exception!
        try {
            creatorProperty0.getDeclaringClass();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2616), (Object) null, propertyMetadata0);
        creatorProperty0.setManagedReferenceName("@Cv^pEtO{;V%at{w");
        assertFalse(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd|$4saVC", true, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 8, asPropertyTypeDeserializer0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        String string0 = objectIdReferenceProperty0.toString();
        assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd|$4saVC", true, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 8, asPropertyTypeDeserializer0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        String string0 = objectIdReferenceProperty0.toString();
        assertEquals("[property '']", string0);
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd|$4saVC", true, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 8, asPropertyTypeDeserializer0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
        String string0 = objectIdReferenceProperty0.toString();
        assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd$4s}VC", true, (JavaType) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, asPropertyTypeDeserializer0, propertyMetadata0);
        PropertyName propertyName0 = creatorProperty0.getWrapperName();
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd$4s}VC", true, (JavaType) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, asPropertyTypeDeserializer0, propertyMetadata0);
        PropertyName propertyName0 = creatorProperty0.getWrapperName();
        assertNull(propertyName0);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        creatorProperty0.setObjectIdInfo(objectIdInfo0);
        assertFalse(objectIdInfo0.getAlwaysAsId());
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "WM1Kbx~Yo? P3zMXq", true, (JavaType) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        Object object0 = new Object();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), object0, propertyMetadata0);
        PropertyName propertyName0 = creatorProperty0.getFullName();
        assertNotNull(propertyName0);
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "WM1Kbx~Yo? P3zMXq", true, (JavaType) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        Object object0 = new Object();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), object0, propertyMetadata0);
        PropertyName propertyName0 = creatorProperty0.getFullName();
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "WM1Kbx~Yo? P3zMXq", true, (JavaType) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, asPropertyTypeDeserializer0, propertyMetadata0);
        creatorProperty0.getNullValueProvider();
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 725, (Object) null, propertyMetadata0);
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
        try {
            creatorProperty0._throwAsIOE(sQLFeatureNotSupportedException0, (Object) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // N/A
        }
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
        assertEquals((-1), creatorProperty1.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
        assertTrue(creatorProperty1.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("<");
        assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("<");
        assertEquals((-1), creatorProperty1.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test1423() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("<");
        assertEquals("<", settableBeanProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test1424() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("<");
        assertNotSame(settableBeanProperty0, creatorProperty1);
    }

    @Test(timeout = 4000)
    public void test1525() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
        SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
        assertSame(settableBeanProperty0, creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test1626() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2468), propertyMetadata0, propertyMetadata0);
        Class<BufferedInputStream>[] classArray0 = (Class<BufferedInputStream>[]) Array.newInstance(Class.class, 0);
        creatorProperty0.setViews(classArray0);
        assertTrue(creatorProperty0.hasViews());
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 25, (Object) null, propertyMetadata0);
        creatorProperty0._propertyIndex = 25;
        // Undeclared exception!
        try {
            creatorProperty0.assignIndex(25);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Property '' already had index (25), trying to assign 25
        }
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd$4sC", true, (JavaType) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(defaultSerializerProvider_Impl0);
        creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test1929() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd$4s}VC", true, (JavaType) null);
        Boolean boolean0 = Boolean.TRUE;
        Integer integer0 = Integer.getInteger("", (-1));
        PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "c18Cd$4s}VC", integer0, (String) null);
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, asPropertyTypeDeserializer0, propertyMetadata0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-236), (Object) null, propertyMetadata0);
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        boolean boolean0 = creatorProperty1.hasValueDeserializer();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-236), (Object) null, propertyMetadata0);
        JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        boolean boolean0 = creatorProperty1.hasValueDeserializer();
        assertEquals((-1), creatorProperty1.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-8), (Object) null, propertyMetadata0);
        JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
        assertNull(jsonDeserializer0);
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), classNameIdResolver0, propertyMetadata0);
        Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
        boolean boolean0 = creatorProperty0.visibleInView(class0);
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test2234() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), classNameIdResolver0, propertyMetadata0);
        Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
        boolean boolean0 = creatorProperty0.visibleInView(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.f=Vterxmnjackson.databind.type.TypeBindings$TpePaZamStas", true, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1339, (Object) null, propertyMetadata0);
        ViewMatcher viewMatcher0 = new ViewMatcher();
        creatorProperty0._viewMatcher = viewMatcher0;
        Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
        boolean boolean0 = creatorProperty0.visibleInView(class0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2336() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.f=Vterxmnjackson.databind.type.TypeBindings$TpePaZamStas", true, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1339, (Object) null, propertyMetadata0);
        ViewMatcher viewMatcher0 = new ViewMatcher();
        creatorProperty0._viewMatcher = viewMatcher0;
        Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
        boolean boolean0 = creatorProperty0.visibleInView(class0);
        assertTrue(creatorProperty0.hasValueTypeDeserializer());
    }

    @Test(timeout = 4000)
    public void test2437() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-207), (Object) null, propertyMetadata0);
        ViewMatcher viewMatcher0 = ViewMatcher.construct((Class<?>[]) null);
        creatorProperty0._viewMatcher = viewMatcher0;
        boolean boolean0 = creatorProperty0.hasViews();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2538() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "[p", true, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2021), classNameIdResolver0, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        // Undeclared exception!
        try {
            creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1308, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn("JSON").when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        assertTrue(creatorProperty1.hasValueDeserializer());
    }

    @Test(timeout = 4000)
    public void test2640() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1308, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn("JSON").when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test2641() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1308, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn("JSON").when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
        assertEquals((-1), creatorProperty1.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test2742() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1308, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        doReturn("JSON").when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test2743() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1308, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        doReturn("JSON").when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
        assertEquals((-1), creatorProperty1.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test2844() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, propertyMetadata0, propertyMetadata0);
        // Undeclared exception!
        try {
            creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2945() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1109), propertyMetadata0, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(jsonParser0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.json.ReaderBasedJsonParser.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
        assertEquals((-1), creatorProperty1.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test2946() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1109), propertyMetadata0, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(jsonParser0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.json.ReaderBasedJsonParser.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test2947() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1109), propertyMetadata0, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(jsonParser0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.json.ReaderBasedJsonParser.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
        assertEquals("@JsonUnwrapped", creatorProperty1.getName());
    }

    @Test(timeout = 4000)
    public void test3048() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1308, (Object) null, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class), anyString());
        doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
        CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
        creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
        assertEquals((-1), creatorProperty1.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test3149() throws Throwable {
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("JSON");
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
        try {
            creatorProperty0._throwAsIOE(jsonParser0, mockIllegalArgumentException0, jsonParserSequence0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Problem deserializing property '' (expected type: null; actual type: `com.fasterxml.jackson.core.util.JsonParserSequence`), problem: JSON
            //  at [Source: (String)\"JSON\"; line: 1, column: 0]
        }
    }

    @Test(timeout = 4000)
    public void test3250() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "c18Cd$4saVC", false, (JavaType) null);
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 8, asPropertyTypeDeserializer0, propertyMetadata0);
        MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
        try {
            creatorProperty0._throwAsIOE(mockIllegalArgumentException0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Problem deserializing property '' (expected type: null; actual type: `java.lang.Class`) (no error message provided)
        }
    }
}
