/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 19:34:38 GMT 2023
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.junit.runner.RunWith;

public class StdDateFormatTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(0);
        Date date0 = stdDateFormat0.parseAsISO8601("yQ<KtG;~K3s;Y#<G", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "G$#w++j");
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        Date date0 = stdDateFormat0.parseAsISO8601("G$#w++j", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(1);
        Object object0 = stdDateFormat0.parseObject("7+%3) ", parsePosition0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.CHINESE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition((-56));
        // Undeclared exception!
        try {
            stdDateFormat0.parse(")", parsePosition0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0);
        try {
            stdDateFormat0.parse("?dN*Yo]R,gunY#y9");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Can not parse date \"?dN*Yo]R,gunY#y9\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.UK;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        stdDateFormat0.setCalendar(mockGregorianCalendar0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
        assertSame(stdDateFormat1, stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        boolean boolean0 = stdDateFormat0.looksLikeISO8601("9kPfy");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        MockDate mockDate0 = new MockDate(0L);
        StringBuffer stringBuffer0 = new StringBuffer();
        FieldPosition fieldPosition0 = new FieldPosition((-830));
        stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
        assertEquals("1970-01-01T00:00:00.000+0000", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        MockDate mockDate0 = new MockDate(0L);
        StringBuffer stringBuffer0 = new StringBuffer();
        FieldPosition fieldPosition0 = new FieldPosition((-830));
        stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
        assertEquals(28, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        // Undeclared exception!
        try {
            stdDateFormat0.withLocale((Locale) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null);
        // Undeclared exception!
        try {
            stdDateFormat0.setTimeZone((TimeZone) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "6'fEr[EHkIT]bUj", 40, 0, (-955), 40, 0, 1675, 0, 0, (-2012), (-3948), 1675);
        Locale locale0 = Locale.ROOT;
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
        // Undeclared exception!
        try {
            stdDateFormat0.parseAsRFC1123((String) null, (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(1);
        // Undeclared exception!
        try {
            stdDateFormat0.parseAsISO8601((String) null, parsePosition0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition((-1));
        // Undeclared exception!
        try {
            stdDateFormat0.parse("|<lx_!~.EsJ~", parsePosition0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        // Undeclared exception!
        try {
            stdDateFormat0.parse("");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        // Undeclared exception!
        try {
            stdDateFormat0.parse((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        // Undeclared exception!
        try {
            stdDateFormat0.looksLikeISO8601((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            StdDateFormat.getRFC1123Format(timeZone0, (Locale) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("iezbZMs#F");
        // Undeclared exception!
        try {
            StdDateFormat.getISO8601Format(timeZone0, (Locale) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        MockDate mockDate0 = new MockDate(3817L);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 764);
        // Undeclared exception!
        try {
            stdDateFormat0.instance.format((Date) mockDate0, (StringBuffer) null, fieldPosition0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(1295);
        // Undeclared exception!
        try {
            stdDateFormat0.parse("00", parsePosition0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/fasterxml/jackson/core/io/NumberInput
        }
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.KOREAN;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format(timeZone0, locale0);
        assertEquals("EEE, dd MMM yyyy HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        ParsePosition parsePosition0 = new ParsePosition(1);
        Date date0 = stdDateFormat1.parseAsISO8601("DhK?T+s?$/1", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition((-1225));
        // Undeclared exception!
        try {
            stdDateFormat0.parseAsISO8601("e-YM/d", parsePosition0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(2098);
        Date date0 = stdDateFormat0.parseAsISO8601("80F5rN#ZR:onL0jH", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(1295);
        Date date0 = stdDateFormat0.parseAsISO8601("}np0QLKxX9If--#k", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(1295);
        Date date0 = stdDateFormat0.parseAsISO8601("yyyy-MM-dd", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(1295);
        stdDateFormat0.parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        Date date0 = stdDateFormat0.parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.PRC;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(4);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1._formatPlain = (DateFormat) stdDateFormat0;
        stdDateFormat0.parseAsISO8601(".000", parsePosition0);
        assertSame(stdDateFormat0, stdDateFormat1);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0);
        ParsePosition parsePosition0 = new ParsePosition(1948);
        stdDateFormat0.parseAsISO8601("N>]G$.", parsePosition0);
        Date date0 = stdDateFormat0.parseAsISO8601(":", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.PRC;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(4);
        Date date0 = stdDateFormat0.parseAsISO8601(".000", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(2098);
        Object object0 = stdDateFormat0.parseObject("80F5rN#ZR:onL0jH", parsePosition0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(2098);
        Date date0 = stdDateFormat0.parse("3xq}MLA", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        String string0 = stdDateFormat0.toString();
        assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat (timezone: sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null])(locale: en_US)", string0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        String string0 = stdDateFormat0.toString();
        assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat(locale: en_US)", string0);
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 0, 0, 0);
        DateFormat dateFormat0 = StdDateFormat.getRFC1123Format((TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.PRC;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        stdDateFormat0.instance._formatPlain = dateFormat0;
        Set<String> set0 = Calendar.getAvailableCalendarTypes();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        stdDateFormat0.instance.format(date0);
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getIntegerInstance(locale0);
        decimalFormat0.setPositivePrefix("");
        locale0.getUnicodeLocaleAttributes();
        ParsePosition parsePosition0 = new ParsePosition(0);
        stdDateFormat0.instance.parseAsISO8601("1582-10-15T00:00:00.000+0000", parsePosition0);
        stdDateFormat0.instance.parseObject("1582-10-15T00:00:00.000+0000", parsePosition0);
        stdDateFormat0.parseAsRFC1123("yyyy-MM-dd", parsePosition0);
        stdDateFormat0.setNumberFormat(decimalFormat0);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
        // Undeclared exception!
        try {
            Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0, locale_FilteringMode0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        // Undeclared exception!
        try {
            stdDateFormat0.instance.parse("5");
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/fasterxml/jackson/core/io/NumberInput
        }
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("OZanoQ{Qx@C");
        Locale locale0 = Locale.FRANCE;
        locale0.getScript();
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
        timeZone0.getDisplayName(false, 0);
        StdDateFormat.getISO8601Format(timeZone0, locale0);
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.instance.setTimeZone(timeZone0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
        stdDateFormat1.clone();
        DateFormat dateFormat0 = MockDateFormat.getDateInstance();
        stdDateFormat0.instance._formatISO8601 = dateFormat0;
        ParsePosition parsePosition0 = null;
        // Undeclared exception!
        try {
            stdDateFormat0.parse("OZanoQ{Qx@C", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat2 = stdDateFormat1.withLocale(locale0);
        stdDateFormat2.setTimeZone(timeZone0);
        assertNotSame(stdDateFormat2, stdDateFormat1);
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
        Locale locale0 = Locale.KOREAN;
        StdDateFormat stdDateFormat2 = stdDateFormat1.withLocale(locale0);
        stdDateFormat2.setTimeZone(timeZone0);
        assertNotSame(stdDateFormat1, stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
        assertNotSame(stdDateFormat1, stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getBlueprintISO8601Format();
        assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getISO8601Format(timeZone0);
        assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        DateFormat dateFormat0 = StdDateFormat.getBlueprintRFC1123Format();
        assertTrue(dateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null);
        ParsePosition parsePosition0 = new ParsePosition((-1208));
        // Undeclared exception!
        try {
            stdDateFormat0.instance.parseAsRFC1123("8f/NF_*Rz[rC", parsePosition0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }
}
