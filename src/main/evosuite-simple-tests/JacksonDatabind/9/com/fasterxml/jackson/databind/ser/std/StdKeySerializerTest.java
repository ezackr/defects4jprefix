/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 16:39:27 GMT 2023
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdKeySerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.time.temporal.ChronoField;
import org.junit.runner.RunWith;

public class StdKeySerializerTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        StdKeySerializer stdKeySerializer0 = new StdKeySerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Object object0 = new Object();
        ChronoField chronoField0 = ChronoField.YEAR;
        ArrayType arrayType0 = ArrayType.construct(simpleType0, object0, chronoField0);
        JsonNode jsonNode0 = stdKeySerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) arrayType0);
        assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        StdKeySerializer stdKeySerializer0 = new StdKeySerializer();
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        // Undeclared exception!
        try {
            stdKeySerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        StdKeySerializer stdKeySerializer0 = new StdKeySerializer();
        Object object0 = new Object();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectMapper0, stringWriter0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        stdKeySerializer0.serialize(iOContext0, writerBasedJsonGenerator0, defaultSerializerProvider_Impl0);
        assertNull(iOContext0.getEncoding());
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        StdKeySerializer stdKeySerializer0 = new StdKeySerializer();
        Object object0 = new Object();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectMapper0, stringWriter0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            stdKeySerializer0.serialize(mockDate0, writerBasedJsonGenerator0, defaultSerializerProvider_Impl0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
