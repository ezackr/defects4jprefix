/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:41:18 GMT 2023
 */
package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.junit.runner.RunWith;

public class HypergeometricDistributionTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(568);
        assertEquals(9.678525982176148E-89, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
        assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        double double0 = hypergeometricDistribution0.cumulativeProbability(0, 144);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        double double0 = hypergeometricDistribution0.cumulativeProbability(0, 144);
        assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        double double0 = hypergeometricDistribution0.cumulativeProbability(0, 144);
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        double double0 = hypergeometricDistribution0.cumulativeProbability(0, 144);
        assertEquals(1395, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        double double0 = hypergeometricDistribution0.cumulativeProbability(326);
        assertEquals(2.7617451183816397E-87, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // population size (0)
        }
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Well19937a well19937a0 = new Well19937a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 200, 1, 1);
        double double0 = hypergeometricDistribution0.probability(1);
        assertEquals(0.005000000000000006, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSupportUpperBound();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSupportUpperBound();
        assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSupportUpperBound();
        assertEquals(1395, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        int int0 = hypergeometricDistribution0.getSupportLowerBound();
        assertEquals(326, int0);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
        int int0 = hypergeometricDistribution0.getSampleSize();
        assertEquals(2, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
        int int0 = hypergeometricDistribution0.getSampleSize();
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
        int int0 = hypergeometricDistribution0.getSampleSize();
        assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
    }

    @Test(timeout = 4000)
    public void test0917() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
        int int0 = hypergeometricDistribution0.getSampleSize();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        Well19937c well19937c0 = new Well19937c();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1795, 1795, 0);
        double double0 = hypergeometricDistribution0.getNumericalMean();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        Well19937c well19937c0 = new Well19937c();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1795, 1795, 0);
        double double0 = hypergeometricDistribution0.getNumericalMean();
        assertEquals(1795, hypergeometricDistribution0.getNumberOfSuccesses());
    }

    @Test(timeout = 4000)
    public void test1020() throws Throwable {
        Well19937c well19937c0 = new Well19937c();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1795, 1795, 0);
        double double0 = hypergeometricDistribution0.getNumericalMean();
        assertEquals(1795, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
        int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
        assertEquals(474.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1122() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
        int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
        assertEquals(474, int0);
    }

    @Test(timeout = 4000)
    public void test1223() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        double double0 = hypergeometricDistribution0.calculateNumericalVariance();
        assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test1224() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        double double0 = hypergeometricDistribution0.calculateNumericalVariance();
        assertEquals(1395, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test1225() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        double double0 = hypergeometricDistribution0.calculateNumericalVariance();
        assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
    }

    @Test(timeout = 4000)
    public void test1226() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        double double0 = hypergeometricDistribution0.calculateNumericalVariance();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(807, 807, 1880);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // sample size (1,880) must be less than or equal to population size (807)
        }
    }

    @Test(timeout = 4000)
    public void test1428() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        double double0 = hypergeometricDistribution0.getNumericalVariance();
        assertEquals(47.58413228006463, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1529() throws Throwable {
        MersenneTwister mersenneTwister0 = new MersenneTwister(6722166367014452318L);
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, 0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // population size (0)
        }
    }

    @Test(timeout = 4000)
    public void test1630() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
        double double0 = hypergeometricDistribution0.getNumericalMean();
        assertEquals(474.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1731() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
        int int0 = hypergeometricDistribution0.getPopulationSize();
        assertEquals(474.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1732() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
        int int0 = hypergeometricDistribution0.getPopulationSize();
        assertEquals(474, int0);
    }

    @Test(timeout = 4000)
    public void test1833() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
        assertEquals(1395, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test1834() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1835() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
        assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test1836() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1937() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSupportLowerBound();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1938() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSupportLowerBound();
        assertEquals(1395, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test1939() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSupportLowerBound();
        assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test1940() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSupportLowerBound();
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2041() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSampleSize();
        assertEquals(1395, int0);
    }

    @Test(timeout = 4000)
    public void test2042() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSampleSize();
        assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test2043() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
        int int0 = hypergeometricDistribution0.getSampleSize();
        assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
    }

    @Test(timeout = 4000)
    public void test2144() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        int int0 = hypergeometricDistribution0.getSupportUpperBound();
        assertEquals(446.35752212389383, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2145() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        int int0 = hypergeometricDistribution0.getSupportUpperBound();
        assertEquals(568, int0);
    }

    @Test(timeout = 4000)
    public void test2246() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(458);
        assertEquals(0.0529983853060436, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2347() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2040));
        assertEquals(835, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test2348() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2040));
        assertEquals(835, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test2349() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2040));
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2350() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2040));
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2451() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(835);
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2452() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(835);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2453() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(835);
        assertEquals(835, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test2454() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.upperCumulativeProbability(835);
        assertEquals(835, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test2555() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.probability(835);
        assertEquals(835, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test2556() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.probability(835);
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2557() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.probability(835);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2558() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.probability(835);
        assertEquals(835, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test2659() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.probability((-1892));
        assertEquals(835, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test2660() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.probability((-1892));
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2661() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.probability((-1892));
        assertEquals(835, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test2662() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.probability((-1892));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2763() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.cumulativeProbability((-24));
        assertEquals(835, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test2764() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.cumulativeProbability((-24));
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2765() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.cumulativeProbability((-24));
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2766() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        double double0 = hypergeometricDistribution0.cumulativeProbability((-24));
        assertEquals(835, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test2867() throws Throwable {
        Well1024a well1024a0 = new Well1024a(3952L);
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 30, 30, 1269);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // sample size (1,269) must be less than or equal to population size (30)
        }
    }

    @Test(timeout = 4000)
    public void test2968() throws Throwable {
        Well44497a well44497a0 = new Well44497a(860);
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 739, 860, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // number of successes (860) must be less than or equal to population size (739)
        }
    }

    @Test(timeout = 4000)
    public void test3069() throws Throwable {
        Well512a well512a0 = new Well512a();
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 426, 426, (byte) (-13));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // number of samples (-13)
        }
    }

    @Test(timeout = 4000)
    public void test3170() throws Throwable {
        Well44497b well44497b0 = new Well44497b(178);
        HypergeometricDistribution hypergeometricDistribution0 = null;
        try {
            hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1, (-766), 5976);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // number of successes (-766)
        }
    }

    @Test(timeout = 4000)
    public void test3271() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
        boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3272() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(474, 474, 474);
        boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
        assertEquals(474.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3373() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        hypergeometricDistribution0.sample();
        double double0 = hypergeometricDistribution0.getNumericalVariance();
        assertEquals(835, hypergeometricDistribution0.getSampleSize());
    }

    @Test(timeout = 4000)
    public void test3374() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        hypergeometricDistribution0.sample();
        double double0 = hypergeometricDistribution0.getNumericalVariance();
        assertEquals(835, hypergeometricDistribution0.getPopulationSize());
    }

    @Test(timeout = 4000)
    public void test3375() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        hypergeometricDistribution0.sample();
        double double0 = hypergeometricDistribution0.getNumericalVariance();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3376() throws Throwable {
        Well1024a well1024a0 = new Well1024a();
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 835, 0, 835);
        hypergeometricDistribution0.sample();
        double double0 = hypergeometricDistribution0.getNumericalVariance();
        assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3477() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        double double0 = hypergeometricDistribution0.cumulativeProbability(1130);
        assertEquals(446.35752212389383, hypergeometricDistribution0.getNumericalMean(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3478() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        double double0 = hypergeometricDistribution0.cumulativeProbability(1130);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3579() throws Throwable {
        HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 888, 568);
        double double0 = hypergeometricDistribution0.calculateNumericalVariance();
        assertEquals(47.58413228006463, double0, 0.01);
    }
}
