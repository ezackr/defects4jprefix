/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 05:03:41 GMT 2023
 */
package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.junit.runner.RunWith;

public class AbstractIntegratorTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray1);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        try {
            highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray1, 0.0, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 1 != 0
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        try {
            highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3219.24015011664, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 8 != 10
        }
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-220.8858634), (-220.8858634), doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double double0 = dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-220.8858634), doubleArray0, 0.0, doubleArray0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1203.928542009299, 1203.928542009299, 1203.928542009299, Double.NaN);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        double[] doubleArray0 = new double[6];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
        double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1062.793099660106));
        midpointIntegrator0.setMaxEvaluations(0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        try {
            midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2884.68803), doubleArray0, 0.0, doubleArray0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: maximal count (0) exceeded
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2596.669037036749, 2596.669037036749, 0.78125, 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        // Undeclared exception!
        try {
            highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, (double[]) null, 0.0, (double[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        double[] doubleArray0 = new double[0];
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.384185791015625E-4, (-421.461515), doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        // Undeclared exception!
        try {
            graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-421.461515), doubleArray0, (-1943.57583495), doubleArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
        }
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        double[] doubleArray0 = new double[4];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-1.0), doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        try {
            dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2848.829017));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 0 != 4
        }
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2481.1941896976573, 2481.1941896976573, 2481.1941896976573, 1.0);
        // Undeclared exception!
        try {
            highamHall54Integrator0.integrate((ExpandableStatefulODE) null, 2481.1941896976573);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        double[] doubleArray0 = new double[0];
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        // Undeclared exception!
        try {
            graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
        }
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.setMaxEvaluations(0);
        double[] doubleArray0 = new double[0];
        try {
            gillIntegrator0.computeDerivatives(0, doubleArray0, doubleArray0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: maximal count (0) exceeded
        }
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, 2632.11502318578, 3, 3, 2632.11502318578);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        // Undeclared exception!
        try {
            adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 2632.11502318578);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // matrix must have at least one column
        }
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 0, 505.29965, 4.450312892752409);
        graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        // Undeclared exception!
        try {
            graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) (-1211));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1514() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 0, 505.29965, 4.450312892752409);
        graggBulirschStoerIntegrator0.setMaxEvaluations((-1211));
        assertEquals(5.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1615() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3730.0862259082087), 0.0, doubleArray0, doubleArray0);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
        highamHall54Integrator0.addStepHandler(stepNormalizer0);
        assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
    }

    @Test(timeout = 4000)
    public void test1716() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        gillIntegrator0.addEventHandler(eventHandler0, 0.0, (-450.374), 0, (UnivariateSolver) null);
        assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        gillIntegrator0.addEventHandler(eventHandler0, 0.0, (-450.374), 0, (UnivariateSolver) null);
        assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1.1270175653862835));
        classicalRungeKuttaIntegrator0.clearEventHandlers();
        assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1.1270175653862835));
        classicalRungeKuttaIntegrator0.clearEventHandlers();
        assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        double[] doubleArray0 = new double[0];
        // Undeclared exception!
        try {
            gillIntegrator0.computeDerivatives(0, doubleArray0, doubleArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        double[] doubleArray0 = new double[2];
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1523.4801996885988, 1523.4801996885988, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        try {
            graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1523.4801996885988, doubleArray0, 1523.4801996885988, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // too small integration interval: length = 0
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[6];
        try {
            threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 474.0, doubleArray0, 110.2558, doubleArray1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 6 != 0
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(570.4101323738074, 570.4101323738074, 570.4101323738074, 570.4101323738074, (-1829.963)).when(eventHandler0).g(anyDouble(), any(double[].class));
        gillIntegrator0.addEventHandler(eventHandler0, 570.4101323738074, 570.4101323738074, 1017);
        assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(570.4101323738074, 570.4101323738074, 570.4101323738074, 570.4101323738074, (-1829.963)).when(eventHandler0).g(anyDouble(), any(double[].class));
        gillIntegrator0.addEventHandler(eventHandler0, 570.4101323738074, 570.4101323738074, 1017);
        assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(570.4101323738074, 570.4101323738074, 570.4101323738074, 570.4101323738074, (-1829.963)).when(eventHandler0).g(anyDouble(), any(double[].class));
        gillIntegrator0.addEventHandler(eventHandler0, 570.4101323738074, 570.4101323738074, 1017);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        double double0 = gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 1017, doubleArray0, (-1623.58756927), doubleArray0);
        assertEquals((-1623.58756927), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        double[] doubleArray0 = new double[7];
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-193.6399867), doubleArray0, doubleArray0);
        graggBulirschStoerIntegrator0.setMaxEvaluations(58);
        assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.075);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn("5e~bUB;g").when(eventHandler0).toString();
        eulerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.075, (-7));
        Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
        assertTrue(collection0.contains(eventHandler0));
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.075);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn("5e~bUB;g").when(eventHandler0).toString();
        eulerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.075, (-7));
        Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
        assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.075);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn("5e~bUB;g").when(eventHandler0).toString();
        eulerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.075, (-7));
        Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
        assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getName();
        assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getName();
        assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getStepHandlers();
        assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getStepHandlers();
        assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        double double0 = gillIntegrator0.getCurrentStepStart();
        assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        double double0 = gillIntegrator0.getCurrentStepStart();
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        int int0 = gillIntegrator0.getMaxEvaluations();
        assertEquals(Integer.MAX_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        int int0 = gillIntegrator0.getMaxEvaluations();
        assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2938() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        int int0 = gillIntegrator0.getMaxEvaluations();
        assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3039() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getEvaluations();
        assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3040() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getEvaluations();
        assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3141() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-9.147934308113573), (-9.147934308113573), (-3005.0), (-3005.0));
        double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
        assertEquals(9.147934308113573, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3242() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1062.793099660106));
        midpointIntegrator0.clearStepHandlers();
        assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3243() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1062.793099660106));
        midpointIntegrator0.clearStepHandlers();
        assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
    }
}
