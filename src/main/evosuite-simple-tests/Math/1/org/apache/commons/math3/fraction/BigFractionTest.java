/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:37:01 GMT 2023
 */
package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.junit.runner.RunWith;

public class BigFractionTest {

    @Test(timeout = 4000)
    public void test0480() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-717.224843262248));
        BigFraction bigFraction1 = bigFraction0.pow(1245);
        BigFraction bigFraction2 = bigFraction1.divide(3);
        assertEquals((short) (-3367), bigFraction2.shortValue());
    }

    @Test(timeout = 4000)
    public void test0491() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-858));
        int int0 = bigFraction0.compareTo(bigFraction0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0492() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-858));
        int int0 = bigFraction0.compareTo(bigFraction0);
        assertEquals((byte) (-90), bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test0503() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-608L));
        int int0 = bigFraction0.compareTo(bigFraction1);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0504() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-608L));
        int int0 = bigFraction0.compareTo(bigFraction1);
        assertEquals((short) (-31103), bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test0515() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigDecimal bigDecimal0 = bigFraction0.TWO_QUARTERS.bigDecimalValue(0, 0);
        assertEquals((short) 1, bigDecimal0.shortValue());
    }

    @Test(timeout = 4000)
    public void test0526() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(1239);
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1670, 0);
        assertEquals((byte) (-41), bigDecimal0.byteValue());
    }

    @Test(timeout = 4000)
    public void test0537() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(1);
        assertEquals((short) 0, bigDecimal0.shortValue());
    }

    @Test(timeout = 4000)
    public void test0548() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(2);
        assertEquals((short) 1, bigDecimal0.shortValue());
    }

    @Test(timeout = 4000)
    public void test0559() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE;
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
        assertEquals((short) 1, bigDecimal0.shortValue());
    }

    @Test(timeout = 4000)
    public void test05610() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigDecimal bigDecimal0 = bigFraction0.MINUS_ONE.bigDecimalValue();
        assertEquals((short) (-1), bigDecimal0.shortValue());
    }

    @Test(timeout = 4000)
    public void test05711() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = bigFraction0.multiply((-1));
        BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
        BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
        assertEquals((byte) (-2), bigFraction3.byteValue());
    }

    @Test(timeout = 4000)
    public void test05712() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = bigFraction0.multiply((-1));
        BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
        BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
        assertTrue(bigFraction3.equals((Object) bigFraction1));
    }

    @Test(timeout = 4000)
    public void test05813() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        BigInteger bigInteger0 = BigInteger.ONE;
        BigFraction bigFraction1 = bigFraction0.ONE.add(bigInteger0);
        assertEquals((short) 2, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test05914() throws Throwable {
        BigFraction bigFraction0 = BigFraction.MINUS_ONE;
        byte[] byteArray0 = new byte[3];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
        assertTrue(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test05915() throws Throwable {
        BigFraction bigFraction0 = BigFraction.MINUS_ONE;
        byte[] byteArray0 = new byte[3];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
        assertEquals((byte) (-1), bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test06016() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-692));
        BigFraction bigFraction2 = bigFraction1.add((long) (-692));
        assertEquals((short) (-1383), bigFraction2.shortValue());
    }

    @Test(timeout = 4000)
    public void test06117() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(0);
        assertEquals((short) 0, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test06118() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.add(0);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test06219() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigFraction bigFraction1 = bigFraction0.add(2448);
        assertEquals((short) 2448, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test06320() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract(406);
        BigFraction bigFraction2 = bigFraction1.abs();
        assertEquals((byte) (-107), bigFraction2.byteValue());
    }

    @Test(timeout = 4000)
    public void test06421() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-974L));
        // Undeclared exception!
        try {
            bigFraction0.TWO.pow((BigInteger) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test06522() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        // Undeclared exception!
        try {
            bigFraction0.pow(Integer.MAX_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // BigInteger would overflow supported range
        }
    }

    @Test(timeout = 4000)
    public void test06623() throws Throwable {
        // Undeclared exception!
        try {
            BigFraction.getReducedFraction(3630, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // denominator must be different from 0
        }
    }

    @Test(timeout = 4000)
    public void test06724() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE;
        // Undeclared exception!
        try {
            bigFraction0.ONE_QUARTER.divide(0L);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // denominator must be different from 0
        }
    }

    @Test(timeout = 4000)
    public void test06825() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-467.49498417), 59);
        // Undeclared exception!
        try {
            bigFraction0.compareTo((BigFraction) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test06926() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE;
        // Undeclared exception!
        try {
            bigFraction0.bigDecimalValue((-719), 1043);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid rounding mode
        }
    }

    @Test(timeout = 4000)
    public void test07027() throws Throwable {
        BigFraction bigFraction0 = BigFraction.MINUS_ONE;
        // Undeclared exception!
        try {
            bigFraction0.ONE_THIRD.bigDecimalValue();
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Non-terminating decimal expansion; no exact representable decimal result.
        }
    }

    @Test(timeout = 4000)
    public void test07128() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        try {
            bigFraction0.add((BigInteger) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // null is not allowed
        }
    }

    @Test(timeout = 4000)
    public void test07229() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction((BigInteger) null, (BigInteger) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // numerator
        }
    }

    @Test(timeout = 4000)
    public void test07330() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction((BigInteger) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // numerator
        }
    }

    @Test(timeout = 4000)
    public void test07431() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction(0L, 0L);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // denominator must be different from 0
        }
    }

    @Test(timeout = 4000)
    public void test07532() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction(0.0, (-1));
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
        }
    }

    @Test(timeout = 4000)
    public void test07633() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE;
        BigInteger bigInteger0 = BigInteger.ONE;
        BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
        BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
        assertFalse(bigFraction2.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test07634() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE;
        BigInteger bigInteger0 = BigInteger.ONE;
        BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
        BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
        assertTrue(bigFraction2.equals((Object) bigFraction1));
    }

    @Test(timeout = 4000)
    public void test07735() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
        BigInteger bigInteger0 = BigInteger.TEN;
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(bigInteger0);
        assertEquals((short) 2, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test07836() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
        boolean boolean0 = bigFraction0.equals(bigFraction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07937() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        double double0 = bigFraction0.doubleValue();
        assertEquals(0.2, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08038() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
        BigInteger bigInteger0 = BigInteger.ZERO;
        // Undeclared exception!
        try {
            bigFraction0.TWO_QUARTERS.divide(bigInteger0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // denominator must be different from 0
        }
    }

    @Test(timeout = 4000)
    public void test08139() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        BigInteger bigInteger0 = BigInteger.ONE;
        BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
        assertEquals((byte) 0, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test08140() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        BigInteger bigInteger0 = BigInteger.ONE;
        BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
        assertTrue(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test08241() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) (-116);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        assertEquals((byte) 1, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test08342() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        assertEquals((byte) 1, bigFraction0.byteValue());
    }

    @Test(timeout = 4000)
    public void test08443() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // denominator must be different from 0
        }
    }

    @Test(timeout = 4000)
    public void test08544() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-858));
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reduce();
        assertEquals((short) (-858), bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test08545() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-858));
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.reduce();
        assertEquals((byte) 0, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test08646() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
        String string0 = bigFraction1.toString();
        assertEquals("4 / 5", string0);
    }

    @Test(timeout = 4000)
    public void test08747() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
        BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
        assertFalse(bigFraction2.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test08748() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
        BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
        assertFalse(bigFraction2.equals((Object) bigFraction1));
    }

    @Test(timeout = 4000)
    public void test08749() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.add(bigInteger0);
        BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
        assertEquals((byte) 0, bigFraction2.byteValue());
    }

    @Test(timeout = 4000)
    public void test08850() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(1075);
        // Undeclared exception!
        try {
            bigFraction0.subtract((BigFraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
        }
    }

    @Test(timeout = 4000)
    public void test08951() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigFraction bigFraction1 = bigFraction0.ONE.subtract(bigFraction0);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test09052() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigFraction bigFraction0 = new BigFraction(bigInteger0);
        // Undeclared exception!
        try {
            bigFraction0.subtract((BigInteger) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // null is not allowed
        }
    }

    @Test(timeout = 4000)
    public void test09153() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) (-1);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
        assertEquals((byte) 0, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test09154() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) (-1);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test09255() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-608L));
        BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
        assertFalse(bigFraction2.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test09256() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.pow((-608L));
        BigFraction bigFraction2 = bigFraction1.ONE.subtract(bigFraction1);
        assertEquals((short) 31104, bigFraction2.shortValue());
    }

    @Test(timeout = 4000)
    public void test09357() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigFraction bigFraction0 = new BigFraction(bigInteger0);
        BigFraction bigFraction1 = bigFraction0.pow(0L);
        assertEquals((short) 1, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test09458() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigFraction bigFraction1 = bigFraction0.TWO.multiply(bigFraction0);
        assertSame(bigFraction1, bigFraction0);
    }

    @Test(timeout = 4000)
    public void test09559() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        float float0 = bigFraction0.floatValue();
        assertEquals(0.8F, float0, 0.01F);
    }

    @Test(timeout = 4000)
    public void test09660() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = BigFraction.ONE_HALF;
        BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
        boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
        assertFalse(bigFraction2.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test09661() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = BigFraction.ONE_HALF;
        BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
        boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
        assertFalse(bigFraction0.equals((Object) bigFraction2));
    }

    @Test(timeout = 4000)
    public void test09662() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = BigFraction.ONE_HALF;
        BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
        boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09663() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = BigFraction.ONE_HALF;
        BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
        boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
        assertFalse(bigFraction2.equals((Object) bigFraction1));
    }

    @Test(timeout = 4000)
    public void test09664() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = BigFraction.ONE_HALF;
        BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
        boolean boolean0 = bigFraction1.TWO_QUARTERS.equals(bigFraction2);
        assertEquals((short) 1, bigFraction2.shortValue());
    }

    @Test(timeout = 4000)
    public void test09765() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        Object object0 = new Object();
        boolean boolean0 = bigFraction0.equals(object0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09866() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_HALF;
        // Undeclared exception!
        try {
            bigFraction0.TWO_THIRDS.divide((BigFraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
        }
    }

    @Test(timeout = 4000)
    public void test09967() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
        // Undeclared exception!
        try {
            bigFraction0.divide(0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // denominator must be different from 0
        }
    }

    @Test(timeout = 4000)
    public void test10068() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        // Undeclared exception!
        try {
            bigFraction0.divide((BigInteger) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
        }
    }

    @Test(timeout = 4000)
    public void test10169() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.add((-692));
        BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
        assertEquals((byte) 78, bigFraction2.byteValue());
    }

    @Test(timeout = 4000)
    public void test10270() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        BigFraction bigFraction1 = new BigFraction(0.8F, 2322.37, 1);
        BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
        assertFalse(bigFraction2.equals((Object) bigFraction1));
    }

    @Test(timeout = 4000)
    public void test10271() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        BigFraction bigFraction1 = new BigFraction(0.8F, 2322.37, 1);
        BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
        assertSame(bigFraction2, bigFraction0);
    }

    @Test(timeout = 4000)
    public void test10372() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
        // Undeclared exception!
        try {
            bigFraction0.FOUR_FIFTHS.add((BigFraction) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fraction
        }
    }

    @Test(timeout = 4000)
    public void test10473() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test10474() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
        assertEquals((byte) 1, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test10575() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.abs();
        assertNotSame(bigFraction1, bigFraction0);
    }

    @Test(timeout = 4000)
    public void test10676() throws Throwable {
        BigFraction bigFraction0 = BigFraction.getReducedFraction(0, 0);
        // Undeclared exception!
        try {
            bigFraction0.divide(bigFraction0);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // denominator must be different from 0
        }
    }

    @Test(timeout = 4000)
    public void test10777() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(2421.19, 629);
        assertEquals((short) 2421, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test10878() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction(0.028507909084964922, 0.028507909084964922, (-1846));
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Unable to convert 0.029 to fraction after -1,846 iterations
        }
    }

    @Test(timeout = 4000)
    public void test10979() throws Throwable {
        BigFraction bigFraction0 = null;
        try {
            bigFraction0 = new BigFraction(1.7976931348623157E308, 1.7976931348623157E308, 382);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
        }
    }

    @Test(timeout = 4000)
    public void test11080() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((double) (-692));
        String string0 = bigFraction0.toString();
        assertEquals("-692", string0);
    }

    @Test(timeout = 4000)
    public void test11081() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((double) (-692));
        String string0 = bigFraction0.toString();
        assertEquals((short) (-692), bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test11182() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-717.224843262248));
        // Undeclared exception!
        try {
            bigFraction0.multiply((BigInteger) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // null is not allowed
        }
    }

    @Test(timeout = 4000)
    public void test11283() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(0.0);
        int int0 = bigFraction0.getDenominatorAsInt();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test11384() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(1362.6);
        BigFraction bigFraction1 = bigFraction0.ZERO.divide(bigFraction0);
        assertEquals((byte) 0, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test11385() throws Throwable {
        BigFraction bigFraction0 = new BigFraction(1362.6);
        BigFraction bigFraction1 = bigFraction0.ZERO.divide(bigFraction0);
        assertEquals((short) 1362, bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test11486() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
        BigFraction bigFraction1 = bigFraction0.multiply((long) 0);
        // Undeclared exception!
        try {
            bigFraction1.reciprocal();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // denominator must be different from 0
        }
    }

    @Test(timeout = 4000)
    public void test11587() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        double double0 = bigFraction0.ONE_QUARTER.pow((-1.0));
        assertEquals(4.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test11688() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        long long0 = bigFraction0.getNumeratorAsLong();
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test11789() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        boolean boolean0 = bigFraction0.TWO_QUARTERS.equals(bigFraction0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test11890() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-1192L), (-3512299194304650054L));
        BigFraction bigFraction1 = bigFraction0.multiply((-270L));
        int int0 = bigFraction1.getDenominatorAsInt();
        assertEquals((-1404234933), int0);
    }

    @Test(timeout = 4000)
    public void test11991() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        int int0 = bigFraction0.getDenominatorAsInt();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test12092() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        // Undeclared exception!
        try {
            bigFraction0.bigDecimalValue(69);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid rounding mode
        }
    }

    @Test(timeout = 4000)
    public void test12193() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
        BigDecimal bigDecimal0 = bigFraction0.ONE_FIFTH.bigDecimalValue(1770, 0);
        assertEquals((byte) 0, bigDecimal0.byteValue());
    }

    @Test(timeout = 4000)
    public void test12294() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(2);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test12295() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(2);
        assertEquals((byte) 0, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test12396() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        long long0 = bigFraction0.longValue();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test12497() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigInteger bigInteger0 = BigInteger.TEN;
        BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
        BigFraction bigFraction2 = bigFraction1.abs();
        assertEquals((byte) 10, bigFraction2.byteValue());
    }

    @Test(timeout = 4000)
    public void test12598() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = bigFraction0.subtract(2);
        assertEquals((byte) 0, bigFraction1.byteValue());
    }

    @Test(timeout = 4000)
    public void test12599() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO;
        BigFraction bigFraction1 = bigFraction0.subtract(2);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test127100() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        long long0 = bigFraction0.ONE.getDenominatorAsLong();
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test128101() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        double double0 = bigFraction0.percentageValue();
        assertEquals(20.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test129102() throws Throwable {
        BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
        BigFraction bigFraction1 = bigFraction0.reduce();
        assertTrue(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test129103() throws Throwable {
        BigFraction bigFraction0 = BigFraction.getReducedFraction(1, 1);
        BigFraction bigFraction1 = bigFraction0.reduce();
        assertEquals((short) 1, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test130104() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
        assertEquals((short) 0, bigDecimal0.shortValue());
    }

    @Test(timeout = 4000)
    public void test131105() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigFraction bigFraction1 = bigFraction0.add(4503599627370496L);
        assertEquals((short) 0, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test131106() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigFraction bigFraction1 = bigFraction0.add(4503599627370496L);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test132107() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        int int0 = bigFraction0.THREE_QUARTERS.compareTo(bigFraction0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test133108() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-974L));
        BigFraction bigFraction1 = bigFraction0.subtract((-974L));
        assertEquals((short) (-974), bigFraction0.shortValue());
    }

    @Test(timeout = 4000)
    public void test133109() throws Throwable {
        BigFraction bigFraction0 = new BigFraction((-974L));
        BigFraction bigFraction1 = bigFraction0.subtract((-974L));
        assertEquals((short) 0, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test134110() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(1951);
        assertFalse(bigFraction1.equals((Object) bigFraction0));
    }

    @Test(timeout = 4000)
    public void test134111() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
        BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(1951);
        assertEquals((short) 0, bigFraction1.shortValue());
    }

    @Test(timeout = 4000)
    public void test135112() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        int int0 = bigFraction0.ONE.getNumeratorAsInt();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test136113() throws Throwable {
        BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
        BigFractionField bigFractionField0 = bigFraction0.ONE_FIFTH.getField();
        assertNotNull(bigFractionField0);
    }

    @Test(timeout = 4000)
    public void test137114() throws Throwable {
        BigFraction bigFraction0 = BigFraction.ZERO;
        BigInteger bigInteger0 = bigFraction0.getNumerator();
        assertEquals((short) 0, bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test138115() throws Throwable {
        BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
        int int0 = bigFraction0.ONE_FIFTH.intValue();
        assertEquals(0, int0);
    }
}
