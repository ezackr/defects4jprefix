/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 06:13:16 GMT 2023
 */
package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RectangularCholeskyDecomposition;
import org.junit.runner.RunWith;

public class RectangularCholeskyDecompositionTest {

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
        try {
            rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) null, 2028.36210992623);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        double[] doubleArray0 = new double[4];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
        try {
            rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(array2DRowRealMatrix0, (-2040.65));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        double[][] doubleArray0 = new double[2][1];
        double[] doubleArray1 = new double[18];
        doubleArray1[1] = 1183.0008;
        doubleArray0[0] = doubleArray1;
        doubleArray0[1] = doubleArray1;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
        try {
            rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(array2DRowRealMatrix0, 2);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // -1,183.001 is smaller than, or equal to, the minimum (2): not positive definite matrix: value -1,183.001 at index 1
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(31, 31);
        RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
        try {
            rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(openMapRealMatrix0, 31);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 0 is smaller than, or equal to, the minimum (31): not positive definite matrix: value 0 at index 0
        }
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        double[] doubleArray0 = new double[3];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 0.0);
        RealMatrix realMatrix1 = rectangularCholeskyDecomposition0.getRootMatrix();
        assertEquals(3, realMatrix1.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        double[][] doubleArray0 = new double[2][1];
        double[] doubleArray1 = new double[18];
        doubleArray1[1] = 1183.0008;
        doubleArray0[0] = doubleArray1;
        doubleArray0[1] = doubleArray1;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(array2DRowRealMatrix0, 1183.0008);
        int int0 = rectangularCholeskyDecomposition0.getRank();
        assertEquals(2, int0);
    }
}
