/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 14:44:23 GMT 2023
 */
package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.ode.ExpandableStatefulODE;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.junit.runner.RunWith;

public class EmbeddedRungeKuttaIntegratorTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        assertEquals(0.9, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        assertEquals(0.2, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
        assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        assertEquals(10.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(559.5, 559.5, 559.5, 0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1306.7655606344235, (-2471.2328452794), doubleArray0, doubleArray0);
        // Undeclared exception!
        try {
            dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, 1306.7655606344235);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        double[] doubleArray0 = new double[4];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-802.2175), doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        try {
            dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-802.2175));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 0 != 4
        }
    }
}
