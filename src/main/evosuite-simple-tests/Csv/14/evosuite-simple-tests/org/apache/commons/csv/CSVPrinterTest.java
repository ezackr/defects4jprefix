/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:45:46 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.junit.runner.RunWith;

public class CSVPrinterTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        char[] charArray0 = new char[5];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        charBuffer0.flip();
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.println();
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("format");
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
        Object[] objectArray0 = new Object[2];
        objectArray0[1] = (Object) cSVFormat2;
        objectArray0[1] = (Object) cSVFormat3;
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
        CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "", 0, 0);
        CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter2);
        cSVPrinter0.close();
        cSVPrinter0.println();
        cSVPrinter0.getOut();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        doReturn(true, false).when(resultSet0).next();
        cSVPrinter0.printRecords(resultSet0);
        assertEquals(4, charArrayWriter2.size());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
        Object[] objectArray0 = new Object[2];
        objectArray0[1] = (Object) cSVFormat2;
        objectArray0[1] = (Object) cSVFormat3;
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
        CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "", 0, 0);
        CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter2);
        cSVPrinter0.close();
        cSVPrinter0.println();
        cSVPrinter0.getOut();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        doReturn(true, false).when(resultSet0).next();
        cSVPrinter0.printRecords(resultSet0);
        assertEquals("\r\n\r\n", charArrayWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(35);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords(resultSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(44);
        DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords((Iterable<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        char[] charArray0 = new char[0];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[6];
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord(objectArray0);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        char[] charArray0 = new char[0];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        Object[] objectArray0 = new Object[6];
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord(objectArray0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        StringWriter stringWriter0 = new StringWriter(2765);
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        PipedWriter pipedWriter0 = new PipedWriter();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[1];
        try {
            cSVPrinter0.printRecord(objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Iterable<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        char[] charArray0 = new char[5];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(',');
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        // Undeclared exception!
        try {
            cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        char[] charArray0 = new char[9];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.print((Object) null);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        PipedWriter pipedWriter0 = new PipedWriter();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
        SQLWarning sQLWarning0 = new SQLWarning("Unexpected Quote value: ", "out");
        try {
            cSVPrinter0.print(sQLWarning0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        char[] charArray0 = new char[0];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVPrinter cSVPrinter0 = null;
        try {
            cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = null;
        try {
            cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'out' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("format");
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
        ArrayDeque<SQLTransientException> arrayDeque0 = new ArrayDeque<SQLTransientException>();
        SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Vct(=6", "FgL,a-=PMJ~XD'tM!v", 9);
        arrayDeque0.add(sQLTimeoutException0);
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
        assertFalse(arrayDeque0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1817() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
        cSVPrinter0.print((Object) null);
        assertEquals("\"\"", charArrayWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
        cSVPrinter0.print((Object) null);
        assertEquals(2, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2019() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter", "org.apache.commons.csv.CSVPrinter");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 1237);
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
        PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
        Object[] objectArray0 = new Object[8];
        objectArray0[1] = (Object) priorityQueue0;
        cSVPrinter0.printRecords(objectArray0);
        assertEquals(8, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test2120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
        LinkedHashSet<BufferedWriter> linkedHashSet0 = new LinkedHashSet<BufferedWriter>();
        BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
        linkedHashSet0.add(bufferedWriter0);
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        assertEquals(35, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2221() throws Throwable {
        MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ", true);
        CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
        SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
        cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException0);
        assertNull(sQLClientInfoException0.getMessage());
    }

    @Test(timeout = 4000)
    public void test2422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('p');
        Object[] objectArray0 = new Object[2];
        objectArray0[1] = (Object) cSVFormat0;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        assertEquals(50, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2523() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("i`^L\"VgkoC");
        Object[] objectArray0 = new Object[2];
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        assertEquals(30, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2524() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("i`^L\"VgkoC");
        Object[] objectArray0 = new Object[2];
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        assertEquals("\"i`^L\"\"VgkoC\"\r\n\"i`^L\"\"VgkoC\"\r\n", charArrayWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2625() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("{`^L\"VgkoC");
        Object[] objectArray0 = new Object[2];
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        assertEquals(30, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("{`^L\"VgkoC");
        Object[] objectArray0 = new Object[2];
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        assertEquals("\"{`^L\"\"VgkoC\"\r\n\"{`^L\"\"VgkoC\"\r\n", charArrayWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("`^L\"Vgk");
        Object[] objectArray0 = new Object[2];
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        assertEquals("\"`^L\"\"Vgk\"\r\n\"`^L\"\"Vgk\"\r\n", charArrayWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("`^L\"Vgk");
        Object[] objectArray0 = new Object[2];
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecords(objectArray0);
        assertEquals(24, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("2");
        Object[] objectArray0 = new Object[2];
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        assertEquals(5, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("2");
        Object[] objectArray0 = new Object[2];
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        assertEquals("2,2\r\n", charArrayWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        StringWriter stringWriter0 = new StringWriter(2765);
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[7];
        cSVPrinter0.printRecord(objectArray0);
        assertEquals("\"\"\t\t\t\t\t\t\r\n", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat1.format(objectArray0);
        assertEquals("\"\",\"\"", string0);
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        StringWriter stringWriter0 = new StringWriter(110);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('W');
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('t');
        CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) character0;
        cSVPrinter0.printRecords(objectArray0);
        assertEquals(3, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        char[] charArray0 = new char[5];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        Object[] objectArray0 = new Object[7];
        objectArray0[6] = (Object) 'h';
        objectArray0[1] = objectArray0[6];
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords(objectArray0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
        PipedWriter pipedWriter0 = new PipedWriter();
        CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
        Object[] objectArray0 = new Object[7];
        try {
            cSVPrinter0.printRecords(objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
        }
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$");
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        assertEquals(7, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$");
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
        cSVPrinter0.printRecord(objectArray0);
        assertEquals("\"$\",$\r\n", charArrayWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test3938() throws Throwable {
        char[] charArray0 = new char[0];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVPrinter cSVPrinter0 = null;
        try {
            cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
