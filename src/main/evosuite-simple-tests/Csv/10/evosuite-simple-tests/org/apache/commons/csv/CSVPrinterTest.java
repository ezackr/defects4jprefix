/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:37:54 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.TreeSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.junit.runner.RunWith;

public class CSVPrinterTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        char[] charArray0 = new char[1];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) stringWriter0;
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords(objectArray0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        MockPrintStream mockPrintStream0 = new MockPrintStream("n;~5OBK");
        CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords(resultSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M%+A%RMx~,Ds");
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords((Iterable<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "$zqx9U");
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Object[]) stringArray0);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CharBuffer charBuffer0 = CharBuffer.allocate(92);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) quote0;
        cSVPrinter0.printRecord(objectArray0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord(objectArray0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        File file0 = MockFile.createTempFile("85_Mk*z_<5u@U.", "SG:XR/<SRLL \"jQ`ocy");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        MockFile mockFile0 = new MockFile("zE./+#%`y\"J");
        MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[0];
        cSVPrinter0.close();
        try {
            cSVPrinter0.printRecord(objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        char[] charArray0 = new char[2];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
        LinkedList<StringWriter> linkedList0 = new LinkedList<StringWriter>();
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Iterable<?>) linkedList0);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuffer0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Iterable<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
        // Undeclared exception!
        try {
            cSVPrinter0.print(cSVFormat0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M%+A%RMx~,Ds");
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
        cSVPrinter0.close();
        try {
            cSVPrinter0.print((Object) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M%+A%RMx~,Ds");
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
        cSVPrinter0.close();
        try {
            cSVPrinter0.flush();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("M%+A%RMx~,Ds");
        FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M%+A%RMx~,Ds");
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
        try {
            cSVPrinter0.close();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Simulated IOException
        }
    }

    @Test(timeout = 4000)
    public void test1514() throws Throwable {
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
        CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVPrinter cSVPrinter0 = null;
        try {
            cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start character and the delimiter cannot be the same ('c')
        }
    }

    @Test(timeout = 4000)
    public void test2615() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('R');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('m');
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(0);
        linkedHashSet0.add((SQLTransientException) null);
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        assertEquals("", charArrayWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test2616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('R');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('m');
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(0);
        linkedHashSet0.add((SQLTransientException) null);
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        assertEquals(0, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2717() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('R');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('m');
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
        LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(0);
        SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
        SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLInvalidAuthorizationSpecException0);
        linkedHashSet0.add(sQLTimeoutException0);
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        assertEquals(97, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test3218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = null;
        try {
            cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'out' must not be null!
        }
    }
}
