/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 17:12:21 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTimeoutException;
import java.util.ArrayList;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.junit.runner.RunWith;

public class CSVPrinterTest {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(30);
        CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
        CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
        Object[] objectArray0 = new Object[3];
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords(objectArray0);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M%+A%RMx~,Ds");
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
        cSVPrinter0.close();
        Object[] objectArray0 = new Object[2];
        try {
            cSVPrinter0.printRecords(objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "$zqx9U");
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords((ResultSet) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1754);
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords((Iterable<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CharBuffer charBuffer0 = CharBuffer.allocate(92);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) quote0;
        cSVPrinter0.printRecord(objectArray0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord(objectArray0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
        File file0 = MockFile.createTempFile("85_Mk*z_<5u@U.", "SG:XR/<SRLL \"jQ`ocy");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        MockFile mockFile0 = new MockFile("zE./+#%`y\"J");
        MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[0];
        cSVPrinter0.close();
        try {
            cSVPrinter0.printRecord(objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        StringWriter stringWriter0 = new StringWriter(1295);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Iterable<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1754);
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('+');
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
        // Undeclared exception!
        try {
            cSVPrinter0.printComment((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
        // Undeclared exception!
        try {
            cSVPrinter0.print(cSVFormat0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M%+A%RMx~,Ds");
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
        outputStreamWriter0.close();
        CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
        try {
            cSVPrinter0.flush();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1412() throws Throwable {
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
        CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
        CSVPrinter cSVPrinter0 = null;
        try {
            cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start character and the delimiter cannot be the same ('c')
        }
    }

    @Test(timeout = 4000)
    public void test1613() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        StringWriter stringWriter0 = new StringWriter(0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
        cSVPrinter0.println();
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test1714() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Charset charset0 = Charset.defaultCharset();
        ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(90);
        CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
        cSVPrinter0.print((Object) null);
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test1715() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Charset charset0 = Charset.defaultCharset();
        ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(90);
        CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
        cSVPrinter0.print((Object) null);
        assertEquals(88, charBuffer0.remaining());
    }

    @Test(timeout = 4000)
    public void test1916() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
        File file0 = MockFile.createTempFile("Unexpected Quote value: ", "");
        MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
        cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
        assertNull(sQLIntegrityConstraintViolationException0.getMessage());
    }

    @Test(timeout = 4000)
    public void test2017() throws Throwable {
        MockFile mockFile0 = new MockFile("ALL");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
        ArrayList<PipedOutputStream> arrayList0 = new ArrayList<PipedOutputStream>();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        arrayList0.add(pipedOutputStream0);
        cSVPrinter0.printRecords((Iterable<?>) arrayList0);
        assertFalse(arrayList0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";eI]{*%n");
        CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
        SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("aq");
        cSVPrinter0.printRecord((Iterable<?>) sQLTimeoutException0);
        assertNull(sQLTimeoutException0.getSQLState());
    }

    @Test(timeout = 4000)
    public void test2219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('H');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        CSVPrinter cSVPrinter0 = cSVFormat2.print(stringBuffer0);
        cSVPrinter0.print(cSVFormat0);
        cSVPrinter0.printComment("cg'");
        assertEquals(52, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test2420() throws Throwable {
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/3kPo[q{N7q&");
        CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('\\');
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        cSVPrinter0.printRecords(objectArray0);
        assertEquals(1, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test2521() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('@');
        CharBuffer charBuffer0 = CharBuffer.allocate(101);
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
        cSVPrinter0.print(cSVFormat1);
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) cSVFormat0;
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords(objectArray0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "$zqx9U");
        CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
        // Undeclared exception!
        try {
            cSVPrinter0.print(cSVFormat0);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2723() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1754);
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        cSVPrinter0.printRecords(objectArray0);
        assertEquals(3, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test2824() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        Object[] objectArray0 = new Object[5];
        objectArray0[0] = (Object) cSVFormat0;
        String string0 = cSVFormat0.format(objectArray0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1", false);
        CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
        Appendable appendable0 = cSVPrinter0.getOut();
        assertSame(mockFileWriter0, appendable0);
    }

    @Test(timeout = 4000)
    public void test3326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVPrinter cSVPrinter0 = null;
        try {
            cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'out' must not be null!
        }
    }
}
