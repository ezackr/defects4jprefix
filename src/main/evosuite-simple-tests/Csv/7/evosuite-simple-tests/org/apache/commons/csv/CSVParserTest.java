/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:30:39 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.junit.runner.RunWith;

public class CSVParserTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(')');
        CSVParser cSVParser0 = CSVParser.parse(") invalid parse sequence", cSVFormat1);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            cSVParser0.forEach(consumer0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: (startline 1) EOF reached before encapsulated token finished
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
        NetworkHandling.createRemoteTextFile(evoSuiteURL0, "9lor");
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "invalid";
        stringArray0[1] = "";
        stringArray0[2] = "< oSK>0hm";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("url");
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "invalid";
        stringArray0[1] = "";
        stringArray0[2] = "< oSK>0hm";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("url");
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        assertEquals("[url]", cSVRecord0.toString());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("4TU}Y, G", cSVFormat0);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        assertEquals("[4TU}Y,  G]", cSVRecord0.toString());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("6l'ZbrAb(756");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse(";97;ZK9g9W%|~dI.B", cSVFormat0);
        cSVParser0.close();
        boolean boolean0 = cSVParser0.isClosed();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse(";97;ZK9g9W%|~dI.B", cSVFormat0);
        LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
        LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
        assertSame(linkedList1, linkedList0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("hoQeV`3:sq_L}CZ!]\"$", cSVFormat0);
        cSVParser0.getRecords();
        long long0 = cSVParser0.getRecordNumber();
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        StringReader stringReader0 = new StringReader("");
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        assertTrue(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        StringReader stringReader0 = new StringReader("org.apache.commons.csv.Lexer");
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        cSVParser0.nextRecord();
        long long0 = cSVParser0.getCurrentLineNumber();
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        File file0 = MockFile.createTempFile("c9\nYt$6%kn.", "");
        URL uRL0 = file0.toURL();
        Charset charset0 = Charset.defaultCharset();
        // Undeclared exception!
        try {
            CSVParser.parse(uRL0, charset0, cSVFormat0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('2');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('2');
        EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
        NetworkHandling.createRemoteTextFile(evoSuiteURL0, "BZwB^<hIXtA:D)K<|Z");
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        // Undeclared exception!
        try {
            CSVParser.parse(uRL0, charset0, cSVFormat1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The escape character and the delimiter cannot be the same ('2')
        }
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        // Undeclared exception!
        try {
            CSVParser.parse((URL) null, charset0, cSVFormat0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'url' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Character character0 = Character.valueOf('f');
        Quote quote0 = Quote.MINIMAL;
        String[] stringArray0 = new String[4];
        CSVFormat cSVFormat0 = new CSVFormat('d', character0, quote0, character0, character0, false, true, "C;Sb^XM}1e(abVox2Zo", (String) null, stringArray0, false);
        // Undeclared exception!
        try {
            CSVParser.parse("C;Sb^XM}1e(abVox2Zo", cSVFormat0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('f')
        }
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        // Undeclared exception!
        try {
            CSVParser.parse("Q$OInPz[|:#B#1.dwn", (CSVFormat) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'format' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        try {
            CSVParser.parse("\"", cSVFormat1);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // (startline 1) EOF reached before encapsulated token finished
        }
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        File file0 = MockFile.createTempFile("+'9,vz!Fg?*B'", "50na=");
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('T');
        // Undeclared exception!
        try {
            CSVParser.parse(file0, cSVFormat1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start character and the delimiter cannot be the same ('T')
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        // Undeclared exception!
        try {
            CSVParser.parse((File) null, cSVFormat0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'file' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        try {
            CSVParser.parse((File) mockFile0, cSVFormat0);
            fail("Expecting exception: FileNotFoundException");
        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse(";97;ZK9g9W%|~dI.B", cSVFormat0);
        cSVParser0.close();
        try {
            cSVParser0.nextRecord();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream closed
        }
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        StringReader stringReader0 = new StringReader("y-{X6Dc9-Z -");
        stringReader0.close();
        CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
        CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
        try {
            cSVParser0.getRecords(linkedList0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream closed
        }
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        StringReader stringReader0 = new StringReader("5_`>{");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.close();
        try {
            cSVParser0.getRecords();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream closed
        }
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        File file0 = MockFile.createTempFile("+'9,vz!Fg?*B'", "NG6gK?U&LJRv:owc");
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        FileSystemHandling.shouldAllThrowIOExceptions();
        CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
        try {
            cSVParser0.close();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Simulated IOException
        }
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        StringReader stringReader0 = new StringReader("NONE");
        Character character0 = new Character('F');
        Quote quote0 = Quote.ALL;
        String[] stringArray0 = new String[5];
        CSVFormat cSVFormat0 = new CSVFormat('F', character0, quote0, character0, character0, true, true, "", "0M_E/RG9tfSu&DE.l9", stringArray0, false);
        CSVParser cSVParser0 = null;
        try {
            cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The quoteChar character and the delimiter cannot be the same ('F')
        }
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        StringReader stringReader0 = new StringReader("");
        CSVParser cSVParser0 = null;
        try {
            cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'format' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("CbX0>ls{(uW\"U(3Kh", cSVFormat0);
        // Undeclared exception!
        try {
            cSVParser0.getRecords((LinkedList<CSVRecord>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        Collection<CSVRecord> collection0 = cSVParser0.getRecords((Collection<CSVRecord>) null);
        assertNull(collection0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        StringReader stringReader0 = new StringReader("string");
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        boolean boolean0 = cSVParser0.isClosed();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
        CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.Lexer", cSVFormat1);
        List<CSVRecord> list0 = cSVParser0.getRecords();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("c9\nYt$6%kn.", cSVFormat0);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        assertEquals(2L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse(")invalid parse sequence", cSVFormat0);
        cSVParser0.close();
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        StringReader stringReader0 = new StringReader("5_`>{");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        assertNull(map0);
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        Quote quote0 = Quote.ALL;
        Character character0 = Character.valueOf('\u0084');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = new CSVFormat('+', (Character) null, quote0, character0, (Character) null, true, true, "Djm", "EMl", stringArray0, true);
        CSVParser cSVParser0 = CSVParser.parse("Djm", cSVFormat0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        assertNotNull(map0);
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        Quote quote0 = Quote.ALL;
        Character character0 = Character.valueOf('\u0084');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = new CSVFormat('+', (Character) null, quote0, character0, (Character) null, true, true, "Djm", "EMl", stringArray0, true);
        CSVParser cSVParser0 = CSVParser.parse("Djm", cSVFormat0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        assertEquals(1L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        Quote quote0 = Quote.ALL;
        Character character0 = Character.valueOf('\u0084');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = new CSVFormat('+', (Character) null, quote0, character0, (Character) null, true, true, "Djm", "EMl", stringArray0, true);
        CSVParser cSVParser0 = CSVParser.parse("Djm", cSVFormat0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        assertEquals(1, map0.size());
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        Character character0 = Character.valueOf('u');
        Quote quote0 = Quote.MINIMAL;
        Character character1 = new Character('D');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat0 = new CSVFormat('V', character0, quote0, character1, character0, false, false, "c<hDbdi", "c<hDbdi", stringArray0, false);
        StringReader stringReader0 = new StringReader("c<hDbdi");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.close();
        assertEquals(1L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("c9\nYt$6%kn.", cSVFormat0);
        long long0 = cSVParser0.getRecordNumber();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        Quote quote0 = Quote.ALL;
        Character character0 = Character.valueOf('\u0084');
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat0 = new CSVFormat('+', (Character) null, quote0, character0, (Character) null, true, true, "Djm", "EMl", stringArray0, true);
        CSVParser cSVParser0 = CSVParser.parse("Djm", cSVFormat0);
        cSVParser0.getCurrentLineNumber();
        assertEquals(1L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        try {
            CSVParser.parse(uRL0, charset0, cSVFormat0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Could not find: www.someFakeButWellFormedURL.org
        }
    }
}
