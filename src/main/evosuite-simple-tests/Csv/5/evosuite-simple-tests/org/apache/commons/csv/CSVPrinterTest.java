/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:28:10 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayList;
import java.util.HashSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.junit.runner.RunWith;

public class CSVPrinterTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(1174);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('i');
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
        Object[] objectArray0 = new Object[9];
        objectArray0[2] = (Object) charArrayWriter0;
        cSVPrinter0.printRecord(objectArray0);
        assertEquals(45, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.allocate(3);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        Object[] objectArray0 = new Object[4];
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords(objectArray0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("$pMX");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        String string0 = "G=SE(H1IGw-";
        MockPrintStream mockPrintStream0 = new MockPrintStream("G=SE(H1IGw-");
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVPrinter0;
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(1).when(resultSetMetaData0).getColumnCount();
        boolean boolean0 = true;
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        doReturn((String) null).when(resultSet0).getString(anyInt());
        doReturn(true, false).when(resultSet0).next();
        cSVPrinter0.printRecords(resultSet0);
        objectArray0[1] = (Object) cSVFormat0;
        objectArray0[2] = (Object) mockPrintStream0;
        cSVPrinter0.printRecord(objectArray0);
        cSVPrinter0.printComment(string0);
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/elliottzackrone/IdeaProjects/defects4jprefix");
        cSVPrinter0.println();
        boolean boolean1 = true;
        boolean boolean2 = true;
        FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean2, boolean0);
        ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(resultSetMetaData1).getColumnCount();
        ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData1).when(resultSet1).getMetaData();
        doReturn(false).when(resultSet1).next();
        double double0 = (-2939.1344956);
        boolean boolean3 = false;
        cSVFormat0.withIgnoreSurroundingSpaces(boolean3);
        mockPrintStream0.print((Object) cSVPrinter0);
        mockPrintStream0.println(double0);
        cSVPrinter0.printRecords(resultSet1);
        cSVPrinter0.getOut();
        Appendable appendable0 = cSVPrinter0.getOut();
        assertSame(appendable0, mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        File file0 = MockFile.createTempFile("url", "org.apache.commons.csv.CSVPrinter$1");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords(resultSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecords((Iterable<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MockFileWriter mockFileWriter0 = new MockFileWriter("[{", false);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        mockFileWriter0.close();
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
        HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>(0);
        SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[{");
        SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "(a^(>Ccp|'CVN/Q468", sQLTransactionRollbackException0);
        BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
        hashSet0.add(batchUpdateException0);
        try {
            cSVPrinter0.printRecords((Iterable<?>) hashSet0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        Object[] objectArray0 = new Object[1];
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord(objectArray0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        PipedWriter pipedWriter0 = new PipedWriter();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
        CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[0];
        try {
            cSVPrinter0.printRecord(objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("out");
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.printRecord((Iterable<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        ByteBuffer byteBuffer0 = ByteBuffer.allocate(1161);
        CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
        CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf('&');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
        // Undeclared exception!
        try {
            cSVPrinter0.printComment("S:p0sP_!");
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        char[] charArray0 = new char[6];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('P');
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        // Undeclared exception!
        try {
            cSVPrinter0.printComment("FYGb0TDj");
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        char[] charArray0 = new char[3];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
        // Undeclared exception!
        try {
            cSVPrinter0.print(charBuffer0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        PipedWriter pipedWriter0 = new PipedWriter();
        CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
        CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
        try {
            cSVPrinter0.print(cSVFormat0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        MockFileWriter mockFileWriter0 = new MockFileWriter("Tv/A*$", true);
        Character character0 = new Character('/');
        Quote quote0 = Quote.NONE;
        String[] stringArray0 = new String[5];
        CSVFormat cSVFormat0 = new CSVFormat('/', character0, quote0, character0, character0, false, true, "", "", stringArray0, true);
        CSVPrinter cSVPrinter0 = null;
        try {
            cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The quoteChar character and the delimiter cannot be the same ('/')
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = null;
        try {
            cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'out' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
        HashSet<SequenceInputStream> hashSet0 = new HashSet<SequenceInputStream>();
        ArrayList<SequenceInputStream> arrayList0 = new ArrayList<SequenceInputStream>(hashSet0);
        PipedInputStream pipedInputStream0 = new PipedInputStream(110);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
        arrayList0.add(sequenceInputStream0);
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        assertEquals(40, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test1918() throws Throwable {
        MockFileWriter mockFileWriter0 = new MockFileWriter("[{", false);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
        HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>(0);
        SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[{");
        SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "(a^(>Ccp|'CVN/Q468", sQLTransactionRollbackException0);
        BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
        hashSet0.add(batchUpdateException0);
        cSVPrinter0.printRecords((Iterable<?>) hashSet0);
        assertFalse(hashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2119() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(1174);
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('i');
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
        Object[] objectArray0 = new Object[9];
        objectArray0[0] = (Object) cSVPrinter0;
        cSVPrinter0.printRecord(objectArray0);
        assertEquals(56, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2320() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(1174);
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
        Object[] objectArray0 = new Object[9];
        objectArray0[1] = (Object) cSVPrinter0;
        cSVPrinter0.printRecord(objectArray0);
        assertEquals(56, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test2421() throws Throwable {
        MockFile mockFile0 = new MockFile("QuoteChar=<");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
        cSVPrinter0.print(mockFile0);
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test2522() throws Throwable {
        MockFile mockFile0 = new MockFile("qdQa-E:/yl", "qdQa-E:/yl");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        Object[] objectArray0 = new Object[5];
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
        cSVPrinter0.printRecords(objectArray0);
        assertEquals(20L, mockFile0.length());
    }
}
