/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:32:10 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.Reader;
import java.io.StringReader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.Quote;
import org.junit.runner.RunWith;

public class CSVFormatTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(';');
        cSVFormat1.validate();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(';');
        cSVFormat1.validate();
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(';');
        cSVFormat1.validate();
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(';');
        cSVFormat1.validate();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(';');
        cSVFormat1.validate();
        assertEquals(';', (char) cSVFormat1.getEscape());
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(';');
        cSVFormat1.validate();
        assertEquals('f', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test0006() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(';');
        cSVFormat1.validate();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test00110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test00111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test00112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test00113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test00114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('y', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test00115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test00216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.MYSQL.validate();
        assertEquals('\"', (char) cSVFormat0.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test00317() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test00318() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        assertEquals("gQWQ8Sg", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test00319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test00320() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        assertTrue(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test00321() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test00322() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test00423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertTrue(cSVFormat2.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test00424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test00425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test00426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test00427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test00428() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test00429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertEquals('c', (char) cSVFormat2.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test00430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test00431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test00432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test00533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test00534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test00535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test00536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test00537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test00538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test00539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("");
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test00640() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertEquals("gQWQ8Sg", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test00641() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test00642() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test00643() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertEquals("\r\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test00644() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test00645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test00646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test00647() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test00748() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('z');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test00749() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('z');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test00750() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('z');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test00751() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('z');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test00752() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('z');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertEquals('\"', (char) cSVFormat2.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test00753() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('z');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertEquals('z', (char) cSVFormat2.getEscape());
    }

    @Test(timeout = 4000)
    public void test00754() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('z');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test00755() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('z');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("gQWQ8Sg");
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test00856() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(stringArray0[0]);
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test00857() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(stringArray0[0]);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test00858() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(stringArray0[0]);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test00859() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(stringArray0[0]);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test00860() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(stringArray0[0]);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test00861() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(stringArray0[0]);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test00862() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(stringArray0[0]);
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test00863() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(stringArray0[0]);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test00964() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test00965() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test00966() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertEquals('7', (char) cSVFormat2.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test00967() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test00968() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test00969() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test00970() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test00971() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertEquals("7", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test00972() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test00973() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test01074() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
        assertEquals("C", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test01075() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test01076() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test01077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test01078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test01079() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test01080() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test01081() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test01082() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test01183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test01184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test01185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test01186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test01187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test01188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        assertEquals("@", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test01189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test01190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test01291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test01292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test01293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test01294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test01295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test01296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test01297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertEquals("Y!6-apl", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test01298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test01399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuotePolicy(quote0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test013100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test013101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuotePolicy(quote0);
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test013102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test013103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test013104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test013105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test014106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test014107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test014108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test014109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test014110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test014111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertEquals('c', (char) cSVFormat2.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test014112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test014113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test015114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test015115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test015116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test015117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test015118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test015119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test015120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test016121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test016122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test016123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test016124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test016125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test016126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test016127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test016128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('B');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Y!6-apl");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertEquals("Y!6-apl", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test017129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteChar(character0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test017130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteChar(character0);
        assertEquals('\\', (char) cSVFormat1.getEscape());
    }

    @Test(timeout = 4000)
    public void test017131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteChar(character0);
        assertEquals('1', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test017132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteChar(character0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test017133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteChar(character0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test017134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteChar(character0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test017135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('1');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteChar(character0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test018136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test018137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test018138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test018139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test018140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test018141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test018142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('c');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test019143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        assertEquals("F0%>FX7T#", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test019144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test019145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test019146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test019147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test019148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test019149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        assertEquals('L', (char) cSVFormat2.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test019150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test019151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("F0%>FX7T#");
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test020152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape('e');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(' ');
        assertEquals('e', (char) cSVFormat2.getEscape());
    }

    @Test(timeout = 4000)
    public void test020153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape('e');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(' ');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test020154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape('e');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(' ');
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test020155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape('e');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(' ');
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test020156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape('e');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(' ');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test020157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape('e');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(' ');
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test020158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withEscape('e');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(' ');
        assertEquals(' ', (char) cSVFormat2.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test021159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        assertEquals('[', (char) cSVFormat2.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test021160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test021161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test021162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test021163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test021164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test021165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test021166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test021167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
        assertEquals('C', (char) cSVFormat2.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test022168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
        CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('4');
        assertTrue(cSVFormat5.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test022169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
        CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('4');
        assertTrue(cSVFormat5.isQuoting());
    }

    @Test(timeout = 4000)
    public void test022170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
        CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('4');
        assertTrue(cSVFormat5.equals((Object) cSVFormat4));
    }

    @Test(timeout = 4000)
    public void test022171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
        CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('4');
        assertFalse(cSVFormat5.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test022172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
        CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('4');
        assertTrue(cSVFormat5.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test022173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
        CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('4');
        assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test022174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar(character0);
        CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('4');
        assertFalse(cSVFormat5.isEscaping());
    }

    @Test(timeout = 4000)
    public void test023175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test024176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test024177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertEquals('c', (char) cSVFormat2.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test024178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertEquals("JTw[q9vDLA7X}", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test024179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test024180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test024181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test024182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test024183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test024184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test025185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test025186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test025187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test025188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertEquals("JTw[q9vDLA7X}", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test025189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test025190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test025191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test025192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("JTw[q9vDLA7X}");
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test026193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertEquals("JTw[q9vDLA7X}", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test026194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test026195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat2.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test026196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test026197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test026198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test026199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test026200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test026201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test026202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("JTw[q9vDLA7X}");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test027203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test027204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test027205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test027206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test027207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test027208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertEquals('c', (char) cSVFormat2.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test027209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test027210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test027211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test027212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat2.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test028213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test028214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test028215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test028216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test028217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test028218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test028219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test028220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test029221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test029222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test029223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test029224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test029225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test029226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test029227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test029228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test029229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertEquals("", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test029230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test030231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test030232() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test030233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test030234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        assertTrue(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test031235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape((Character) null);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test032236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        assertEquals('\'', (char) cSVFormat2.getEscape());
    }

    @Test(timeout = 4000)
    public void test032237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test032238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test032239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        assertEquals('\"', (char) cSVFormat2.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test032240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test032241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test032242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test033243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test033244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test033245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test033246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertEquals('2', (char) cSVFormat2.getEscape());
    }

    @Test(timeout = 4000)
    public void test033247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertEquals('\"', (char) cSVFormat2.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test033248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertEquals("", cSVFormat2.getNullString());
    }

    @Test(timeout = 4000)
    public void test033249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test033250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test034251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test034252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test034253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertEquals('\"', (char) cSVFormat2.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test034254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test034255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertEquals('2', (char) cSVFormat2.getEscape());
    }

    @Test(timeout = 4000)
    public void test034256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test034257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertEquals('2', (char) cSVFormat2.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test034258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test035259() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
        assertEquals(',', cSVFormat3.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test035260() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
        assertFalse(cSVFormat3.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test035261() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
        assertTrue(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test035262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
        assertEquals('2', (char) cSVFormat3.getEscape());
    }

    @Test(timeout = 4000)
    public void test035263() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test035264() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
        assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test035265() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
        assertFalse(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test035266() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
        assertEquals('\"', (char) cSVFormat3.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test036267() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test036268() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test036269() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test036270() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        assertEquals('q', (char) cSVFormat2.getEscape());
    }

    @Test(timeout = 4000)
    public void test036271() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test036272() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test036273() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
        assertEquals('h', (char) cSVFormat2.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test037274() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter(' ');
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test037275() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter(' ');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test037276() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter(' ');
        assertEquals(' ', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test037277() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter(' ');
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test037278() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter(' ');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test037279() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter(' ');
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test037280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter(' ');
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test038281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('J');
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test038282() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('J');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test038283() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('J');
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test038284() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('J');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test038285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('J');
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test038286() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('J');
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test038287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('J');
        assertEquals('v', (char) cSVFormat2.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test038288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('J');
        assertEquals('J', cSVFormat2.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test039289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('');
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test039290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('');
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test039291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('');
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test039292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('');
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test039293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('');
        assertEquals('', cSVFormat2.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test039294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('');
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test039295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('');
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test040296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('Z');
        assertEquals('Z', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test040297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('Z');
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test040298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('Z');
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test040299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('Z');
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test040300() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('Z');
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test040301() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('Z');
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test040302() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('Z');
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test041303() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
        assertEquals('\"', (char) cSVFormat3.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test041304() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
        assertEquals(',', cSVFormat3.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test041305() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
        assertFalse(cSVFormat3.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test041306() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
        assertEquals("The header contains duplicate names: ", cSVFormat3.getNullString());
    }

    @Test(timeout = 4000)
    public void test041307() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
        assertEquals('!', (char) cSVFormat3.getEscape());
    }

    @Test(timeout = 4000)
    public void test041308() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
        assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test041309() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
        assertEquals("\r\n", cSVFormat3.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test041310() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The header contains duplicate names: ");
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
        assertFalse(cSVFormat3.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test042311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('N');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test042312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('N');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test042313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('N');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test042314() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('N');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertTrue(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test042315() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('N');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test042316() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('N');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test042317() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(true);
        Character character0 = new Character('N');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test043318() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
        assertTrue(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test044319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test044320() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test044321() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test044322() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test044323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test044324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test044325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('4');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test045326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test045327() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test045328() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test045329() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test045330() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test045331() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test045332() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        Character character0 = Character.valueOf('$');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test046333() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('!');
        assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test046334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('!');
        assertFalse(cSVFormat3.isEscaping());
    }

    @Test(timeout = 4000)
    public void test046335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('!');
        assertFalse(cSVFormat3.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test046336() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('!');
        assertEquals('!', (char) cSVFormat3.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test046337() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('!');
        assertEquals("", cSVFormat3.getNullString());
    }

    @Test(timeout = 4000)
    public void test046338() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('!');
        assertEquals(',', cSVFormat3.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test046339() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('!');
        assertFalse(cSVFormat3.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test046340() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('!');
        assertEquals("\r\n", cSVFormat3.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test046341() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('!');
        assertTrue(cSVFormat3.isQuoting());
    }

    @Test(timeout = 4000)
    public void test047342() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('4');
        assertTrue(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test047343() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('4');
        assertTrue(cSVFormat3.isQuoting());
    }

    @Test(timeout = 4000)
    public void test047344() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('4');
        assertTrue(cSVFormat3.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test047345() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('4');
        assertFalse(cSVFormat3.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test047346() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('4');
        assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test047347() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('4');
        assertEquals('4', (char) cSVFormat3.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test047348() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('4');
        assertTrue(cSVFormat2.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test047349() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('4');
        assertFalse(cSVFormat3.isEscaping());
    }

    @Test(timeout = 4000)
    public void test048350() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "The escape character and the delimiter cannot be the same ('";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
        cSVFormat2.parse(stringReader0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test048351() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "The escape character and the delimiter cannot be the same ('";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
        cSVFormat2.parse(stringReader0);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test048352() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "The escape character and the delimiter cannot be the same ('";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
        cSVFormat2.parse(stringReader0);
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test048353() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "The escape character and the delimiter cannot be the same ('";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
        cSVFormat2.parse(stringReader0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test048354() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "The escape character and the delimiter cannot be the same ('";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
        cSVFormat2.parse(stringReader0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test048355() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "The escape character and the delimiter cannot be the same ('";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
        cSVFormat2.parse(stringReader0);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test048356() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "The escape character and the delimiter cannot be the same ('";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
        cSVFormat2.parse(stringReader0);
        assertFalse(cSVFormat2.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test049357() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test049358() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        assertEquals('y', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test049359() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test049360() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test049361() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test049362() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test049363() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test049364() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test050365() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        cSVFormat0.getRecordSeparator();
        assertEquals(':', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test050366() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test050367() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test050368() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
        cSVFormat0.getRecordSeparator();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test051369() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test051370() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test051371() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test051372() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test051373() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test051374() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test051375() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test051376() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test052377() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test052378() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test052379() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test052380() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test052381() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test052382() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test052383() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.getQuotePolicy();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test053384() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = cSVFormat0.getQuoteChar();
        assertNull(character0);
    }

    @Test(timeout = 4000)
    public void test054385() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test054386() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        assertEquals("\r\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test054387() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test054388() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test054389() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test054390() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        assertEquals("f)ob", string0);
    }

    @Test(timeout = 4000)
    public void test054391() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test054392() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("f)ob");
        String string0 = cSVFormat1.getNullString();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test055393() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
        String string0 = cSVFormat2.getNullString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test055394() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
        String string0 = cSVFormat2.getNullString();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test055395() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
        String string0 = cSVFormat2.getNullString();
        assertEquals("\r\n", cSVFormat2.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test055396() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
        String string0 = cSVFormat2.getNullString();
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test055397() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
        String string0 = cSVFormat2.getNullString();
        assertEquals('L', cSVFormat2.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test055398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
        String string0 = cSVFormat2.getNullString();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test055399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
        String string0 = cSVFormat2.getNullString();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test055400() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
        String string0 = cSVFormat2.getNullString();
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test056401() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test056402() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test056403() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test056404() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test056405() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test056406() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test056407() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator("==+CQ{fn<2 k");
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test057408() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test057409() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test057410() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test057411() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test057412() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test057413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test057414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test058415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test058416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test058417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test058418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test058419() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test058420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test058421() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test059422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        assertEquals('c', (char) character0);
    }

    @Test(timeout = 4000)
    public void test059423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test059424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test059425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test059426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test059427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        assertEquals('\"', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test059428() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
        Character character0 = cSVFormat1.getEscape();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test060429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
        char char0 = cSVFormat0.getDelimiter();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test060430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
        char char0 = cSVFormat0.getDelimiter();
        assertEquals('1', char0);
    }

    @Test(timeout = 4000)
    public void test060431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
        char char0 = cSVFormat0.getDelimiter();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test060432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
        char char0 = cSVFormat0.getDelimiter();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test061433() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
        char char0 = cSVFormat0.getDelimiter();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test061434() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
        char char0 = cSVFormat0.getDelimiter();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test061435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
        char char0 = cSVFormat0.getDelimiter();
        assertEquals('r', char0);
    }

    @Test(timeout = 4000)
    public void test061436() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
        char char0 = cSVFormat0.getDelimiter();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test062437() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test062438() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test062439() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test062440() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        assertEquals('s', (char) character0);
    }

    @Test(timeout = 4000)
    public void test062441() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test062442() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test062443() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test062444() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
        Character character0 = cSVFormat1.getCommentStart();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test063445() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        // Undeclared exception!
        try {
            cSVFormat0.RFC4180.parse((Reader) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'reader' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test064446() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        // Undeclared exception!
        try {
            cSVFormat0.format((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test065447() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isQuoting();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test066448() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.isQuoting();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test067449() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test067450() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test067451() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
        assertEquals('x', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test067452() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test067453() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
        boolean boolean0 = cSVFormat1.isNullHandling();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test068454() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isNullHandling();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test069455() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.isEscaping();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test070456() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isEscaping();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test071457() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.isCommentingEnabled();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test072458() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test072459() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test072460() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test072461() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test072462() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test072463() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test072464() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        assertEquals('*', (char) cSVFormat1.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test072465() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test072466() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
        boolean boolean0 = cSVFormat1.isCommentingEnabled();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test073467() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = cSVFormat0.getHeader();
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test074468() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test074469() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test074470() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test074471() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        assertNotNull(stringArray1);
    }

    @Test(timeout = 4000)
    public void test074472() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test074473() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test074474() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test074475() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String[] stringArray1 = cSVFormat1.getHeader();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test075476() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test077477() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getQuoteChar();
        assertEquals('\"', (char) character0);
    }

    @Test(timeout = 4000)
    public void test078478() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.getNullString();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test079479() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getCommentStart();
        assertNull(character0);
    }

    @Test(timeout = 4000)
    public void test080480() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test081481() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.getRecordSeparator();
        assertEquals("\r\n", string0);
    }

    @Test(timeout = 4000)
    public void test082482() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getEscape();
        assertNull(character0);
    }

    @Test(timeout = 4000)
    public void test083483() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        char char0 = cSVFormat0.getDelimiter();
        assertEquals('\t', char0);
    }

    @Test(timeout = 4000)
    public void test084484() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.NONE;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        Object[] objectArray0 = new Object[2];
        // Undeclared exception!
        try {
            cSVFormat1.format(objectArray0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No quotes mode set but no escape character is set
        }
    }

    @Test(timeout = 4000)
    public void test085485() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        Character character0 = new Character('h');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        Object[] objectArray0 = new Object[7];
        // Undeclared exception!
        try {
            cSVFormat3.format(objectArray0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start and the escape character cannot be the same ('h')
        }
    }

    @Test(timeout = 4000)
    public void test086486() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('@');
        Character character0 = Character.valueOf('@');
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
        StringReader stringReader0 = new StringReader("E");
        // Undeclared exception!
        try {
            cSVFormat2.parse(stringReader0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('@')
        }
    }

    @Test(timeout = 4000)
    public void test087487() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('#');
        StringReader stringReader0 = new StringReader("java.lang.Character@0000000007##org.apache.commons.csv.CSVFormat@0000000004#org.apache.commons.csv.CSVFormat@0000000002#java.lang.String@0000000008#org.apache.commons.csv.CSVFormat@0000000004");
        // Undeclared exception!
        try {
            cSVFormat1.parse(stringReader0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The comment start character and the delimiter cannot be the same ('#')
        }
    }

    @Test(timeout = 4000)
    public void test088488() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        assertEquals('\\', (char) cSVFormat1.getEscape());
    }

    @Test(timeout = 4000)
    public void test088489() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        Object[] objectArray0 = new Object[7];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test088490() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        Object[] objectArray0 = new Object[7];
        String string0 = cSVFormat1.format(objectArray0);
        assertEquals('h', (char) cSVFormat1.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test088491() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        Object[] objectArray0 = new Object[7];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test088492() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        Object[] objectArray0 = new Object[7];
        String string0 = cSVFormat1.format(objectArray0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test088493() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        Object[] objectArray0 = new Object[7];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test088494() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        Object[] objectArray0 = new Object[7];
        String string0 = cSVFormat1.format(objectArray0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test088495() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        Object[] objectArray0 = new Object[7];
        String string0 = cSVFormat1.format(objectArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test088496() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
        Object[] objectArray0 = new Object[7];
        String string0 = cSVFormat1.format(objectArray0);
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test089497() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
        Character character0 = Character.valueOf('V');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        StringReader stringReader0 = new StringReader("");
        // Undeclared exception!
        try {
            cSVFormat1.parse(stringReader0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The escape character and the delimiter cannot be the same ('V')
        }
    }

    @Test(timeout = 4000)
    public void test090498() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('z');
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('z');
        StringReader stringReader0 = new StringReader("NONE");
        // Undeclared exception!
        try {
            cSVFormat1.parse(stringReader0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The quoteChar character and the delimiter cannot be the same ('z')
        }
    }

    @Test(timeout = 4000)
    public void test091499() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false Header:[null, null]", string0);
    }

    @Test(timeout = 4000)
    public void test092500() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        String string0 = cSVFormat0.toString();
        assertEquals("Delimiter=<A> SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test093501() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000001,,,org.apache.commons.csv.CSVFormat@0000000002,,org.apache.commons.csv.CSVFormat@0000000004");
        cSVFormat1.toString();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test093502() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000001,,,org.apache.commons.csv.CSVFormat@0000000002,,org.apache.commons.csv.CSVFormat@0000000004");
        cSVFormat1.toString();
        assertTrue(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test093503() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000001,,,org.apache.commons.csv.CSVFormat@0000000002,,org.apache.commons.csv.CSVFormat@0000000004");
        cSVFormat1.toString();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test093504() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000001,,,org.apache.commons.csv.CSVFormat@0000000002,,org.apache.commons.csv.CSVFormat@0000000004");
        cSVFormat1.toString();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test093505() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000001,,,org.apache.commons.csv.CSVFormat@0000000002,,org.apache.commons.csv.CSVFormat@0000000004");
        cSVFormat1.toString();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test093506() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000001,,,org.apache.commons.csv.CSVFormat@0000000002,,org.apache.commons.csv.CSVFormat@0000000004");
        cSVFormat1.toString();
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test093507() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000001,,,org.apache.commons.csv.CSVFormat@0000000002,,org.apache.commons.csv.CSVFormat@0000000004");
        cSVFormat1.toString();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test093508() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000001,,,org.apache.commons.csv.CSVFormat@0000000002,,org.apache.commons.csv.CSVFormat@0000000004");
        cSVFormat1.toString();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test094509() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('v');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        String string0 = cSVFormat1.toString();
        assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<v> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test095510() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        cSVFormat0.hashCode();
        assertEquals('A', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test095511() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test095512() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test095513() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        cSVFormat0.hashCode();
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test096514() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test096515() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test096516() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test096517() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test096518() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test097519() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        cSVFormat1.hashCode();
        assertEquals("\r\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test097520() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test097521() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test097522() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        cSVFormat1.hashCode();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test097523() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        cSVFormat1.hashCode();
        assertEquals("gQWQ8Sg", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test097524() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test097525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("gQWQ8Sg");
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test098526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('d');
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test098527() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('d');
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test098528() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('d');
        cSVFormat1.hashCode();
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test098529() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('d');
        cSVFormat1.hashCode();
        assertEquals('d', (char) cSVFormat1.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test098530() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('d');
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test098531() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('d');
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test098532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentStart('d');
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test099533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test099534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test099535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test099536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test099537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test099538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        cSVFormat1.hashCode();
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test100539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test100540() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("v^Dm");
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test100541() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("v^Dm");
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test100542() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("v^Dm");
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test100543() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("v^Dm");
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        assertEquals(0L, cSVParser0.getRecordNumber());
    }

    @Test(timeout = 4000)
    public void test100544() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("v^Dm");
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test100545() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("v^Dm");
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test100546() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        StringReader stringReader0 = new StringReader("v^Dm");
        CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test101547() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('7');
        Object[] objectArray0 = new Object[6];
        objectArray0[5] = (Object) cSVFormat2;
        boolean boolean0 = cSVFormat3.equals(objectArray0[5]);
        assertTrue(cSVFormat3.isQuoting());
    }

    @Test(timeout = 4000)
    public void test101548() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('7');
        Object[] objectArray0 = new Object[6];
        objectArray0[5] = (Object) cSVFormat2;
        boolean boolean0 = cSVFormat3.equals(objectArray0[5]);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test101549() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('7');
        Object[] objectArray0 = new Object[6];
        objectArray0[5] = (Object) cSVFormat2;
        boolean boolean0 = cSVFormat3.equals(objectArray0[5]);
        assertFalse(cSVFormat3.isEscaping());
    }

    @Test(timeout = 4000)
    public void test101550() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('7');
        Object[] objectArray0 = new Object[6];
        objectArray0[5] = (Object) cSVFormat2;
        boolean boolean0 = cSVFormat3.equals(objectArray0[5]);
        assertEquals('\"', (char) cSVFormat3.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test101551() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('7');
        Object[] objectArray0 = new Object[6];
        objectArray0[5] = (Object) cSVFormat2;
        boolean boolean0 = cSVFormat3.equals(objectArray0[5]);
        assertFalse(cSVFormat3.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test101552() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('7');
        Object[] objectArray0 = new Object[6];
        objectArray0[5] = (Object) cSVFormat2;
        boolean boolean0 = cSVFormat3.equals(objectArray0[5]);
        assertEquals('7', (char) cSVFormat3.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test101553() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('7');
        Object[] objectArray0 = new Object[6];
        objectArray0[5] = (Object) cSVFormat2;
        boolean boolean0 = cSVFormat3.equals(objectArray0[5]);
        assertTrue(cSVFormat3.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test101554() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('7');
        Object[] objectArray0 = new Object[6];
        objectArray0[5] = (Object) cSVFormat2;
        boolean boolean0 = cSVFormat3.equals(objectArray0[5]);
        assertFalse(cSVFormat3.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test102555() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0080');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u0080');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test102556() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0080');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u0080');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\u0080', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test102557() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0080');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u0080');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test102558() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0080');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u0080');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals("\u0080", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test102559() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0080');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u0080');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test102560() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0080');
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('\u0080');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test103561() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test103562() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test103563() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test103564() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('4', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test103565() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test104566() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test104567() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test104568() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test104569() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test104570() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test104571() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test104572() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test104573() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test105574() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test105575() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test105576() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test105577() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test105578() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('W', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test105579() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test105580() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test106581() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.equals(cSVFormat2);
        assertEquals("<", cSVFormat3.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test106582() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.equals(cSVFormat2);
        assertTrue(cSVFormat3.isEscaping());
    }

    @Test(timeout = 4000)
    public void test106583() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.equals(cSVFormat2);
        assertFalse(cSVFormat3.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test106584() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.equals(cSVFormat2);
        assertFalse(cSVFormat3.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test106585() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.equals(cSVFormat2);
        assertEquals("qU?qMg?^#%W9", cSVFormat3.getNullString());
    }

    @Test(timeout = 4000)
    public void test106586() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.equals(cSVFormat2);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test106587() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.equals(cSVFormat2);
        assertFalse(cSVFormat3.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test106588() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.equals(cSVFormat2);
        assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test106589() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
        String[] stringArray0 = new String[2];
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.equals(cSVFormat2);
        assertFalse(cSVFormat3.isQuoting());
    }

    @Test(timeout = 4000)
    public void test107590() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test107591() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test107592() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('q', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test107593() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test107594() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test108595() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test108596() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('N', (char) cSVFormat1.getEscape());
    }

    @Test(timeout = 4000)
    public void test108597() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test108598() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test108599() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test108600() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test108601() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\"', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test108602() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test108603() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test108604() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test109605() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test109606() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test109607() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test109608() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test109609() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\"', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test109610() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109611() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test109612() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test109613() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('!', (char) cSVFormat1.getEscape());
    }

    @Test(timeout = 4000)
    public void test110614() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertEquals(',', cSVFormat2.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test110615() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test110616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertEquals('\"', (char) cSVFormat2.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test110617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test110618() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test110619() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test110620() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertEquals('7', (char) cSVFormat2.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test110621() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertFalse(cSVFormat2.isEscaping());
    }

    @Test(timeout = 4000)
    public void test110622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(cSVFormat2.isQuoting());
    }

    @Test(timeout = 4000)
    public void test110623() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
        Character character0 = Character.valueOf('7');
        CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test111624() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test111625() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test111626() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('s', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test111627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('l', (char) cSVFormat1.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test111628() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test111629() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test111630() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test111631() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('l');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test112632() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test112633() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test112634() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test112635() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112636() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals("X", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test112637() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test112638() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test112639() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test112640() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test112641() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('X');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test113642() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test113643() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test113644() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test113645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test113646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test113647() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test113648() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals("\n", cSVFormat1.getRecordSeparator());
    }

    @Test(timeout = 4000)
    public void test113649() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test113650() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals("qU?qMg?^#%W9", cSVFormat1.getNullString());
    }

    @Test(timeout = 4000)
    public void test113651() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("qU?qMg?^#%W9");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals('\t', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test114652() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test114653() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test114654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test114655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat0.equals((Object) cSVFormat1));
    }

    @Test(timeout = 4000)
    public void test114656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test114657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test114658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test114659() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test114660() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test114661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Quote quote0 = Quote.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test115662() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test115663() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test115664() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test115665() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test115666() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test115667() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test115668() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test115669() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.equals((Object) cSVFormat0));
    }

    @Test(timeout = 4000)
    public void test115670() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test115671() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('J');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('J', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test116672() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test117673() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        assertFalse(cSVFormat0.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test117674() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        assertEquals('q', cSVFormat0.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test117675() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        assertFalse(cSVFormat0.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test117676() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test117677() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test118678() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("RecordSeparator=<");
        boolean boolean0 = cSVFormat0.equals(stringReader0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test119679() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        assertFalse(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test119680() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test119681() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test119682() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test119683() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test120684() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        // Undeclared exception!
        try {
            cSVFormat0.withCommentStart('\r');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character cannot be a line break
        }
    }

    @Test(timeout = 4000)
    public void test121685() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = new String[3];
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(stringArray0);
        try {
            cSVFormat1.validate();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // The header contains duplicate names: [null, null, null]
        }
    }

    @Test(timeout = 4000)
    public void test122686() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test122687() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test122688() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test122689() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('\"', (char) cSVFormat1.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test122690() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test122691() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test122692() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals('v', (char) cSVFormat1.getCommentStart());
    }

    @Test(timeout = 4000)
    public void test122693() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test122694() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test122695() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('v');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test123696() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertEquals(',', cSVFormat2.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test123697() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertTrue(cSVFormat2.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test123698() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertFalse(cSVFormat2.getSkipHeaderRecord());
    }

    @Test(timeout = 4000)
    public void test123699() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertFalse(cSVFormat3.isEscaping());
    }

    @Test(timeout = 4000)
    public void test123700() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertFalse(cSVFormat2.equals((Object) cSVFormat3));
    }

    @Test(timeout = 4000)
    public void test123701() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertFalse(cSVFormat3.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test123702() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertFalse(cSVFormat0.equals((Object) cSVFormat2));
    }

    @Test(timeout = 4000)
    public void test123703() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertEquals('v', (char) cSVFormat3.getQuoteChar());
    }

    @Test(timeout = 4000)
    public void test123704() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertFalse(cSVFormat3.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test123705() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertTrue(cSVFormat3.isQuoting());
    }

    @Test(timeout = 4000)
    public void test123706() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test123707() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Quote quote0 = Quote.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuotePolicy(quote0);
        CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('v');
        CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat3);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test124708() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.TDF.toString();
        assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
    }

    @Test(timeout = 4000)
    public void test125709() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.isQuoting());
    }

    @Test(timeout = 4000)
    public void test125710() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isEscaping());
    }

    @Test(timeout = 4000)
    public void test125711() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125712() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
    }

    @Test(timeout = 4000)
    public void test125713() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isNullHandling());
    }

    @Test(timeout = 4000)
    public void test125714() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertTrue(cSVFormat1.getIgnoreEmptyLines());
    }

    @Test(timeout = 4000)
    public void test125715() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertEquals(',', cSVFormat1.getDelimiter());
    }

    @Test(timeout = 4000)
    public void test125716() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        assertFalse(cSVFormat1.isCommentingEnabled());
    }

    @Test(timeout = 4000)
    public void test126717() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test127718() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[1];
        String string0 = cSVFormat0.format(stringArray0);
        assertEquals("\"\"", string0);
    }
}
