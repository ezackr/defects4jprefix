/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:56:27 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.junit.runner.RunWith;

public class CSVFormatTest {

    @Test(timeout = 4000)
    public void test0080() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
        CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('H');
        cSVFormat2.MYSQL.withRecordSeparator('A');
        CharBuffer charBuffer0 = CharBuffer.allocate(124);
        cSVFormat3.println(charBuffer0);
        cSVFormat2.isCommentMarkerSet();
        // Undeclared exception!
        try {
            cSVFormat3.withEscape('H');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character and the delimiter cannot be the same ('H')
        }
    }

    @Test(timeout = 4000)
    public void test0091() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        char char0 = 'z';
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('z');
        cSVFormat1.DEFAULT.withAutoFlush(true);
        String string0 = null;
        MockFile mockFile0 = null;
        try {
            mockFile0 = new MockFile((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('I');
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        cSVFormat0.MYSQL.withIgnoreEmptyLines(false);
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        Character character0 = Character.valueOf('I');
        cSVFormat1.DEFAULT.withEscape(character0);
        cSVFormat1.toString();
        // Undeclared exception!
        try {
            CSVFormat.valueOf("\r\n");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\r
        }
    }

    @Test(timeout = 4000)
    public void test0113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        String[] stringArray0 = new String[8];
        stringArray0[0] = "0q15 \"D$q";
        stringArray0[1] = "Qb4@fJ]jUX}3UyPT#S";
        stringArray0[2] = "";
        stringArray0[3] = "}E~rf-VM`u%*No'%K";
        stringArray0[4] = "string";
        stringArray0[5] = "";
        stringArray0[6] = "dHsd";
        stringArray0[7] = ":x";
        // Undeclared exception!
        try {
            cSVFormat1.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: '' in [0q15 \"D$q, Qb4@fJ]jUX}3UyPT#S, , }E~rf-VM`u%*No'%K, string, , dHsd, :x]
        }
    }

    @Test(timeout = 4000)
    public void test0124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
        cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');
        cSVFormat1.equals(cSVFormat0);
        CSVFormat.Predefined.values();
        Charset charset0 = Charset.defaultCharset();
        // Undeclared exception!
        try {
            charset0.decode((ByteBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('1');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        cSVFormat0.INFORMIX_UNLOAD.printer();
        CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        cSVFormat5.withHeader(class0);
        cSVFormat2.getHeader();
        // Undeclared exception!
        try {
            cSVFormat2.format((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = new Character('}');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
        // Undeclared exception!
        try {
            cSVFormat2.withQuote('}');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('}')
        }
    }

    @Test(timeout = 4000)
    public void test0187() throws Throwable {
        // Undeclared exception!
        try {
            CSVFormat.valueOf("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
        }
    }

    @Test(timeout = 4000)
    public void test0268() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        String string0 = "The header contains a duplicate entry: '";
        cSVFormat0.INFORMIX_UNLOAD.withRecordSeparator("The header contains a duplicate entry: '");
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
        cSVFormat1.DEFAULT.withTrim();
        cSVFormat1.getSkipHeaderRecord();
        String string1 = ";P:<ffkD7d";
        try {
            MockURI.URI("The header contains a duplicate entry: '", "Q0{0EF6E", "$mvZlc/$8m9G\"BSP`_I", ";P:<ffkD7d");
            fail("Expecting exception: URISyntaxException");
        } catch (URISyntaxException e) {
            //
            // Relative path in absolute URI: The header contains a duplicate entry: '://Q0{0EF6E$mvZlc/$8m9G%22BSP%60_I#;P:%3CffkD7d
        }
    }

    @Test(timeout = 4000)
    public void test0289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        // Undeclared exception!
        try {
            cSVFormat1.withQuote(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the quoteChar cannot be the same (')')
        }
    }

    @Test(timeout = 4000)
    public void test03010() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
        String string0 = "The delimiter cannot be a line break";
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("The delimiter cannot be a line break");
        CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments((Object[]) null);
        cSVFormat3.withTrailingDelimiter(true);
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter("The delimiter cannot be a line break", "The delimiter cannot be a line break");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (Throwable e) {
            //
            // The delimiter cannot be a line break
        }
    }

    @Test(timeout = 4000)
    public void test03111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("ak{V#e");
        CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        String string0 = "F&X";
        CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("F&X");
        String[] stringArray0 = new String[3];
        stringArray0[0] = "ak{V#e";
        stringArray0[1] = "ak{V#e";
        stringArray0[2] = "ak{V#e";
        // Undeclared exception!
        try {
            cSVFormat4.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: 'ak{V#e' in [ak{V#e, ak{V#e, ak{V#e]
        }
    }

    @Test(timeout = 4000)
    public void test03212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        Character character0 = Character.valueOf('D');
        CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
        cSVFormat4.POSTGRESQL_CSV.withAutoFlush(true);
        CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        cSVFormat2.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat5.isQuoteCharacterSet();
        cSVFormat0.getTrailingDelimiter();
        cSVFormat2.printer();
        File file0 = MockFile.createTempFile("NON_NUMERIC", "The escape character and the delimiter cannot be the same ('");
        try {
            MockFile.createTempFile("7dZ=[}&6?W3q}|S`", "NON_NUMERIC", file0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test03813() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
        Character character0 = Character.valueOf('N');
        // Undeclared exception!
        try {
            cSVFormat1.withCommentMarker(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start and the escape character cannot be the same ('N')
        }
    }

    @Test(timeout = 4000)
    public void test03914() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getEscapeCharacter();
        cSVFormat1.withEscape('Q');
        // Undeclared exception!
        try {
            CSVFormat.valueOf("yQs?bUCRKeH;m");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.yQs?bUCRKeH;m
        }
    }

    @Test(timeout = 4000)
    public void test04015() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.withTrailingDelimiter();
        String string0 = "xMp:O3zBlK\"0|@";
        MockPrintStream mockPrintStream0 = null;
        try {
            mockPrintStream0 = new MockPrintStream("xMp:O3zBlK\"0|@", "xMp:O3zBlK\"0|@");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (Throwable e) {
            //
            // xMp:O3zBlK\"0|@
        }
    }

    @Test(timeout = 4000)
    public void test04416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.RFC4180.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        cSVFormat0.withQuoteMode(quoteMode0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        PipedWriter pipedWriter1 = null;
        try {
            pipedWriter1 = new PipedWriter(pipedReader0);
            fail("Expecting exception: IOException");
        } catch (Throwable e) {
            //
            // Already connected
        }
    }

    @Test(timeout = 4000)
    public void test04517() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withHeader(class0);
        cSVFormat2.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
        CSVFormat cSVFormat3 = cSVFormat1.TDF.withTrim();
        Object[] objectArray0 = new Object[0];
        cSVFormat3.POSTGRESQL_TEXT.withQuote('7');
        cSVFormat3.withSkipHeaderRecord(true);
        cSVFormat0.POSTGRESQL_CSV.withTrim(true);
        cSVFormat3.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
        cSVFormat3.POSTGRESQL_TEXT.withEscape('@');
        cSVFormat1.getIgnoreSurroundingSpaces();
        PipedReader pipedReader0 = new PipedReader();
        PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
        PipedReader pipedReader1 = null;
        try {
            pipedReader1 = new PipedReader(pipedWriter0, 3);
            fail("Expecting exception: IOException");
        } catch (Throwable e) {
            //
            // Already connected
        }
    }

    @Test(timeout = 4000)
    public void test04718() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        char char0 = 'G';
        Character character0 = Character.valueOf('G');
        cSVFormat0.withQuote(character0);
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
        Appendable appendable0 = null;
        // Undeclared exception!
        try {
            cSVFormat1.TDF.print((Appendable) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'out' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test05319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = true;
        Character character0 = null;
        cSVFormat0.POSTGRESQL_TEXT.withQuote((Character) null);
        CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(true);
        Object object0 = new Object();
        // Undeclared exception!
        try {
            cSVFormat1.print(object0, (Appendable) null, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        char char0 = ',';
        Character character0 = Character.valueOf(',');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        // Undeclared exception!
        try {
            cSVFormat2.withEscape(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start and the escape character cannot be the same (',')
        }
    }

    @Test(timeout = 4000)
    public void test05521() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        Character character0 = new Character('\\');
        cSVFormat2.withCommentMarker(character0);
        MockFile mockFile0 = new MockFile("wR*eX5A[>%C8Kn=k]");
        mockFile0.toPath();
        // Undeclared exception!
        try {
            Charset.forName("wR*eX5A[>%C8Kn=k]");
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // wR*eX5A[>%C8Kn=k]
        }
    }

    @Test(timeout = 4000)
    public void test05622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Q');
        Character character0 = new Character('}');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        // Undeclared exception!
        try {
            cSVFormat2.withQuote(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('}')
        }
    }

    @Test(timeout = 4000)
    public void test05723() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
        String string0 = "UGzGr]f";
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("UGzGr]f");
        char char0 = '6';
        Character character0 = new Character('6');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat3.MYSQL.withIgnoreHeaderCase();
        Object[] objectArray0 = new Object[5];
        objectArray0[0] = (Object) "UGzGr]f";
        objectArray0[1] = (Object) cSVFormat2;
        objectArray0[2] = (Object) cSVFormat0;
        Object object0 = new Object();
        objectArray0[3] = object0;
        objectArray0[4] = (Object) cSVFormat3;
        CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
        cSVFormat4.withTrim();
        URI uRI0 = MockURI.aFileURI;
        URI uRI1 = MockURI.normalize(uRI0);
        MockFile mockFile0 = new MockFile(uRI1);
        StringWriter stringWriter0 = null;
        try {
            stringWriter0 = new StringWriter((-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Negative buffer size
        }
    }

    @Test(timeout = 4000)
    public void test06024() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreSurroundingSpaces();
        cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
        cSVFormat0.EXCEL.withCommentMarker('c');
        Character character0 = Character.valueOf('6');
        CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withEscape(character0);
        cSVFormat2.POSTGRESQL_CSV.withRecordSeparator("rc\"CY\"1z(");
        Character character1 = new Character('6');
        CSVFormat cSVFormat3 = cSVFormat0.withEscape(character1);
        cSVFormat0.getNullString();
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        cSVFormat_Predefined0.getFormat();
        cSVFormat3.getIgnoreEmptyLines();
        // Undeclared exception!
        try {
            CSVFormat.Predefined.valueOf((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Name is null
        }
    }

    @Override
    public void run25() {
        try {
            CSVFormat cSVFormat0 = CSVFormat.EXCEL;
            Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
            CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
            QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
            CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
            CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
            Object[] objectArray0 = new Object[2];
            cSVFormat2.POSTGRESQL_TEXT.withFirstRecordAsHeader();
            objectArray0[0] = (Object) class0;
            objectArray0[1] = (Object) cSVFormat2;
            cSVFormat2.TDF.format(objectArray0);
            CSVFormat cSVFormat4 = cSVFormat3.withQuote((Character) null);
            CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
            PipedReader pipedReader0 = new PipedReader(126);
            cSVFormat5.parse(pipedReader0);
            FileDescriptor fileDescriptor0 = new FileDescriptor();
            MockFileWriter mockFileWriter0 = null;
            try {
                mockFileWriter0 = new MockFileWriter(fileDescriptor0);
                fail("Expecting exception: SecurityException");
            } catch (SecurityException e) {
                //
                // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
                // java.lang.Thread.getStackTrace(Thread.java:1564)
                // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
                // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
                // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
                // java.io.FileWriter.<init>(FileWriter.java:116)
                // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
                // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
                // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
                // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
                // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
                // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
                // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
                // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
                // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
                // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
                // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
                // java.util.concurrent.FutureTask.run(FutureTask.java:266)
                // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
                // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
                // java.lang.Thread.run(Thread.java:750)
            }
        } catch (Throwable t) {
            // Need to catch declared exceptions
        }
    }

    @Test(timeout = 4000)
    public void test06626() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');
        cSVFormat0.EXCEL.parse(pipedReader0);
        cSVFormat0.getDelimiter();
        cSVFormat0.getHeader();
        CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat2.MYSQL.withIgnoreSurroundingSpaces(false);
        Character character0 = Character.valueOf('x');
        cSVFormat2.INFORMIX_UNLOAD_CSV.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
        cSVFormat3.withEscape('h');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(false);
        Character.isIdeographic(1);
        CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet0);
        cSVFormat4.getCommentMarker();
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        // Undeclared exception!
        try {
            CSVFormat.Predefined.valueOf("^mGotVEt7%");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.^mGotVEt7%
        }
    }

    @Test(timeout = 4000)
    public void test06927() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        cSVFormat0.isCommentMarkerSet();
        Character character0 = new Character('t');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat0.POSTGRESQL_TEXT.withIgnoreEmptyLines(false);
        cSVFormat1.toString();
        QuoteMode quoteMode0 = QuoteMode.NONE;
        char char0 = '`';
        cSVFormat1.RFC4180.withCommentMarker('`');
        // Undeclared exception!
        try {
            cSVFormat0.TDF.println((Appendable) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07028() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        cSVFormat0.getHeaderComments();
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
        MockFile mockFile0 = new MockFile("sLEP4;*g7VZ+41P/W", "sLEP4;*g7VZ+41P/W");
        PipedWriter pipedWriter0 = new PipedWriter();
        cSVFormat0.POSTGRESQL_CSV.toString();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 543);
        cSVFormat0.INFORMIX_UNLOAD_CSV.parse(pipedReader0);
        cSVFormat1.TDF.withIgnoreSurroundingSpaces(true);
        Charset charset0 = null;
        // Undeclared exception!
        try {
            cSVFormat0.print((File) mockFile0, (Charset) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // charset
        }
    }

    @Test(timeout = 4000)
    public void test07129() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        String string0 = "ALL";
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL");
        CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
        cSVFormat2.getTrim();
        cSVFormat2.DEFAULT.withAllowMissingColumnNames(false);
        CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withSkipHeaderRecord(false);
        String[] stringArray0 = new String[6];
        stringArray0[0] = "ALL";
        stringArray0[1] = "ALL";
        stringArray0[2] = "ALL";
        stringArray0[3] = "ALL";
        stringArray0[4] = "ALL";
        stringArray0[5] = "ALL";
        // Undeclared exception!
        try {
            cSVFormat3.POSTGRESQL_TEXT.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: 'ALL' in [ALL, ALL, ALL, ALL, ALL, ALL]
        }
    }

    @Test(timeout = 4000)
    public void test07230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('i');
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        cSVFormat2.POSTGRESQL_CSV.withIgnoreSurroundingSpaces();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
        boolean boolean0 = false;
        CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_TEXT.withTrim(false);
        cSVFormat4.TDF.withRecordSeparator('|');
        Charset charset0 = Charset.defaultCharset();
        // Undeclared exception!
        try {
            cSVFormat1.DEFAULT.print((File) null, charset0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07331() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('%');
        CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
        // Undeclared exception!
        try {
            cSVFormat2.withCommentMarker('%');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('%')
        }
    }

    @Test(timeout = 4000)
    public void test07532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('#');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
        CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_CSV.withDelimiter('S');
        CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator("(u1");
        cSVFormat7.isEscapeCharacterSet();
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) cSVFormat6;
        cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat2.withNullString("> FNW0uFPtx!%");
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter((String) null, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // charsetName
        }
    }

    @Test(timeout = 4000)
    public void test07633() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        String string0 = "INVALID";
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("INVALID");
        CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withQuote('F');
        Character character0 = Character.valueOf('_');
        CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withEscape(character0);
        CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withCommentMarker('F');
        cSVFormat0.RFC4180.withTrailingDelimiter(false);
        cSVFormat4.withIgnoreSurroundingSpaces(true);
        Class<QuoteMode> class0 = QuoteMode.class;
        cSVFormat1.INFORMIX_UNLOAD_CSV.withHeader(class0);
        CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_CSV.withNullString("string");
        cSVFormat5.INFORMIX_UNLOAD.withTrim(true);
        cSVFormat1.getNullString();
        cSVFormat2.toString();
        cSVFormat1.getSkipHeaderRecord();
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter("ALL_NON_NULL", (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // charsetName
        }
    }

    @Test(timeout = 4000)
    public void test07834() throws Throwable {
        char char0 = ' ';
        CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
        Character character0 = Character.valueOf(' ');
        // Undeclared exception!
        try {
            cSVFormat0.withQuote(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The quoteChar character and the delimiter cannot be the same (' ')
        }
    }

    @Test(timeout = 4000)
    public void test08435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(',');
        cSVFormat0.INFORMIX_UNLOAD.withQuote(character0);
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.TDF.withIgnoreSurroundingSpaces(false);
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
        cSVFormat2.getSkipHeaderRecord();
        cSVFormat3.getTrim();
        Appendable appendable0 = null;
        // Undeclared exception!
        try {
            cSVFormat1.println((Appendable) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test08636() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        Character character0 = Character.valueOf('{');
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        CSVFormat cSVFormat4 = cSVFormat3.withTrim();
        cSVFormat4.equals(cSVFormat3);
        cSVFormat1.hashCode();
        MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat$Predefined");
        MockFile.createTempFile("org.apache.commons.csv.CSVFormat$Predefined", "org.apache.commons.csv.CSVFormat$Predefined", (File) mockFile0);
        // Undeclared exception!
        try {
            Charset.forName("org.apache.commons.csv.CSVFormat$Predefined");
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // org.apache.commons.csv.CSVFormat$Predefined
        }
    }

    @Test(timeout = 4000)
    public void test08837() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.withIgnoreHeaderCase();
        String string0 = null;
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter((String) null, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // charsetName
        }
    }

    @Test(timeout = 4000)
    public void test08938() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        StringWriter stringWriter0 = new StringWriter();
        // Undeclared exception!
        try {
            CharBuffer.allocate((-1594));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_TEXT.withTrim();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        cSVFormat3.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.RFC4180.withAutoFlush(false);
        CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator('I');
        cSVFormat0.DEFAULT.withTrailingDelimiter();
        cSVFormat4.equals(cSVFormat0);
        // Undeclared exception!
        try {
            CSVFormat.Predefined.valueOf("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
        }
    }

    @Test(timeout = 4000)
    public void test09240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('K');
        Character character0 = Character.valueOf('K');
        // Undeclared exception!
        try {
            cSVFormat3.withCommentMarker(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start and the escape character cannot be the same ('K')
        }
    }

    @Test(timeout = 4000)
    public void test09341() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        cSVFormat0.DEFAULT.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('\"');
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
        CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('\"');
        cSVFormat4.getCommentMarker();
        cSVFormat0.withSkipHeaderRecord();
        Character character0 = Character.valueOf('\"');
        CSVFormat cSVFormat5 = cSVFormat2.withQuote(character0);
        cSVFormat5.MYSQL.withIgnoreEmptyLines();
        cSVFormat0.DEFAULT.toString();
        cSVFormat5.withAllowMissingColumnNames(false);
        cSVFormat4.hashCode();
        // Undeclared exception!
        try {
            cSVFormat1.println((Appendable) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09442() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('`');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        // Undeclared exception!
        try {
            cSVFormat2.withCommentMarker('`');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start and the escape character cannot be the same ('`')
        }
    }

    @Test(timeout = 4000)
    public void test09743() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        // Undeclared exception!
        try {
            cSVFormat3.withQuoteMode(quoteMode0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No quotes mode set but no escape character is set
        }
    }

    @Test(timeout = 4000)
    public void test10044() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.withFirstRecordAsHeader();
        String string0 = "";
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter("");
            fail("Expecting exception: FileNotFoundException");
        } catch (Throwable e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test10245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = true;
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
        CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NONE;
        // Undeclared exception!
        try {
            cSVFormat3.withQuoteMode(quoteMode0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No quotes mode set but no escape character is set
        }
    }

    @Test(timeout = 4000)
    public void test10446() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.RFC4180.toString();
        cSVFormat0.INFORMIX_UNLOAD.withIgnoreEmptyLines();
        QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        cSVFormat2.INFORMIX_UNLOAD_CSV.parse(pipedReader0);
        cSVFormat2.DEFAULT.withCommentMarker('^');
        cSVFormat2.withTrailingDelimiter();
        StringReader stringReader0 = null;
        try {
            stringReader0 = new StringReader((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test10547() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        Character character0 = Character.valueOf('f');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "\" in ";
        stringArray0[1] = "inputStream";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        boolean boolean0 = false;
        CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
        CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
        cSVFormat4.POSTGRESQL_TEXT.withEscape(character0);
        cSVFormat5.withAllowMissingColumnNames(true);
        Short short0 = new Short((short) 0);
        File file0 = MockFile.createTempFile("inputStream", "inputStream");
        try {
            MockFile.createTempFile("\" in ", (String) null, file0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test10648() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('K');
        Character.valueOf('K');
        cSVFormat3.withIgnoreHeaderCase();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "The comment start and the escape character cannot be the same ('";
        stringArray0[1] = "ECP`FJm5-&";
        stringArray0[2] = "K\"j;NE>yq+-ntB=\"wF?";
        stringArray0[3] = "TOKEN";
        stringArray0[4] = "";
        stringArray0[5] = "jSdpX=b";
        stringArray0[6] = "";
        // Undeclared exception!
        try {
            cSVFormat1.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: '' in [The comment start and the escape character cannot be the same (', ECP`FJm5-&, K\"j;NE>yq+-ntB=\"wF?, TOKEN, , jSdpX=b, ]
        }
    }

    @Test(timeout = 4000)
    public void test10749() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        Character character0 = Character.valueOf('E');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat3.withEscape('');
        String string0 = null;
        MockFile mockFile0 = null;
        try {
            mockFile0 = new MockFile((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test10850() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.withIgnoreSurroundingSpaces(true);
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('&');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        // Undeclared exception!
        try {
            CharBuffer.wrap((CharSequence) stringBuffer0, 34, 34);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test10951() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        objectArray0[1] = (Object) cSVFormat0;
        objectArray0[2] = (Object) cSVFormat0;
        cSVFormat0.RFC4180.format(objectArray0);
        Character character0 = Character.valueOf('/');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
        cSVFormat2.withIgnoreHeaderCase(false);
        cSVFormat1.withIgnoreHeaderCase(true);
        MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002", "");
        MockFile mockFile1 = new MockFile(mockFile0, "");
        mockFile1.toPath();
        // Undeclared exception!
        try {
            Charset.forName("MAx;9kK5=$j:6P1A[");
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // MAx;9kK5=$j:6P1A[
        }
    }

    @Test(timeout = 4000)
    public void test11052() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('.');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        String string0 = "InformixUnload";
        String string1 = "";
        CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withIgnoreEmptyLines();
        // Undeclared exception!
        try {
            cSVFormat3.POSTGRESQL_CSV.println((Appendable) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test11153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        Character character0 = new Character('-');
        CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withCommentMarker(character0);
        cSVFormat2.INFORMIX_UNLOAD.withCommentMarker('-');
        Object[] objectArray0 = new Object[0];
        cSVFormat2.INFORMIX_UNLOAD_CSV.format(objectArray0);
        CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withFirstRecordAsHeader();
        cSVFormat0.getIgnoreHeaderCase();
        cSVFormat3.getDelimiter();
        CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
        QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
        cSVFormat4.withQuoteMode(quoteMode0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.CSVFormat$Predefined", false);
        boolean boolean0 = true;
        MockPrintStream mockPrintStream0 = null;
        try {
            mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "The comment start character and the quoteChar cannot be the same ('");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (Throwable e) {
            //
            // The comment start character and the quoteChar cannot be the same ('
        }
    }

    @Test(timeout = 4000)
    public void test11654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        cSVFormat1.withQuoteMode(quoteMode0);
        StringWriter stringWriter0 = new StringWriter(92);
        char[] charArray0 = new char[5];
        charArray0[0] = '[';
        charArray0[1] = '[';
        charArray0[2] = '[';
        charArray0[3] = '[';
        charArray0[4] = '[';
        // Undeclared exception!
        try {
            CharBuffer.wrap(charArray0, 33, 92);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test11755() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
        cSVFormat1.withDelimiter('r');
        Character character0 = Character.valueOf('r');
        CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);
        cSVFormat2.INFORMIX_UNLOAD.withRecordSeparator("");
        MockFile mockFile0 = new MockFile((File) null, "+b^jb2^~g<$<4");
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter(mockFile0, "LmcA/..7s@*Hi|@Y");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (Throwable e) {
            //
            // LmcA/..7s@*Hi|@Y
        }
    }

    @Test(timeout = 4000)
    public void test12056() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("A7.5#l}pT@=^i#iE7");
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
        CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
        PipedWriter pipedWriter0 = new PipedWriter();
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) cSVFormat0;
        objectArray0[1] = (Object) resultSet0;
        try {
            cSVFormat5.printRecord(pipedWriter0, objectArray0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
        }
    }

    @Test(timeout = 4000)
    public void test12257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
        CSVFormat cSVFormat4 = cSVFormat3.withTrim();
        cSVFormat4.withAllowMissingColumnNames();
        String string0 = "$VALUES";
        MockFile mockFile0 = new MockFile("$VALUES");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        MockPrintStream mockPrintStream0 = null;
        try {
            mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "$VALUES");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (Throwable e) {
            //
            // $VALUES
        }
    }

    @Test(timeout = 4000)
    public void test12358() throws Throwable {
        CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("8B*TG]t!VT");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
        cSVFormat4.POSTGRESQL_CSV.withRecordSeparator('P');
        cSVFormat4.withDelimiter('{');
        cSVFormat4.getIgnoreHeaderCase();
        cSVFormat3.withTrailingDelimiter();
        cSVFormat2.getIgnoreEmptyLines();
        // Undeclared exception!
        try {
            CSVFormat.Predefined.valueOf("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
        }
    }

    @Test(timeout = 4000)
    public void test12459() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        Character character0 = Character.valueOf('q');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NONE;
        cSVFormat2.DEFAULT.withSkipHeaderRecord();
        cSVFormat2.INFORMIX_UNLOAD_CSV.withDelimiter('i');
        Class<QuoteMode> class0 = QuoteMode.class;
        CSVFormat cSVFormat4 = cSVFormat2.EXCEL.withHeader(class0);
        QuoteMode quoteMode1 = QuoteMode.ALL;
        cSVFormat4.POSTGRESQL_CSV.withQuoteMode(quoteMode1);
        CSVFormat cSVFormat5 = cSVFormat3.withQuoteMode(quoteMode0);
        cSVFormat5.TDF.withSkipHeaderRecord();
        cSVFormat5.getHeaderComments();
        cSVFormat3.isCommentMarkerSet();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        char[] charArray0 = new char[6];
        charArray0[0] = 'i';
        cSVFormat5.EXCEL.withCommentMarker((Character) null);
        charArray0[1] = 'q';
        charArray0[2] = 'i';
        charArray0[3] = 'q';
        charArray0[4] = 'i';
        charArray0[5] = 'q';
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
        // Undeclared exception!
        try {
            cSVFormat1.DEFAULT.printRecord(charArrayWriter1, (Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test12560() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        Character character0 = Character.valueOf('r');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('W');
        CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat5 = cSVFormat4.TDF.withEscape('r');
        CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces();
        cSVFormat6.isCommentMarkerSet();
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) cSVFormat0;
        objectArray0[1] = (Object) cSVFormat2;
        cSVFormat4.withIgnoreHeaderCase(true);
        objectArray0[2] = (Object) cSVFormat6;
        cSVFormat3.EXCEL.withHeaderComments(objectArray0);
        cSVFormat3.withSkipHeaderRecord(false);
        cSVFormat6.POSTGRESQL_TEXT.toString();
        cSVFormat5.EXCEL.withSkipHeaderRecord(false);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        cSVFormat3.withHeader(resultSet0);
        // Undeclared exception!
        try {
            cSVFormat2.withEscape(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start and the escape character cannot be the same ('r')
        }
    }

    @Test(timeout = 4000)
    public void test12661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
        cSVFormat0.getCommentMarker();
        String string0 = "$VALUES";
        MockFile mockFile0 = new MockFile("$VALUES", "Escape=<");
        Charset charset0 = Charset.defaultCharset();
        CSVPrinter cSVPrinter0 = cSVFormat1.print((File) mockFile0, charset0);
        cSVFormat1.getAutoFlush();
        cSVFormat1.getEscapeCharacter();
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) cSVPrinter0;
        objectArray0[1] = (Object) null;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) charset0;
        objectArray0[4] = (Object) null;
        objectArray0[5] = (Object) cSVPrinter0;
        cSVFormat0.withHeaderComments(objectArray0);
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter(mockFile0, "Escape=<");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (Throwable e) {
            //
            // Escape=<
        }
    }

    @Test(timeout = 4000)
    public void test12762() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        char char0 = 'o';
        String string0 = "The header contains a duplicate name: \"";
        cSVFormat0.POSTGRESQL_TEXT.withRecordSeparator("The header contains a duplicate name: \"");
        Character character0 = Character.valueOf('o');
        cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.MYSQL.withIgnoreEmptyLines();
        cSVFormat1.withTrailingDelimiter();
        // Undeclared exception!
        try {
            cSVFormat1.withQuote('o');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the quoteChar cannot be the same ('o')
        }
    }

    @Test(timeout = 4000)
    public void test12863() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
        // Undeclared exception!
        try {
            cSVFormat3.format((Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test12964() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        cSVFormat0.DEFAULT.withCommentMarker('\'');
        CSVFormat cSVFormat1 = CSVFormat.newFormat('o');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("LmE>!d8\"");
        CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
        Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
        cSVFormat3.POSTGRESQL_TEXT.withHeader(class0);
        Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
        CSVFormat cSVFormat4 = cSVFormat0.DEFAULT.withHeader(class1);
        cSVFormat0.isEscapeCharacterSet();
        cSVFormat0.isNullStringSet();
        Character character0 = new Character('a');
        CSVFormat cSVFormat5 = cSVFormat4.withEscape(character0);
        CSVFormat cSVFormat6 = cSVFormat5.TDF.withEscape(character0);
        cSVFormat6.INFORMIX_UNLOAD_CSV.withCommentMarker('a');
        // Undeclared exception!
        try {
            cSVFormat5.TDF.parse((Reader) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'reader' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test13065() throws Throwable {
        char char0 = 'v';
        CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
        cSVFormat0.RFC4180.withIgnoreEmptyLines(true);
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('m');
        cSVFormat0.POSTGRESQL_TEXT.hashCode();
        String[] stringArray0 = new String[0];
        cSVFormat1.POSTGRESQL_TEXT.withHeader(stringArray0);
        // Undeclared exception!
        try {
            cSVFormat1.withEscape('v');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character and the delimiter cannot be the same ('v')
        }
    }

    @Test(timeout = 4000)
    public void test13266() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        QuoteMode quoteMode0 = QuoteMode.ALL;
        cSVFormat1.POSTGRESQL_CSV.withQuoteMode(quoteMode0);
        cSVFormat1.RFC4180.toString();
        CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.MYSQL.withTrailingDelimiter();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "oHk";
        QuoteMode quoteMode1 = QuoteMode.ALL;
        cSVFormat2.POSTGRESQL_CSV.withQuoteMode(quoteMode1);
        cSVFormat2.EXCEL.withHeader(stringArray0);
        MockFile mockFile0 = new MockFile("oHk", "oHk");
        cSVFormat2.withSkipHeaderRecord(true);
        // Undeclared exception!
        try {
            Charset.forName("");
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            //
        }
    }

    @Override
    public void run67() {
        try {
            CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
            cSVFormat0.withAllowMissingColumnNames(false);
            Character character0 = new Character('n');
            CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuote(character0);
            CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withFirstRecordAsHeader();
            StringWriter stringWriter0 = new StringWriter(34);
            MockFile mockFile0 = new MockFile("+KbXi");
            MockFile mockFile1 = new MockFile(mockFile0, "NullString=<");
            Path path0 = mockFile1.toPath();
            Charset charset0 = Charset.defaultCharset();
            // Undeclared exception!
            try {
                cSVFormat2.MYSQL.print(path0, charset0);
                fail("Expecting exception: SecurityException");
            } catch (SecurityException e) {
                //
                // Security manager blocks (\"java.io.FilePermission\" \"/Users/elliottzackrone/IdeaProjects/defects4jprefix/+KbXi/NullString=<\" \"write\")
                // java.lang.Thread.getStackTrace(Thread.java:1564)
                // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
                // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
                // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
                // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
                // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
                // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
                // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
                // java.nio.file.Files.newOutputStream(Files.java:216)
                // java.nio.file.Files.newBufferedWriter(Files.java:2860)
                // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
                // sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
                // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
                // java.lang.reflect.Method.invoke(Method.java:498)
                // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
                // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
                // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
                // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
                // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
                // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
                // java.util.concurrent.FutureTask.run(FutureTask.java:266)
                // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
                // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
                // java.lang.Thread.run(Thread.java:750)
            }
        } catch (Throwable t) {
            // Need to catch declared exceptions
        }
    }

    @Test(timeout = 4000)
    public void test13468() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Character character0 = new Character('%');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        MockFile mockFile0 = new MockFile("");
        MockFile mockFile1 = new MockFile(mockFile0, "_0}DIdIc>R");
        Path path0 = mockFile1.toPath();
        Charset charset0 = null;
        // Undeclared exception!
        try {
            cSVFormat1.MYSQL.print(path0, (Charset) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test13569() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
        cSVFormat0.POSTGRESQL_TEXT.hashCode();
        cSVFormat2.INFORMIX_UNLOAD.withFirstRecordAsHeader();
        CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("8%_F&&?:?[Cv).[{ZNK");
        cSVFormat4.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);
        cSVFormat4.getAutoFlush();
        // Undeclared exception!
        try {
            cSVFormat1.withEscape('j');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The escape character and the delimiter cannot be the same ('j')
        }
    }

    @Test(timeout = 4000)
    public void test13870() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        cSVFormat2.MYSQL.withHeader(resultSet0);
        Class<Token.Type> class0 = Token.Type.class;
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
        // Undeclared exception!
        try {
            cSVFormat3.parse((Reader) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'reader' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test13971() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
        CSVFormat cSVFormat3 = cSVFormat2.withTrim();
        CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');
        CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
        CSVFormat cSVFormat6 = CSVFormat.newFormat('v');
        QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
        cSVFormat6.POSTGRESQL_CSV.withQuoteMode(quoteMode0);
        cSVFormat5.withTrim();
        CSVFormat cSVFormat7 = cSVFormat1.withCommentMarker('E');
        cSVFormat7.TDF.withIgnoreSurroundingSpaces();
        cSVFormat7.TDF.withSkipHeaderRecord(true);
        cSVFormat4.withQuote('E');
        cSVFormat3.getCommentMarker();
        MockFile mockFile0 = new MockFile((String) null, "");
        mockFile0.toPath();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "";
        stringArray0[1] = null;
        stringArray0[2] = "";
        stringArray0[3] = null;
        stringArray0[4] = null;
        stringArray0[5] = "";
        stringArray0[6] = null;
        // Undeclared exception!
        try {
            cSVFormat7.EXCEL.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: '' in [, null, , null, null, , null]
        }
    }

    @Test(timeout = 4000)
    public void test14172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
        char char0 = 'r';
        Character character0 = Character.valueOf('r');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        // Undeclared exception!
        try {
            cSVFormat2.withDelimiter('r');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the delimiter cannot be the same ('r')
        }
    }

    @Test(timeout = 4000)
    public void test14273() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        boolean boolean0 = false;
        cSVFormat1.MYSQL.withTrim(false);
        Character character0 = Character.valueOf('Z');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
        CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
        CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
        cSVFormat5.INFORMIX_UNLOAD_CSV.withDelimiter('@');
        cSVFormat5.withTrim(false);
        cSVFormat2.getTrim();
        cSVFormat4.getQuoteMode();
        cSVFormat0.withEscape('+');
        Short short0 = new Short((short) 3);
        MockFile mockFile0 = new MockFile("XVq");
        MockFile mockFile1 = new MockFile(mockFile0, "XVq");
        MockPrintStream mockPrintStream0 = null;
        try {
            mockPrintStream0 = new MockPrintStream(mockFile1, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // charsetName
        }
    }

    @Test(timeout = 4000)
    public void test14774() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
        boolean boolean0 = false;
        CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
        Class<QuoteMode> class0 = QuoteMode.class;
        cSVFormat3.withHeader(class0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CharBuffer charBuffer0 = CharBuffer.allocate(23);
        CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
        // Undeclared exception!
        try {
            charArrayWriter0.append((CharSequence) charBuffer1, 23, (-909));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test15175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
        cSVFormat0.getDelimiter();
        cSVFormat0.withIgnoreSurroundingSpaces();
        // Undeclared exception!
        try {
            cSVFormat0.withQuote('T');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The quoteChar character and the delimiter cannot be the same ('T')
        }
    }

    @Test(timeout = 4000)
    public void test15476() throws Throwable {
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote(character0);
        CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.getAllowMissingColumnNames();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
        CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
        cSVFormat0.getIgnoreEmptyLines();
        CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
        cSVFormat0.withTrailingDelimiter(true);
        CharBuffer charBuffer0 = CharBuffer.allocate(389);
        Object[] objectArray0 = new Object[5];
        objectArray0[0] = (Object) cSVFormat2;
        objectArray0[1] = (Object) cSVFormat4;
        Object object0 = new Object();
        objectArray0[2] = object0;
        objectArray0[3] = (Object) charBuffer0;
        objectArray0[4] = (Object) cSVFormat5;
        // Undeclared exception!
        try {
            cSVFormat3.printRecord(charBuffer0, objectArray0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // 389
        }
    }

    @Test(timeout = 4000)
    public void test15577() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.RFC4180.withAllowMissingColumnNames(false);
        cSVFormat2.withRecordSeparator('+');
        String string0 = "";
        boolean boolean0 = true;
        MockFileOutputStream mockFileOutputStream0 = null;
        try {
            mockFileOutputStream0 = new MockFileOutputStream("", true);
            fail("Expecting exception: FileNotFoundException");
        } catch (Throwable e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test15778() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
        CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
        char char0 = 'd';
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('d');
        cSVFormat2.MYSQL.withRecordSeparator('A');
        CharBuffer charBuffer0 = CharBuffer.allocate(124);
        cSVFormat3.println(charBuffer0);
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) cSVFormat3;
        objectArray0[1] = (Object) cSVFormat2;
        Object object0 = new Object();
        objectArray0[2] = object0;
        objectArray0[3] = (Object) cSVFormat3;
        objectArray0[4] = (Object) charBuffer0;
        String[] stringArray0 = new String[1];
        stringArray0[0] = "}z/p#S^>.VZ";
        cSVFormat1.POSTGRESQL_CSV.withHeader(stringArray0);
        objectArray0[5] = (Object) cSVFormat3;
        objectArray0[6] = (Object) cSVFormat1;
        // Undeclared exception!
        try {
            cSVFormat1.INFORMIX_UNLOAD_CSV.printRecord(charBuffer0, objectArray0);
            fail("Expecting exception: BufferOverflowException");
        } catch (BufferOverflowException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test15979() throws Throwable {
        CSVFormat.Predefined.values();
        boolean boolean0 = true;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
        boolean boolean1 = false;
        CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
        cSVFormat3.withRecordSeparator('q');
        String string0 = "";
        // Undeclared exception!
        try {
            MockFile.createTempFile("", "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Prefix string too short
        }
    }

    @Test(timeout = 4000)
    public void test16180() throws Throwable {
        CSVFormat.Predefined.values();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        char char0 = 's';
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('s');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withTrim();
        cSVFormat3.withDelimiter('s');
        MockFile mockFile0 = new MockFile(",J^},V^6EmI&EW@");
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter(mockFile0, "ZA:/<9n>N'=L&E!o");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (Throwable e) {
            //
            // ZA:/<9n>N'=L&E!o
        }
    }

    @Test(timeout = 4000)
    public void test16281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2058);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
        PrintStream printStream0 = mockPrintStream0.append('k');
        cSVFormat4.POSTGRESQL_TEXT.withIgnoreHeaderCase(false);
        cSVFormat3.print((Appendable) printStream0);
        CSVFormat cSVFormat5 = cSVFormat4.withNullString("zQPx-#,='oXg");
        CSVFormat cSVFormat6 = cSVFormat5.DEFAULT.withIgnoreEmptyLines(true);
        Class<QuoteMode> class0 = QuoteMode.class;
        cSVFormat5.MYSQL.withTrim(true);
        CSVFormat cSVFormat7 = cSVFormat6.withHeader(class0);
        cSVFormat7.INFORMIX_UNLOAD.println(printStream0);
        cSVFormat0.EXCEL.withFirstRecordAsHeader();
        cSVFormat5.withAllowMissingColumnNames(false);
        cSVFormat2.getRecordSeparator();
        cSVFormat2.withTrim(true);
        cSVFormat6.print((Appendable) printStream0);
        cSVFormat1.withIgnoreSurroundingSpaces(false);
        String[] stringArray0 = new String[8];
        stringArray0[0] = "\n";
        stringArray0[1] = "zQPx-#,='oXg";
        stringArray0[2] = "\n";
        stringArray0[3] = "zQPx-#,='oXg";
        stringArray0[4] = "\n";
        stringArray0[5] = "zQPx-#,='oXg";
        stringArray0[6] = "zQPx-#,='oXg";
        stringArray0[7] = "\n";
        // Undeclared exception!
        try {
            cSVFormat1.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: '
            // ' in [
            // , zQPx-#,='oXg,
            // , zQPx-#,='oXg,
            // , zQPx-#,='oXg, zQPx-#,='oXg,
            // ]
        }
    }

    @Test(timeout = 4000)
    public void test16682() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        StringReader stringReader0 = new StringReader("");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
        Object[] objectArray0 = new Object[2];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) cSVParser0;
        // Undeclared exception!
        try {
            cSVFormat0.printRecord(charBuffer0, objectArray0);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Override
    public void run83() {
        try {
            CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
            CSVFormat cSVFormat1 = cSVFormat0.withTrim();
            CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
            QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
            CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
            cSVFormat3.withIgnoreEmptyLines();
            char char0 = 'X';
            MockFile mockFile0 = new MockFile("");
            MockFile mockFile1 = new MockFile(mockFile0, "BkC :Zv.`J%x'$V$M}\"");
            Path path0 = mockFile1.toPath();
            Charset charset0 = Charset.defaultCharset();
            // Undeclared exception!
            try {
                cSVFormat0.EXCEL.print(path0, charset0);
                fail("Expecting exception: SecurityException");
            } catch (SecurityException e) {
                //
                // Security manager blocks (\"java.io.FilePermission\" \"/Users/elliottzackrone/IdeaProjects/defects4jprefix/BkC :Zv.`J%x'$V$M}\"\" \"write\")
                // java.lang.Thread.getStackTrace(Thread.java:1564)
                // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
                // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
                // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
                // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
                // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
                // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
                // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
                // java.nio.file.Files.newOutputStream(Files.java:216)
                // java.nio.file.Files.newBufferedWriter(Files.java:2860)
                // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
                // sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
                // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
                // java.lang.reflect.Method.invoke(Method.java:498)
                // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
                // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
                // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
                // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
                // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
                // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
                // java.util.concurrent.FutureTask.run(FutureTask.java:266)
                // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
                // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
                // java.lang.Thread.run(Thread.java:750)
            }
        } catch (Throwable t) {
            // Need to catch declared exceptions
        }
    }

    @Test(timeout = 4000)
    public void test16984() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "inputStream");
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
        CSVFormat cSVFormat3 = cSVFormat2.withTrim();
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        cSVFormat4.DEFAULT.hashCode();
        cSVFormat2.getTrailingDelimiter();
        cSVFormat3.getNullString();
        cSVFormat3.withTrailingDelimiter();
        cSVFormat0.getRecordSeparator();
        cSVFormat4.getHeaderComments();
        Class<Token.Type> class0 = Token.Type.class;
        cSVFormat4.RFC4180.withHeader(class0);
        // Undeclared exception!
        try {
            CSVFormat.Predefined.valueOf("org.apache.commons.csv.CSVParser");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.org.apache.commons.csv.CSVParser
        }
    }

    @Test(timeout = 4000)
    public void test17285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        String[] stringArray0 = new String[8];
        stringArray0[0] = "0q15 \"D$q";
        stringArray0[1] = "Qb4@fJ]jUX}3UyPT#S";
        stringArray0[2] = "";
        stringArray0[3] = "}E~rf-VM`u%*No'%K";
        stringArray0[4] = "string";
        cSVFormat1.INFORMIX_UNLOAD.format(stringArray0);
        stringArray0[5] = "";
        stringArray0[6] = "dHsd";
        stringArray0[7] = ":x";
        // Undeclared exception!
        try {
            cSVFormat1.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: '' in [0q15 \"D$q, Qb4@fJ]jUX}3UyPT#S, , }E~rf-VM`u%*No'%K, string, , dHsd, :x]
        }
    }

    @Test(timeout = 4000)
    public void test17986() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withIgnoreEmptyLines();
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat4 = cSVFormat3.withEscape('>');
        cSVFormat4.RFC4180.withAllowMissingColumnNames();
        cSVFormat4.getRecordSeparator();
        String[] stringArray0 = new String[6];
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".p8pJ;,");
        stringArray0[0] = null;
        stringArray0[1] = null;
        stringArray0[2] = null;
        stringArray0[3] = null;
        stringArray0[4] = null;
        stringArray0[5] = null;
        // Undeclared exception!
        try {
            cSVFormat2.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null]
        }
    }

    @Test(timeout = 4000)
    public void test18087() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
        char char0 = 'm';
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('m');
        CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
        boolean boolean0 = false;
        CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
        cSVFormat4.POSTGRESQL_TEXT.withSkipHeaderRecord(false);
        Character character0 = Character.valueOf('m');
        // Undeclared exception!
        try {
            cSVFormat4.withCommentMarker(character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start and the escape character cannot be the same ('m')
        }
    }

    @Test(timeout = 4000)
    public void test18188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('a');
        MockFile mockFile0 = new MockFile("", "");
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) cSVFormat0;
        objectArray0[1] = (Object) cSVFormat2;
        Object object0 = new Object();
        objectArray0[2] = object0;
        objectArray0[3] = (Object) cSVFormat1;
        Object object1 = new Object();
        objectArray0[4] = object1;
        Object object2 = new Object();
        objectArray0[5] = object2;
        objectArray0[6] = (Object) cSVFormat0;
        cSVFormat0.POSTGRESQL_TEXT.format(objectArray0);
        try {
            cSVFormat1.POSTGRESQL_CSV.print((File) mockFile0, (Charset) null);
            fail("Expecting exception: FileNotFoundException");
        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test18289() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        Character character0 = new Character('T');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
        CSVFormat cSVFormat4 = cSVFormat3.withQuote('#');
        CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
        cSVFormat5.withIgnoreHeaderCase();
        CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
        Character character1 = new Character('C');
        CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker(character1);
        CSVFormat cSVFormat8 = cSVFormat7.withNullString("");
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CharArrayWriter charArrayWriter1 = charArrayWriter0.append('C');
        cSVFormat8.print((Appendable) charArrayWriter1);
        CSVFormat cSVFormat9 = CSVFormat.INFORMIX_UNLOAD_CSV;
        cSVFormat9.withIgnoreEmptyLines(false);
        // Undeclared exception!
        try {
            CSVFormat.valueOf("Header:");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Header:
        }
    }

    @Test(timeout = 4000)
    public void test18490() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.withTrim(true);
        // Undeclared exception!
        try {
            cSVFormat1.parse((Reader) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Parameter 'reader' must not be null!
        }
    }

    @Test(timeout = 4000)
    public void test18591() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
        char char0 = '\\';
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('\\');
        cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(true);
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
        CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
        CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
        CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
        cSVFormat1.withDelimiter('\\');
        cSVFormat1.withAllowMissingColumnNames();
        CSVFormat cSVFormat6 = cSVFormat5.withTrim(false);
        Character character0 = new Character('w');
        cSVFormat6.withQuote(character0);
        cSVFormat6.withIgnoreEmptyLines();
        cSVFormat4.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase();
        cSVFormat5.withTrailingDelimiter(true);
        // Undeclared exception!
        try {
            CSVFormat.Predefined.valueOf("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
        }
    }

    @Test(timeout = 4000)
    public void test18692() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        cSVFormat0.withIgnoreHeaderCase(true);
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) quoteMode0;
        cSVFormat0.DEFAULT.withFirstRecordAsHeader();
        objectArray0[1] = (Object) cSVFormat0;
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
        cSVFormat2.withQuoteMode(quoteMode1);
        boolean boolean0 = true;
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test18793() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');
        cSVFormat0.equals(cSVFormat0);
        CSVFormat.Predefined.values();
        Charset charset0 = Charset.defaultCharset();
        // Undeclared exception!
        try {
            charset0.decode((ByteBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test18994() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');
        cSVFormat1.equals(cSVFormat0);
        CSVFormat.Predefined.values();
        Charset charset0 = Charset.defaultCharset();
        // Undeclared exception!
        try {
            charset0.decode((ByteBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test19095() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        char char0 = 'X';
        cSVFormat1.POSTGRESQL_CSV.withEscape('X');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        char char1 = '\"';
        CSVFormat cSVFormat3 = cSVFormat2.withEscape('\"');
        CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
        String[] stringArray0 = new String[0];
        cSVFormat4.withHeader(stringArray0);
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        cSVFormat1.getHeaderComments();
        CSVFormat cSVFormat5 = cSVFormat1.withNullString("AC");
        cSVFormat5.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
        cSVFormat5.withTrim(true);
        // Undeclared exception!
        try {
            cSVFormat1.withCommentMarker('D');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The comment start character and the delimiter cannot be the same ('D')
        }
    }

    @Test(timeout = 4000)
    public void test19696() throws Throwable {
        QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('\\');
        Object[] objectArray0 = new Object[5];
        objectArray0[0] = (Object) cSVFormat2;
        objectArray0[1] = (Object) cSVFormat0;
        objectArray0[2] = (Object) quoteMode0;
        objectArray0[3] = (Object) cSVFormat2;
        objectArray0[4] = (Object) cSVFormat1;
        CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
        Character character0 = new Character('5');
        cSVFormat3.POSTGRESQL_CSV.withQuote(character0);
        CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
        cSVFormat4.MYSQL.withAutoFlush(true);
        CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
        cSVFormat5.withTrim(true);
        // Undeclared exception!
        try {
            CSVFormat.valueOf("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
        }
    }

    @Test(timeout = 4000)
    public void test19897() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('#');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "";
        stringArray0[1] = "\" in ";
        stringArray0[2] = "";
        stringArray0[3] = "If<\"f}";
        stringArray0[4] = "";
        String string0 = "";
        stringArray0[5] = "";
        stringArray0[6] = "";
        stringArray0[7] = "H!du=P8qz\"xWUaWd";
        stringArray0[8] = "/%NAPPs'znEz";
        // Undeclared exception!
        try {
            cSVFormat3.withHeader(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The header contains a duplicate entry: '' in [, \" in , , If<\"f}, , , , H!du=P8qz\"xWUaWd, /%NAPPs'znEz]
        }
    }

    @Test(timeout = 4000)
    public void test20098() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withTrim();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        cSVFormat0.POSTGRESQL_CSV.withDelimiter('T');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
        boolean boolean0 = true;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        cSVFormat1.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat2.DEFAULT.withNullString("org.apache.commons.csv.Assertions");
        PipedReader pipedReader0 = new PipedReader(62);
        PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
        PipedReader pipedReader1 = null;
        try {
            pipedReader1 = new PipedReader(pipedWriter0, 48);
            fail("Expecting exception: IOException");
        } catch (Throwable e) {
            //
            // Already connected
        }
    }
}
