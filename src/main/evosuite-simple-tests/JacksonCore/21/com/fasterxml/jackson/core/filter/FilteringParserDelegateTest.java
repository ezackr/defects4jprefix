/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 19:22:33 GMT 2023
 */
package com.fasterxml.jackson.core.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import org.junit.runner.RunWith;

public class FilteringParserDelegateTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsBoolean(true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
        filteringParserDelegate0._lastClearedToken = jsonToken0;
        boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.hasTokenId((-3259));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
        filteringParserDelegate0._lastClearedToken = jsonToken0;
        int int0 = filteringParserDelegate0.getCurrentTokenId();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
        filteringParserDelegate0._currToken = jsonToken0;
        JsonToken jsonToken1 = filteringParserDelegate0.currentToken();
        assertFalse(jsonToken1.isStructStart());
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("^9a}P7053/!aNDw/");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonParser jsonParser0 = filteringParserDelegate0.skipChildren();
        assertFalse(jsonParser0.canReadObjectId());
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1413), (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 1, true);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonParser jsonParser0 = filteringParserDelegate0.skipChildren();
        assertEquals(0, jsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Unexpected problem: chain of filtered context broken", false);
        StringReader stringReader0 = new StringReader("Unexpected problem: chain of filtered context broken");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 854, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        String string0 = filteringParserDelegate0.getValueAsString("Unexpected problem: chain of filtered context broken");
        assertEquals("Unexpected problem: chain of filtered context broken", string0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        String string0 = filteringParserDelegate0.getValueAsString("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4742, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4742, 0, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        long long0 = filteringParserDelegate0.getValueAsLong(0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        long long0 = filteringParserDelegate0.getValueAsLong((long) 33);
        assertEquals(33L, long0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        long long0 = filteringParserDelegate0.getValueAsLong((-1L));
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 3);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, tokenFilter0, false, true);
        int int0 = filteringParserDelegate0.getValueAsInt(0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1334), 0, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        int int0 = filteringParserDelegate0.getValueAsInt((-1334));
        assertEquals((-1334), int0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        double double0 = filteringParserDelegate0.getValueAsDouble(0.0);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.Base64Variants");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        double double0 = filteringParserDelegate0.getValueAsDouble((-1.0));
        assertEquals((-1.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.getValueAsBoolean(true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4742, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4742, 0, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.getValueAsBoolean();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 3);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, tokenFilter0, false, true);
        JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
        assertEquals((-1L), jsonLocation0.getByteOffset());
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1334), 0, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        int int0 = filteringParserDelegate0.getTextOffset();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[6];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-2854), true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
        int int0 = filteringParserDelegate0.getTextLength();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        TokenFilterContext tokenFilterContext1 = new TokenFilterContext(118, tokenFilterContext0, tokenFilter0, true);
        filteringParserDelegate0._exposedContext = tokenFilterContext1;
        JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
        assertEquals("?", jsonStreamContext0.typeDesc());
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 8, (byte) 0, true);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, true, true);
        TokenFilter tokenFilter0 = filteringParserDelegate0.getFilter();
        assertNull(tokenFilter0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
        assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4742, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4742, 0, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
        assertEquals(4743, jsonLocation0.getColumnNr());
    }

    @Test(timeout = 4000)
    public void test02625() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        JsonStreamContext jsonStreamContext0 = filteringParserDelegate0._filterContext();
        assertEquals(0, jsonStreamContext0.getEntryCount());
    }

    @Test(timeout = 4000)
    public void test02726() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test02827() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1), 0, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1
        }
    }

    @Test(timeout = 4000)
    public void test02928() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream(128);
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 1);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, (TokenFilter) null, true, false);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
        }
    }

    @Test(timeout = 4000)
    public void test03029() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("MocHL'U`");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'MocHL': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 6]
        }
    }

    @Test(timeout = 4000)
    public void test03130() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1), 0, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.nextToken();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1
        }
    }

    @Test(timeout = 4000)
    public void test03231() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
        StringReader stringReader0 = new StringReader("n`\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4742, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4742, 0, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        try {
            filteringParserDelegate0.nextToken();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 2]
        }
    }

    @Test(timeout = 4000)
    public void test03332() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.hasTextCharacters();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test03433() throws Throwable {
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsString("Y-8_)Xx");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test03534() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test03635() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsLong();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test03736() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsInt(1422);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test03837() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsInt();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test03938() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsDouble((-469.0));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04039() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsDouble();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04140() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTokenLocation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04241() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTextCharacters();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04342() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getText();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04443() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0.getShortValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: UNKNOWN; line: 1, column: 1]
        }
    }

    @Test(timeout = 4000)
    public void test04544() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getNumberValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04645() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getNumberType();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04746() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getLongValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04847() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getIntValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04948() throws Throwable {
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getFloatValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05049() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getEmbeddedObject();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05150() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getDoubleValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05251() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getDecimalValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05352() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getCurrentLocation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05453() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getByteValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05554() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getBooleanValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05655() throws Throwable {
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getBinaryValue((Base64Variant) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05756() throws Throwable {
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getBigIntegerValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05857() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05958() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2890), 0, true);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        // Undeclared exception!
        try {
            filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -2890
        }
    }

    @Test(timeout = 4000)
    public void test06059() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(enumeration0).hasMoreElements();
        doReturn(bufferedInputStream0).when(enumeration0).nextElement();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 3);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        try {
            filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream closed
        }
    }

    @Test(timeout = 4000)
    public void test06160() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("aEq");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 49, 0, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 33, false);
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringGeneratorDelegate0._filterContext;
        try {
            filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'aEq': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 5]
        }
    }

    @Test(timeout = 4000)
    public void test06261() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test06362() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1334), 0, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1334
        }
    }

    @Test(timeout = 4000)
    public void test06463() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("^9a}P7053/!aNDw/");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('^' (code 94)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
        }
    }

    @Test(timeout = 4000)
    public void test06564() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        String string0 = filteringParserDelegate0.getCurrentName();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test06665() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonParser jsonParser0 = filteringParserDelegate0.skipChildren();
        assertNull(jsonParser0.getLastClearedToken());
    }

    @Test(timeout = 4000)
    public void test07066() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        // Undeclared exception!
        try {
            filteringParserDelegate0.nextToken();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07167() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0.nextToken();
        assertTrue(filteringParserDelegate0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test07268() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        // Undeclared exception!
        try {
            filteringParserDelegate0.nextToken();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07369() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("5");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        filteringParserDelegate0.nextToken();
        JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
        assertEquals(1, jsonLocation0.getColumnNr());
    }

    @Test(timeout = 4000)
    public void test07470() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
        filteringParserDelegate0._currToken = jsonToken0;
        filteringParserDelegate0.clearCurrentToken();
        assertFalse(filteringParserDelegate0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test07571() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        filteringParserDelegate0.clearCurrentToken();
        assertNull(filteringParserDelegate0.currentToken());
    }

    @Test(timeout = 4000)
    public void test07672() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.isExpectedStartObjectToken();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07773() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4742, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4742, 0, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07874() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4742, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4742, 0, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.hasToken((JsonToken) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07975() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08076() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 726, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 0, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
        boolean boolean0 = filteringParserDelegate0.hasTokenId(0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08177() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.hasTokenId(3);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08278() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08379() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1334), (-3232), true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        int int0 = filteringParserDelegate0.currentTokenId();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08480() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 3);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, tokenFilter0, false, true);
        double double0 = filteringParserDelegate0.getValueAsDouble(1.0);
        assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08581() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsLong(0L);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test08682() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "'\".B`|N=?]n$8{", true);
        StringReader stringReader0 = new StringReader("'\".B`|N=?]n$8{");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1375), 1505, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
        int int0 = filteringParserDelegate0.getValueAsInt();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08783() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1334), 0, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0.getBinaryValue((Base64Variant) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
            //  at [Source: UNKNOWN; line: 1, column: -1333]
        }
    }

    @Test(timeout = 4000)
    public void test08884() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getShortValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test08985() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTextLength();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09086() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
        // Undeclared exception!
        try {
            filteringParserDelegate0.readBinaryValue((OutputStream) byteArrayBuilder0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09187() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = new TokenFilter();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3321), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
        try {
            filteringParserDelegate0.getLongValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 1]
        }
    }

    @Test(timeout = 4000)
    public void test09288() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsBoolean();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09389() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.Base64Variants");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        TokenFilter tokenFilter1 = filteringParserDelegate0.getFilter();
        assertTrue(tokenFilter1.includeRawValue());
    }

    @Test(timeout = 4000)
    public void test09490() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        char[] charArray0 = filteringParserDelegate0.getTextCharacters();
        assertNull(charArray0);
    }

    @Test(timeout = 4000)
    public void test09591() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1334), (-3232), true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
        assertEquals((-1333), jsonLocation0.getColumnNr());
    }

    @Test(timeout = 4000)
    public void test09692() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("!r#[lz#x/HefLH=,8~");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0.getNumberType();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: UNKNOWN; line: 1, column: 1]
        }
    }

    @Test(timeout = 4000)
    public void test09793() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        double double0 = filteringParserDelegate0.getValueAsDouble();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09894() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.Base64Variants");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
        assertEquals((-1L), jsonLocation0.getByteOffset());
    }

    @Test(timeout = 4000)
    public void test09995() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("5");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        try {
            filteringParserDelegate0.getBigIntegerValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: (String)\"\"; line: 1, column: 1]
        }
    }

    @Test(timeout = 4000)
    public void test10096() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Internal error: failed to locate expected buffered tokens");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
        try {
            filteringParserDelegate0.getBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not of boolean type
            //  at [Source: UNKNOWN; line: 1, column: 1]
        }
    }

    @Test(timeout = 4000)
    public void test10197() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        int int0 = filteringParserDelegate0.getMatchCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test10298() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.Base64Variants");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        int int0 = filteringParserDelegate0.getValueAsInt(3);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test10499() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTextOffset();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test105100() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.overrideCurrentName("Ns{We._;phg'>");
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // Can not currently override name during filtering read
        }
    }

    @Test(timeout = 4000)
    public void test106101() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("kE");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2840, 33, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
        try {
            filteringParserDelegate0.getIntValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: UNKNOWN; line: 1, column: 2841]
        }
    }

    @Test(timeout = 4000)
    public void test107102() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.hasTextCharacters();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test108103() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 3);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, tokenFilter0, false, true);
        boolean boolean0 = filteringParserDelegate0.getValueAsBoolean(false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109104() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        StringReader stringReader0 = new StringReader("88|)~rvgY");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0.getDecimalValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: UNKNOWN; line: 1, column: 1]
        }
    }

    @Test(timeout = 4000)
    public void test110105() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        StringReader stringReader0 = new StringReader("");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        String string0 = filteringParserDelegate0.getText();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test111106() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 3);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, tokenFilter0, false, true);
        long long0 = filteringParserDelegate0.getValueAsLong();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test112107() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
        assertFalse(jsonStreamContext0.inArray());
    }

    @Test(timeout = 4000)
    public void test113108() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.Base64Variants");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        Object object0 = filteringParserDelegate0.getEmbeddedObject();
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test114109() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("={o0L|mch");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 176, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
        try {
            filteringParserDelegate0.getByteValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: UNKNOWN; line: 1, column: 1]
        }
    }

    @Test(timeout = 4000)
    public void test115110() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Unexpected problem: chain of filtered context broken");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1063, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        try {
            filteringParserDelegate0.getDoubleValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: UNKNOWN; line: 1, column: 1]
        }
    }

    @Test(timeout = 4000)
    public void test117111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 3);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, tokenFilter0, false, true);
        String string0 = filteringParserDelegate0.getValueAsString((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test119112() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("A");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 0, 1, true);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
        try {
            filteringParserDelegate0.getFloatValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: UNKNOWN; line: 1, column: 1]
        }
    }

    @Test(timeout = 4000)
    public void test120113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 3);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8DataInputJsonParser0, tokenFilter0, false, true);
        String string0 = filteringParserDelegate0.getValueAsString();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test121114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        StringReader stringReader0 = new StringReader("YzRdC3V0K!)*");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1155, 0, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0.getNumberValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not numeric, can not use numeric value accessors
            //  at [Source: UNKNOWN; line: 1, column: 1156]
        }
    }
}
