/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:49:41 GMT 2023
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        // Undeclared exception!
        try {
            HttpConnection.Response.execute((Connection.Request) null, (HttpConnection.Response) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Request must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        // Undeclared exception!
        try {
            HttpConnection.Response.execute((Connection.Request) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Request must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        // Undeclared exception!
        try {
            httpConnection_Response0.body();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Request must be executed (with .execute(), .get(), or .post() before getting response body
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        String[] stringArray0 = new String[12];
        stringArray0[0] = "Method must not be null";
        // Undeclared exception!
        try {
            connection0.data(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Data value must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        // Undeclared exception!
        try {
            connection0.postDataCharset("u<r-agent");
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // u<r-agent
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        // Undeclared exception!
        try {
            connection0.header("", "-$A';FJS!u\"w");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Header name must not be empty
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        try {
            connection0.get();
            fail("Expecting exception: MalformedURLException");
        } catch (MalformedURLException e) {
            //
            // Only http & https protocols supported
            //
            verifyException("org.jsoup.helper.HttpConnection$Response", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        // Undeclared exception!
        try {
            connection0.cookies((Map<String, String>) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cookie map must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        // Undeclared exception!
        try {
            HttpConnection.connect((URL) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // URL must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        assertEquals("4#", httpConnection_KeyVal0.key());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        httpConnection_KeyVal0.key("S+RmM<L0ei%");
        assertEquals("S+RmM<L0ei%", httpConnection_KeyVal0.value());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        // Undeclared exception!
        try {
            connection0.url((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must supply a valid URL
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.url(uRL0);
        assertSame(connection0, connection1);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        assertEquals("S+RmM<L0ei%", httpConnection_KeyVal0.value());
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        httpConnection_KeyVal0.value("ROvnX.t@( 8s9\"v9~");
        assertEquals("4#", httpConnection_KeyVal0.key());
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        // Undeclared exception!
        try {
            httpConnection_Response0.url((URL) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // URL must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        httpConnection_KeyVal0.inputStream((InputStream) sequenceInputStream0);
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
        assertEquals("4#", httpConnection_KeyVal0.key());
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
        assertEquals("S+RmM<L0ei%", httpConnection_KeyVal0.value());
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        hashMap0.put((String) null, linkedList0);
        httpConnection_Response0.processResponseHeaders(hashMap0);
        assertNull(httpConnection_Response0.contentType());
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        Locale locale0 = new Locale("", "T*w+\"We6~Sc5F1", "");
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
        hashMap0.put("title", list0);
        httpConnection_Response0.processResponseHeaders(hashMap0);
        assertEquals(1, hashMap0.size());
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        try {
            connection0.execute();
            fail("Expecting exception: MalformedURLException");
        } catch (MalformedURLException e) {
            //
            // Only http & https protocols supported
            //
            verifyException("org.jsoup.helper.HttpConnection$Response", e);
        }
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        // Undeclared exception!
        try {
            connection0.maxBodySize((-1841796721));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // maxSize must be 0 (unlimited) or larger
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        Connection.Response connection_Response0 = httpConnection_Response0.header("org.jsoup.nodes.Entities$1", "org.jsoup.nodes.Entities$1");
        Connection.Response connection_Response1 = httpConnection_Response0.removeHeader("org.jsoup.nodes.Entities$1");
        assertSame(connection_Response1, connection_Response0);
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Attributes attributes0 = new Attributes();
        Map<String, String> map0 = attributes0.dataset();
        Connection connection1 = connection0.cookies(map0);
        assertSame(connection1, connection0);
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        String[] stringArray0 = new String[0];
        Connection connection1 = connection0.data(stringArray0);
        assertSame(connection1, connection0);
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        String[] stringArray0 = new String[1];
        // Undeclared exception!
        try {
            connection0.data(stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must supply an even number of key value pairs
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(78);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("6=>eKn_pz5&~WdrR*<", "", (InputStream) pipedInputStream0);
        String string0 = httpConnection_KeyVal0.toString();
        assertEquals("6=>eKn_pz5&~WdrR*<=", string0);
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("0;1EV{AD @<s@^-", "|$+kkY&NC1%.#p*F?U");
        String string0 = httpConnection_KeyVal0.value();
        assertEquals("0;1EV{AD @<s@^-", httpConnection_KeyVal0.key());
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("0;1EV{AD @<s@^-", "|$+kkY&NC1%.#p*F?U");
        String string0 = httpConnection_KeyVal0.value();
        assertEquals("|$+kkY&NC1%.#p*F?U", string0);
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(78);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("6=>eKn_pz5&~WdrR*<", "", (InputStream) pipedInputStream0);
        httpConnection_KeyVal0.inputStream();
        assertEquals("", httpConnection_KeyVal0.value());
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("r55=Tq>J<Z)HU", "Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", (InputStream) null);
        String string0 = httpConnection_KeyVal0.key();
        assertEquals("r55=Tq>J<Z)HU", string0);
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("r55=Tq>J<Z)HU", "Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", (InputStream) null);
        String string0 = httpConnection_KeyVal0.key();
        assertEquals("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", httpConnection_KeyVal0.value());
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        int int0 = httpConnection_Response0.statusCode();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2935() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        String string0 = httpConnection_Response0.charset();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3036() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        // Undeclared exception!
        try {
            httpConnection_Response0.bodyAsBytes();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Request must be executed (with .execute(), .get(), or .post() before getting response body
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3137() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        String string0 = httpConnection_Response0.contentType();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3238() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        String string0 = httpConnection_Response0.statusMessage();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3339() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        // Undeclared exception!
        try {
            httpConnection_Response0.parse();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Request must be executed (with .execute(), .get(), or .post() before parsing response
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3440() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.referrer("user-agent");
        assertSame(connection1, connection0);
    }

    @Test(timeout = 4000)
    public void test3541() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.header("Content-Encoding", "4p-ijQ'56@U6dQ");
        assertSame(connection1, connection0);
    }

    @Test(timeout = 4000)
    public void test3642() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        assertTrue(connection_Request0.validateTLSCertificates());
    }

    @Test(timeout = 4000)
    public void test3643() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        assertTrue(connection_Request0.followRedirects());
    }

    @Test(timeout = 4000)
    public void test3644() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        assertEquals(1048576, connection_Request0.maxBodySize());
    }

    @Test(timeout = 4000)
    public void test3645() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        assertFalse(connection_Request0.ignoreContentType());
    }

    @Test(timeout = 4000)
    public void test3646() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        assertEquals("UTF-8", connection_Request0.postDataCharset());
    }

    @Test(timeout = 4000)
    public void test3647() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        assertFalse(connection_Request0.ignoreHttpErrors());
    }

    @Test(timeout = 4000)
    public void test3648() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        assertEquals(3000, connection_Request0.timeout());
    }

    @Test(timeout = 4000)
    public void test3749() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Method connection_Method0 = Connection.Method.PATCH;
        Connection connection1 = connection0.method(connection_Method0);
        assertSame(connection1, connection0);
    }

    @Test(timeout = 4000)
    public void test3850() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        // Undeclared exception!
        try {
            connection0.data((String) null, (String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Data key must not be empty
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3951() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.timeout(48);
        assertSame(connection0, connection1);
    }

    @Test(timeout = 4000)
    public void test4052() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        // Undeclared exception!
        try {
            connection0.postDataCharset("put");
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // put
            //
            verifyException("org.jsoup.helper.HttpConnection$Request", e);
        }
    }

    @Test(timeout = 4000)
    public void test4153() throws Throwable {
        // Undeclared exception!
        try {
            HttpConnection.connect("`^Bp5z}U|}|We");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Malformed URL: `^Bp5z}U|}|We
            //
            verifyException("org.jsoup.helper.HttpConnection", e);
        }
    }

    @Test(timeout = 4000)
    public void test4254() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.maxBodySize(48);
        assertSame(connection0, connection1);
    }

    @Test(timeout = 4000)
    public void test4355() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        try {
            connection0.get();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // HTTP error fetching URL
            //
            verifyException("org.jsoup.helper.HttpConnection$Response", e);
        }
    }

    @Test(timeout = 4000)
    public void test4456() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.cookie("user-agent", "[6fu2");
        assertSame(connection0, connection1);
    }

    @Test(timeout = 4000)
    public void test4557() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        Connection.Response connection_Response0 = httpConnection_Response0.removeCookie("map");
        assertSame(connection_Response0, httpConnection_Response0);
    }

    @Test(timeout = 4000)
    public void test4658() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.validateTLSCertificates(true);
        assertSame(connection1, connection0);
    }

    @Test(timeout = 4000)
    public void test4759() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.ignoreContentType(false);
        assertSame(connection1, connection0);
    }

    @Test(timeout = 4000)
    public void test4860() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        try {
            connection0.execute();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // HTTP error fetching URL
            //
            verifyException("org.jsoup.helper.HttpConnection$Response", e);
        }
    }

    @Test(timeout = 4000)
    public void test4961() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Parser parser0 = Parser.xmlParser();
        Connection connection1 = connection0.parser(parser0);
        assertSame(connection0, connection1);
    }

    @Test(timeout = 4000)
    public void test5062() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.data("(m)", "j?oGgW_86|C", (InputStream) null);
        assertSame(connection1, connection0);
    }

    @Test(timeout = 4000)
    public void test5163() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        try {
            connection0.post();
            fail("Expecting exception: UnknownServiceException");
        } catch (UnknownServiceException e) {
            //
            // protocol doesn't support output
            //
            verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
        }
    }

    @Test(timeout = 4000)
    public void test5264() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.ignoreHttpErrors(true);
        assertSame(connection1, connection0);
    }

    @Test(timeout = 4000)
    public void test5365() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.followRedirects(false);
        assertSame(connection1, connection0);
    }
}
