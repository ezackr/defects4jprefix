/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:41:43 GMT 2023
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.regex.Pattern;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

public class ElementTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = new Document("");
        Elements elements0 = document0.getElementsByAttributeValueMatching("6W`u@AC s8.y'", "6W`u@AC s8.y'");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Tag tag0 = Tag.valueOf("String must not be empty");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000055", attributes0);
        Elements elements0 = formElement0.elements();
        Element element0 = formElement0.insertChildren(0, elements0);
        assertSame(formElement0, element0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Document document0 = new Document("output");
        String string0 = document0.toString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Document document0 = new Document("+h");
        document0.tagName("g*yh>x?:wx=)VJ");
        assertEquals("g*yh>x?:wx=)vj", document0.tagName());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Tag tag0 = Tag.valueOf("br");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "body", attributes0);
        Tag tag1 = formElement0.tag();
        assertFalse(tag1.isData());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Tag tag0 = Tag.valueOf("body");
        TextNode textNode0 = TextNode.createFromEncoded("body", "formnovalidate");
        Attributes attributes0 = textNode0.attributes();
        FormElement formElement0 = new FormElement(tag0, "body", attributes0);
        Element element0 = formElement0.prepend("1co_b");
        assertTrue(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Document document0 = new Document("");
        Element element0 = document0.prepend("");
        assertSame(document0, element0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Tag tag0 = Tag.valueOf("#ja@KT#73XC");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "#ja@KT#73XC", attributes0);
        Element element1 = element0.prependChild(element0);
        Element element2 = element1.parent();
        assertEquals(0, element2.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Document document0 = new Document("reversed");
        Elements elements0 = document0.getElementsMatchingText("reversed");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Document document0 = new Document("pEqpZb${bEh%!a*");
        Pattern pattern0 = Pattern.compile("pEqpZb${bEh%!a*", 58);
        Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Document document0 = new Document("t ,(");
        Elements elements0 = document0.getElementsContainingOwnText("");
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Document document0 = new Document("body");
        Elements elements0 = document0.getElementsByIndexGreaterThan(659);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Document document0 = new Document("DpoM-as|6AmfaJ[$`'");
        Pattern pattern0 = Pattern.compile("big");
        Elements elements0 = document0.getElementsByAttributeValueMatching("_?9\"HSgP", pattern0);
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Tag tag0 = Tag.valueOf("html");
        Element element0 = new Element(tag0, "html");
        Element element1 = element0.clone();
        assertTrue(element1.equals((Object) element0));
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Document document0 = new Document("");
        Element element0 = document0.clone();
        assertNotSame(element0, document0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Document document0 = new Document("class");
        Locale locale0 = Locale.ENGLISH;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Element element0 = document0.classNames(set0);
        assertFalse(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Document document0 = new Document("");
        Set<String> set0 = document0.classNames();
        assertFalse(set0.contains(""));
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Tag tag0 = Tag.valueOf("[jyKV>");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "[jyKV>", attributes0);
        Element element0 = formElement0.toggleClass("[jyKV>");
        String string0 = element0.className();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "DEa1gj:Z;G ", attributes0);
        Element element0 = formElement0.appendElement("body");
        assertEquals("body", element0.nodeName());
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "DEa1gj:Z;G ", attributes0);
        Element element0 = formElement0.appendElement("body");
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Document document0 = new Document("String must not be empty");
        Element element0 = document0.append("");
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        Tag tag0 = Tag.valueOf(":nth-child(%d)");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, ":nth-child(%d)", attributes0);
        // Undeclared exception!
        try {
            element0.wrap("2aU(8*wN9L");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$Tag");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "k:{zgh;sv!gwxui>g", attributes0);
        // Undeclared exception!
        try {
            element0.toggleClass((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        Tag tag0 = Tag.valueOf("E6v,kRS9z");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "E6v,kRS9z", attributes0);
        // Undeclared exception!
        try {
            formElement0.select("E6v,kRS9z");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Could not parse query 'kRS9z': unexpected token at '9z'
        }
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        Document document0 = new Document("String must not be empty");
        // Undeclared exception!
        try {
            document0.select("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // String must not be empty
        }
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        Tag tag0 = Tag.valueOf("W<5#u?{W");
        TextNode textNode0 = new TextNode("W<5#u?{W", "W<5#u?{W");
        Attributes attributes0 = textNode0.attributes();
        FormElement formElement0 = new FormElement(tag0, "W<5#u?{W", attributes0);
        // Undeclared exception!
        try {
            formElement0.removeClass((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        Tag tag0 = Tag.valueOf("M:it7!U*");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "hw[}g|+GD8|0>X", attributes0);
        // Undeclared exception!
        try {
            element0.prependChild((Node) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        Document document0 = new Document("InFrameset");
        // Undeclared exception!
        try {
            document0.prepend((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        Tag tag0 = Tag.valueOf("vFXBBE*jjl[oJ94wZ");
        TextNode textNode0 = TextNode.createFromEncoded("Insert position out of bounds.", "vFXBBE*jjl[oJ94wZ");
        Attributes attributes0 = textNode0.attributes();
        FormElement formElement0 = new FormElement(tag0, "5@", attributes0);
        // Undeclared exception!
        try {
            formElement0.getElementsMatchingOwnText((Pattern) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Tag tag0 = Tag.valueOf("yRt2'T");
        Element element0 = new Element(tag0, "");
        // Undeclared exception!
        try {
            element0.getElementsByAttributeValueNot("yRt2'T", "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // String must not be empty
        }
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Document document0 = new Document("org.jsoup.select.Evaluator");
        // Undeclared exception!
        try {
            document0.getElementsByAttributeValueMatching((String) null, (Pattern) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Document document0 = new Document("@Qn(k@");
        // Undeclared exception!
        try {
            document0.getElementsByAttributeValueEnding("@Qn(k@", "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // String must not be empty
        }
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Document document0 = new Document("");
        // Undeclared exception!
        try {
            document0.getElementsByAttributeValue("", "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // String must not be empty
        }
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Document document0 = new Document("DpoM-as|6AmfaJ[$`'");
        // Undeclared exception!
        try {
            document0.getElementsByAttribute("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // String must not be empty
        }
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Document document0 = new Document("dfn");
        // Undeclared exception!
        try {
            document0.firstElementSibling();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Document document0 = new Document("");
        // Undeclared exception!
        try {
            document0.child(35);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 35, Size: 0
        }
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Document document0 = new Document("P");
        // Undeclared exception!
        try {
            document0.child((-1117));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Tag tag0 = Tag.valueOf("%|r<");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "%|r<", attributes0);
        // Undeclared exception!
        try {
            element0.before("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Document document0 = new Document("+x4RH@Amv\u00079P&");
        // Undeclared exception!
        try {
            document0.attr("+x4RH@Amv\u00079P&", (String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Tag tag0 = Tag.valueOf("br");
        TextNode textNode0 = TextNode.createFromEncoded("p3m##Y#<5_6P62Ku3N", "&y2/ql|slJ");
        Attributes attributes0 = textNode0.attributes();
        FormElement formElement0 = new FormElement(tag0, "k_A", attributes0);
        // Undeclared exception!
        try {
            formElement0.append((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Tag tag0 = Tag.valueOf("itemscope");
        Element element0 = null;
        try {
            element0 = new Element(tag0, "itemscope", (Attributes) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Element element0 = null;
        try {
            element0 = new Element((Tag) null, "B#H2Cf1%+I/(e");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Document document0 = new Document("");
        String string0 = document0.html();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Document document0 = new Document("#=Q_1K'KenM!,");
        Element element0 = document0.val("#=Q_1K'KenM!,");
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Document document0 = new Document("XPg)rWY^Nm.b5+/");
        String string0 = document0.val();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Document document0 = new Document("");
        Integer integer0 = document0.elementSiblingIndex();
        assertEquals(0, (int) integer0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        Document document0 = new Document("pEqpZb${bEh%!a*");
        String string0 = document0.cssSelector();
        assertEquals("#root", string0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        Document document0 = new Document("+h");
        LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
        // Undeclared exception!
        try {
            document0.insertChildren(65536, linkedList0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
        }
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Tag tag0 = Tag.valueOf("yRt2'T");
        Element element0 = new Element(tag0, "");
        List<TextNode> list0 = element0.textNodes();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Document document0 = new Document("#=Q_1K'KenM!,");
        Elements elements0 = document0.getElementsByTag("CRH[K");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        Document document0 = new Document("");
        Pattern pattern0 = Pattern.compile("");
        Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        Document document0 = new Document("");
        Elements elements0 = document0.getElementsMatchingText("");
        assertFalse(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        Document document0 = new Document("");
        boolean boolean0 = document0.isBlock();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        Tag tag0 = Tag.valueOf("}a,n}hgw");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "}a,n}hgw", attributes0);
        Elements elements0 = formElement0.parents();
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        Document document0 = new Document("");
        Elements elements0 = document0.getElementsByAttribute("6W`u@AC s8.y'");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        Tag tag0 = Tag.valueOf("(XL7[");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "(XL7[", attributes0);
        Element element0 = formElement0.empty();
        assertSame(element0, formElement0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        Document document0 = new Document("C}ffUrV~rm4dY");
        // Undeclared exception!
        try {
            document0.tagName((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Tag name must not be empty.
        }
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        Document document0 = new Document("#=Q_1K'KenM!,");
        Elements elements0 = document0.getElementsByAttributeValueContaining("meta", "6cz");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        Document document0 = new Document("#=Q_1K'KenM!,");
        // Undeclared exception!
        try {
            document0.getElementsMatchingOwnText("5NN[k2");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Pattern syntax error: 5NN[k2
        }
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        Tag tag0 = Tag.valueOf("[jyKV>");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "[jyKV>", attributes0);
        String string0 = formElement0.nodeName();
        assertEquals("[jykv>", string0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        Document document0 = new Document("output");
        document0.appendText("9]T<;)");
        Elements elements0 = document0.children();
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        Document document0 = new Document("html");
        Elements elements0 = document0.getElementsByAttributeValueStarting("html", "     ");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        Document document0 = new Document("u@;uw1LS`{,s8u`5");
        Elements elements0 = document0.getElementsByClass("systemId");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        Document document0 = new Document("");
        Map<String, String> map0 = document0.dataset();
        assertEquals(0, map0.size());
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        TextNode textNode0 = new TextNode("cite", "cite");
        boolean boolean0 = Element.preserveWhitespace(textNode0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        Document document0 = new Document("P");
        Element element0 = document0.previousElementSibling();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        Tag tag0 = Tag.valueOf("[jyKV>");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "[jyKV>", attributes0);
        formElement0.toggleClass("[jyKV>");
        String string0 = formElement0.cssSelector();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        Tag tag0 = Tag.valueOf("[jyKV>");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "[jyKV>", attributes0);
        Elements elements0 = formElement0.elements();
        // Undeclared exception!
        try {
            formElement0.insertChildren((-3), elements0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
        }
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        Tag tag0 = Tag.valueOf("[jyKV>");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "[jyKV>", attributes0);
        Elements elements0 = formElement0.getElementsByAttributeStarting("RWM0zO.\"z$c2 ");
        Element element0 = formElement0.insertChildren((-1), elements0);
        assertSame(formElement0, element0);
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        Document document0 = new Document("String must not be empty");
        Elements elements0 = document0.getElementsByAttributeValueNot("BMYm&8I^d1}M;", "String must not be empty");
        assertFalse(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        Tag tag0 = Tag.valueOf("l");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "", attributes0);
        // Undeclared exception!
        try {
            element0.after((Node) element0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        Tag tag0 = Tag.valueOf("[jyKV>");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "[jyKV>", attributes0);
        Elements elements0 = formElement0.getElementsByAttributeValueEnding("[jyKV>", "[jyKV>");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        Document document0 = new Document("");
        Elements elements0 = document0.getElementsByIndexEquals((-1282));
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        Tag tag0 = Tag.valueOf("[jyKV>");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "[jyKV>", attributes0);
        // Undeclared exception!
        try {
            formElement0.after("RWM0zO.\"z$c2 ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
        }
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        Document document0 = new Document("String must not be empty");
        document0.addClass("String must not be empty");
        Set<String> set0 = document0.classNames();
        assertEquals(1, set0.size());
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        Tag tag0 = Tag.valueOf("l");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "", attributes0);
        Element element1 = element0.prependText("9");
        assertEquals("l", element1.tagName());
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        Document document0 = new Document("A;7c}W35$8 Oo<n");
        // Undeclared exception!
        try {
            document0.normalise();
            //  fail("Expecting exception: NoSuchElementException");
            // Unstable assertion
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        // Undeclared exception!
        try {
            Document.createShell("");
            //  fail("Expecting exception: NoSuchElementException");
            // Unstable assertion
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
