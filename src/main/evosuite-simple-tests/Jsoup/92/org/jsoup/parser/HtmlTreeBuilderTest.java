/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 06:49:08 GMT 2023
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.List;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

public class HtmlTreeBuilderTest {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = htmlTreeBuilder0.getHeadElement();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("<htmlt\n <hTad />\n <boy>\n  P%u6I4-YQ+\n </body>\n/html>", "<htmlt\n <hTad />\n <boy>\n  P%u6I4-YQ+\n </body>\n/html>");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.clearStackToTableBodyContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.toString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("<html>\n <hTad />\n <body>\n  P%u6I4-YQ+\n </body>\n</h,ml>", "<html>\n <hTad />\n <body>\n  P%u6I4-YQ+\n </body>\n</h,ml>");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Attributes attributes0 = new Attributes();
        Tag tag0 = Tag.valueOf("tr");
        FormElement formElement0 = new FormElement(tag0, "<WT[hQBXu<|8M5X", attributes0);
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("tr", formElement0, "tr", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.generateImpliedEndTags();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insertMarkerToFormattingElements();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        FormElement formElement0 = htmlTreeBuilder0.getFormElement();
        assertNull(formElement0);
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.clearStackToTableRowContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        Document document0 = Parser.parse("<Ul<", "<Ul<");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1412() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        String[] stringArray0 = new String[5];
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inScope(stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1513() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.getDocument();
        assertNull(document0);
    }

    @Test(timeout = 4000)
    public void test1614() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        String string0 = htmlTreeBuilder0.getBaseUri();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1715() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("!t.u", "!t.u");
        // Undeclared exception!
        try {
            htmlTreeBuilder0.isInActiveFormattingElements(document0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1816() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("<html>\n <hTad />\n <body>\n  P%u6I4-YQ+\n </body>\n</html>", "<html>\n <hTad />\n <body>\n  P%u6I4-YQ+\n </body>\n</html>");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1917() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("w1fiaf</}v<$m09f", "w1fiaf</}v<$m09f");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2018() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inTableScope("$Z)*4fWx6')/dt#P");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2119() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("title");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "title", attributes0);
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("p\")", formElement0, "title", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2220() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("style");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "style", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("style", formElement0, "/>pOB:Nj8=ZiIx;", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2321() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("script", parseSettings0);
        Element element0 = new Element(tag0, "script");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("head", element0, "head", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2422() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Document.createShell("R!CG");
        Parser parser0 = new Parser(htmlTreeBuilder0);
        document0.tagName("noscript");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("R!CG", document0, "noscript", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2523() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Element element0 = new Element("plaintext");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("plaintext", element0, "plaintext", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2624() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("i", "k8/pRo6");
        htmlTreeBuilder0.maybeSetBaseUri(document0);
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test2725() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("frameset");
        Element element0 = new Element(tag0, "SVU");
        Parser parser0 = Parser.xmlParser();
        Parser parser1 = parser0.setTrackErrors(100);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("SVU", element0, "SVU", parser1);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2826() throws Throwable {
        Document document0 = Parser.parse("<html>\n <head />\n <body>\n  :matches(%s)\n </body>\n</html>", "<html>\n <head />\n <body>\n  :matches(%s)\n </body>\n</html>");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2927() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("V<xhMrH|n5X", (Element) null, "V<xhMrH|n5X", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.selfClosing = true;
        token_StartTag0.nameAttr("br", (Attributes) null);
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3028() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("V<xhMvXu<|8<5X", (Element) null, "V<xhMvXu<|8<5X", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Token.StartTag token_StartTag1 = (Token.StartTag) token_StartTag0.name("V<xhMvXu<|8<5X");
        FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
        assertEquals(1, formElement0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3129() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("V<xhvXu<|8<5X", (Element) null, "V<xhvXu<|8<5X", parser0);
        Token.CData token_CData0 = new Token.CData("V<xhvXu<|8<5X");
        htmlTreeBuilder0.insert(token_CData0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test3230() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("V<xhv\"uo|h<58", (Element) null, "V<xhv\"uo|h<58", parser0);
        htmlTreeBuilder0.setFosterInserts(true);
        Element element0 = htmlTreeBuilder0.insertStartTag("V<xhv\"uo|h<58");
        assertEquals(2, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3331() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("#5s %Mt8)0", (Element) null, "PFxYQBXu<|=M5H", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("select");
        assertEquals("PFxYQBXu<|=M5H", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3332() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("#5s %Mt8)0", (Element) null, "PFxYQBXu<|=M5H", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("select");
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("#5s %Mt8)0", (Element) null, "PFxYQBXu<|=M5H", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("select");
        assertEquals("select", element0.tagName());
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("Q;52~%>SQ");
        CDataNode cDataNode0 = new CDataNode("input");
        Attributes attributes0 = cDataNode0.attributes();
        FormElement formElement0 = new FormElement(tag0, "Q;52~%>SQ", attributes0);
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("input", formElement0, "input", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.nameAttr("fieldset", attributes0);
        Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
        assertEquals("fieldset", element0.nodeName());
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("i", "k8/pRo6");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("table", document0, "U8_NlZ9&./bWBc.x", parser0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.aboveOnStack(document0);
            fail("Expecting exception: AssertionError");
        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("WavY", (Element) null, "WavY", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("WavY", (Element) null, "WavY", parser0);
        boolean boolean0 = htmlTreeBuilder0.removeFromStack((Element) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Document document0 = Parser.parseBodyFragmentRelaxed("Split of%sethmust be not be negative", "Split of%sethmust be not be negative");
        htmlTreeBuilder0.parseFragment("Split of%sethmust be not be negative", document0, "Split of%sethmust be not be negative", parser0);
        Element element0 = htmlTreeBuilder0.currentElement();
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Document document0 = Parser.parseBodyFragmentRelaxed("Split of%sethmust be not be negative", "Split of%sethmust be not be negative");
        htmlTreeBuilder0.parseFragment("Split of%sethmust be not be negative", document0, "Split of%sethmust be not be negative", parser0);
        Element element0 = htmlTreeBuilder0.currentElement();
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
        assertEquals("html", element0.nodeName());
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("Ab{mmkZr", "Ab{mmkZr");
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("6z", document0, "Ab{mmkZr", parser0);
        String[] stringArray0 = new String[3];
        stringArray0[1] = "6z";
        stringArray0[2] = "6z";
        htmlTreeBuilder0.popStackToClose(stringArray0);
        assertEquals(3, stringArray0.length);
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("q|]'M", (Element) null, "q|]'M", parser0);
        String[] stringArray0 = new String[7];
        stringArray0[0] = "html";
        stringArray0[1] = "q|]'M";
        stringArray0[3] = "q|]'M";
        htmlTreeBuilder0.popStackToClose(stringArray0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        Document document0 = new Document("<WhQBXu<E8M5X");
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("<WhQBXu<E8M5X", document0, "<WhQBXu<E8M5X", parser0);
        htmlTreeBuilder0.popStackToBefore("<WhQBXu<E8M5X");
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("Ab{mmkZr", "Ab{mmkZr");
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("6z", document0, "Ab{mmkZr", parser0);
        htmlTreeBuilder0.insertStartTag("6z");
        htmlTreeBuilder0.popStackToBefore("6z");
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("i", "k8/pRo6");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("table", document0, "U8_NlZ9&./bWBc.x", parser0);
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("i", "k8/pRo6");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("table", document0, "U8_NlZ9&./bWBc.x", parser0);
        htmlTreeBuilder0.insertStartTag("table");
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ArrayList<Element> arrayList0 = new ArrayList<Element>();
        htmlTreeBuilder0.stack = arrayList0;
        Document document0 = Parser.parseBodyFragment("+$<WhQBXu<|8M5X", "}ENzsZ");
        arrayList0.add((Element) document0);
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("i", "k8/pRo6");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("table", document0, "U8_NlZ9&./bWBc.x", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("i", "k8/pRo6");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("table", document0, "U8_NlZ9&./bWBc.x", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("table");
        htmlTreeBuilder0.push(document0);
        htmlTreeBuilder0.push(element0);
        Element element1 = htmlTreeBuilder0.aboveOnStack(document0);
        assertEquals("table", element1.tagName());
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("i", "k8/pRo6");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("table", document0, "U8_NlZ9&./bWBc.x", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("table");
        htmlTreeBuilder0.push(document0);
        htmlTreeBuilder0.push(element0);
        Element element1 = htmlTreeBuilder0.aboveOnStack(document0);
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = new Document("@s");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("@s", document0, "@s", parser0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insertOnStackAfter(document0, document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
        }
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("DoctypePublicIdentifier_doubleQuoted", "DoctypePublicIdentifier_doubleQuoted");
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("DoctypePublicIdentifier_doubleQuoted", document0, "DoctypePublicIdentifier_doubleQuoted", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        CDataNode cDataNode0 = new CDataNode("]dg|4J_~xpDZE&^bw");
        Attributes attributes0 = cDataNode0.attributes();
        token_StartTag0.nameAttr("DoctypePublicIdentifier_doubleQuoted", attributes0);
        FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
        htmlTreeBuilder0.insertOnStackAfter(formElement0, document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("DoctypePublicIdentifier_doubleQuoted", (Element) null, "DoctypePublicIdentifier_doubleQuoted", parser0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
        }
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("", (Element) null, "", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragment("script", "script");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("WzN", document0, "script", parser0);
        htmlTreeBuilder0.popStackToClose("WzN");
        htmlTreeBuilder0.resetInsertionMode();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Document document0 = new Document("7s4tV");
        Element element0 = document0.tagName("select");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("me9nw", element0, "select", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Document.createShell("+9YF~%E");
        document0.tagName("td");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("+9YF~%E", document0, "`_m*b,", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("th", (Element) null, "th", parser0);
        htmlTreeBuilder0.insertStartTag("th");
        htmlTreeBuilder0.resetInsertionMode();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("th");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "th", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("th", formElement0, "th", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Attributes attributes0 = new Attributes();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
        Tag tag0 = Tag.valueOf("tbody", parseSettings0);
        FormElement formElement0 = new FormElement(tag0, "tbody", attributes0);
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("tbody", formElement0, "nav", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("thead");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "thead", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("th", formElement0, "th", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5761() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = new Element("tfoot");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("me9nw", element0, "me9nw", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5862() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("caption");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "caption", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("caption", formElement0, "caption", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5963() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Element element0 = new Element("colgroup");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("colgroup", element0, "colgroup", parser0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test6064() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("table");
        FormElement formElement0 = new FormElement(tag0, "table", (Attributes) null);
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("#root", formElement0, "table", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6165() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragment("R!CG", "R!CG");
        Parser parser0 = Parser.xmlParser();
        Element element0 = document0.head();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("R!CG", element0, "R!CG", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6266() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = new Document("InFrameset");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("InFrameset", document0, "InFrameset", parser0);
        Element element0 = htmlTreeBuilder0.currentElement();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("InFrameset", element0, "InFrameset", parser0);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test6267() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = new Document("InFrameset");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("InFrameset", document0, "InFrameset", parser0);
        Element element0 = htmlTreeBuilder0.currentElement();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("InFrameset", element0, "InFrameset", parser0);
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test6368() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("V<xhMBXu<|8<5X", (Element) null, "V<xhMBXu<|8<5X", parser0);
        htmlTreeBuilder0.resetInsertionMode();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ArrayList<Element> arrayList0 = new ArrayList<Element>();
        htmlTreeBuilder0.stack = arrayList0;
        boolean boolean0 = htmlTreeBuilder0.inScope("+$<WhQBXu<|8M5X");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("V<xhvXu}|L8<5X", (Element) null, "ol", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("ol");
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test6571() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("V<xhvXu}|L8<5X", (Element) null, "ol", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("ol");
        assertEquals("ol", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test6572() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("V<xhvXu}|L8<5X", (Element) null, "ol", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("ol");
        boolean boolean0 = htmlTreeBuilder0.inListItemScope("V<xhvXu}|L8<5X");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6673() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("frameset");
        Element element0 = new Element(tag0, "SVU");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("SVU", element0, "SVU", parser0);
        htmlTreeBuilder0.popStackToClose("SVU");
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inSelectScope("blockquote");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Should not be reachable
        }
    }

    @Test(timeout = 4000)
    public void test6774() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6775() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parser0);
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("body");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6876() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("<xMlj <x^gk#<|5", (Element) null, "optgroup", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("optgroup");
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test6877() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("<xMlj <x^gk#<|5", (Element) null, "optgroup", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("optgroup");
        assertEquals("optgroup", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test6878() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("<xMlj <x^gk#<|5", (Element) null, "optgroup", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("optgroup");
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("<xMlj <x^gk#<|5");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6979() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("<xMlj <x^gk#<|M5", (Element) null, "optgroup", parser0);
        htmlTreeBuilder0.insertStartTag("optgroup");
        htmlTreeBuilder0.generateImpliedEndTags("<xMlj <x^gk#<|M5");
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7080() throws Throwable {
        Document document0 = Parser.parseBodyFragment("U8h_NlZ9&./bWBc.x", "U8h_NlZ9&./bWBc.x");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("U8h_NlZ9&./bWBc.x", document0, "U8h_NlZ9&./bWBc.x", parser0);
        Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test7181() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragment("DoctypePublicIdentifier_doubleQuoted", "DoctypePublicIdentifier_doubleQuoted");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("DoctypePublicIdentifier_doubleQuoted", document0, "DoctypePublicIdentifier_doubleQuoted", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7282() throws Throwable {
        Document document0 = Parser.parseBodyFragment("$<WhQBWu<|8M5X", "$<WhQBWu<|8M5X");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("$<WhQBWu<|8M5X", document0, "$<WhQBWu<|8M5X", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test7383() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragment("AwmmkZr", "menu");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("AwmmkZr", document0, "head", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7484() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("<xvuCs<5X", "az?M8esec=+3");
        Parser parser0 = Parser.xmlParser();
        Document document1 = Parser.parse("<xvuCs<5X", "az?M8esec=+3");
        document0.toggleClass("az?M8esec=+3");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("U<x_vjTx<|s<5X", document0, "<xvuCs<5X", parser0);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test7485() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("<xvuCs<5X", "az?M8esec=+3");
        Parser parser0 = Parser.xmlParser();
        Document document1 = Parser.parse("<xvuCs<5X", "az?M8esec=+3");
        document0.toggleClass("az?M8esec=+3");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("U<x_vjTx<|s<5X", document0, "<xvuCs<5X", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document1);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test7586() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("!t.u", "!t.u");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("!t.u", document0, "!t.u", parser0);
        Element element0 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7687() throws Throwable {
        Document document0 = Parser.parse("`<s<CvjMx<5", "`<s<CvjMx<5");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test7788() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("!t.u", "!t.u");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("!t.u", document0, "!t.u", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7889() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("", (Element) null, "", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7990() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("!t.u", "!t.u");
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("!t.u", document0, "!t.u", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test7991() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("!t.u", "!t.u");
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("!t.u", document0, "!t.u", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test8092() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("!t.u", "!t.u");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("!t.u", document0, "!t.u", parser0);
        Element element0 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test8093() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("!t.u", "!t.u");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("!t.u", document0, "!t.u", parser0);
        Element element0 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
        assertEquals("html", element0.tagName());
    }

    @Test(timeout = 4000)
    public void test8094() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("!t.u", "!t.u");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("!t.u", document0, "!t.u", parser0);
        Element element0 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test8195() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Document.createShell("Aw{m!mkZr");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("Aw{m!mkZr", document0, "D91Kx(G", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("h3");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test8296() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("l)[zu'a1q/4;1ube", (Element) null, "l)[zu'a1q/4;1ube", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("l)[zu'a1q/4;1ube");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test8397() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Document.createShell("Aw{m!mkZr");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("Aw{m!mkZr", document0, "D91Kx(G", parser0);
        Element element0 = new Element("h3");
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        Element element1 = htmlTreeBuilder0.getActiveFormattingElement("h3");
        assertSame(element1, element0);
    }

    @Test(timeout = 4000)
    public void test8498() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        Document document0 = xmlTreeBuilder0.parse("i", "k8/pRo6");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("table", document0, "U8_NlZ9&./bWBc.x", parser0);
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("table", parseSettings0);
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "i", attributes0);
        htmlTreeBuilder0.push(element0);
        htmlTreeBuilder0.insertInFosterParent(document0);
        assertEquals(1, document0.siblingIndex());
    }
}
