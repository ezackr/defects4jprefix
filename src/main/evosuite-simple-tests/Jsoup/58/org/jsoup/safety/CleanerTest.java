/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 06:02:28 GMT 2023
 */
package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import org.jsoup.nodes.Document;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

public class CleanerTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        Cleaner cleaner0 = new Cleaner(whitelist0);
        Document document0 = new Document("");
        Document document1 = cleaner0.clean(document0);
        assertEquals(1, document1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        Whitelist whitelist1 = whitelist0.addEnforcedAttribute("body", "body", "body");
        Document document0 = Document.createShell("body");
        Cleaner cleaner0 = new Cleaner(whitelist1);
        Document document1 = cleaner0.clean(document0);
        boolean boolean0 = cleaner0.isValid(document1);
        assertNotSame(document1, document0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        Whitelist whitelist1 = whitelist0.addEnforcedAttribute("body", "body", "body");
        Document document0 = Document.createShell("body");
        Cleaner cleaner0 = new Cleaner(whitelist1);
        Document document1 = cleaner0.clean(document0);
        boolean boolean0 = cleaner0.isValid(document1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Whitelist whitelist0 = Whitelist.none();
        Whitelist whitelist1 = whitelist0.addEnforcedAttribute("body", "body", "body");
        Document document0 = Document.createShell("body");
        Cleaner cleaner0 = new Cleaner(whitelist1);
        Document document1 = cleaner0.clean(document0);
        whitelist0.addEnforcedAttribute("body", "body", "open");
        boolean boolean0 = cleaner0.isValid(document1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        Cleaner cleaner0 = new Cleaner(whitelist0);
        Document document0 = Document.createShell("PbfK}e`)6OKd(YBn");
        document0.text("PbfK}e`)6OKd(YBn");
        boolean boolean0 = cleaner0.isValid(document0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        Whitelist whitelist1 = whitelist0.addEnforcedAttribute("body", "body", "body");
        Document document0 = Document.createShell("body");
        Whitelist whitelist2 = Whitelist.basicWithImages();
        Cleaner cleaner0 = new Cleaner(whitelist2);
        Cleaner cleaner1 = new Cleaner(whitelist1);
        Document document1 = cleaner1.clean(document0);
        boolean boolean0 = cleaner0.isValid(document1);
        assertFalse(boolean0);
    }
}
