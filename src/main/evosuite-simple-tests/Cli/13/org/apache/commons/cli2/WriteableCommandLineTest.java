/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 19:56:26 GMT 2023
 */
package org.apache.commons.cli2;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.ClassValidator;
import org.junit.runner.RunWith;

public class WriteableCommandLineTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, false);
        assertEquals(68, propertyOption0.getId());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption("", "", 0);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty("I'\"N mU\r irsa3j \"!", "");
        assertFalse(linkedList0.contains(""));
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "I/r#]", "X{CKt", (-6), (-6));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addOption(groupImpl0);
        assertEquals((-6), groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
        assertEquals("Passes properties and values to the application", propertyOption0.getDescription());
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Boolean boolean0 = new Boolean("Passes properties and values to the application");
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
        assertEquals("-D", propertyOption0.getPreferredName());
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption("", "", 0);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("-8k<");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption("", "", 0);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addValue(propertyOption0, "");
        assertEquals("", propertyOption0.getPreferredName());
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        // Undeclared exception!
        try {
            writeableCommandLineImpl0.addSwitch((Option) null, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Locale locale0 = Locale.CANADA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "arg", 0, 0);
        Command command0 = new Command("arg", "", set0, true, (Argument) null, groupImpl0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(command0, linkedList0);
        // Undeclared exception!
        try {
            writeableCommandLineImpl0.addProperty("=m*", (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test99() throws Throwable {
        ClassValidator classValidator0 = new ClassValidator();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("}$l^JdPcN$auQuh=", "%", (-1617), (-1617), '@', ')', classValidator0, "}$l^JdPcN$auQuh=", linkedList0, (-1617));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
        // Undeclared exception!
        try {
            writeableCommandLineImpl0.addOption((Option) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
