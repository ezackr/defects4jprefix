/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:44:26 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.stream.IntStream;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.junit.runner.RunWith;

public class HelpFormatterTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test00010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test00011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test00012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test00014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test00016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test00017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test00018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test00019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test00020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test00021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test00023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test00025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test00026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test00027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test00028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test00029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test00030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test00031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test00032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test00033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test00034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test00035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test00036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test00038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test00140() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test00141() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test00142() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test00143() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test00144() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test00145() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test00146() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test00147() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test00148() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test00149() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00150() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00151() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test00152() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test00153() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test00154() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test00155() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test00156() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test00157() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "{lOi^*LWMIDsA,=/iV";
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test00158() throws Throwable {
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "{lOi^*LWMIDsA,=/iV";
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printOptions((PrintWriter) null, 13, options0, 13, 13);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test00259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test00260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test00261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test00262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test00263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test00264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test00265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test00266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test00267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test00268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test00269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test00270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test00272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test00273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test00274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        assertNotNull(fileSystemHandling0);
    }

    @Test(timeout = 4000)
    public void test00276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test00277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test00278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test00279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test00280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test00281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test00282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test00283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test00284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test00285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test00286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test00287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test00288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test00290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test00291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test00292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test00293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test00294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test00295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test00296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test00297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test00298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test00299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals("", string2);
    }

    @Test(timeout = 4000)
    public void test002100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertNotNull(string2);
    }

    @Test(timeout = 4000)
    public void test002101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertTrue(string2.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test002102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertFalse(string2.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test002103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test002104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test002105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test002106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test002107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test002108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test002109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test002110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test002111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test002112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test002113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test002114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test002115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test002116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        assertNotNull(stringWriter1);
    }

    @Test(timeout = 4000)
    public void test002117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        assertEquals("+", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test002118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        assertEquals("+", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test002119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test002120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test002121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test002122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertEquals("+", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test002123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertEquals("+", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test002124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertEquals(1, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test002125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertEquals("+", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test002126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        stringWriter0.write("");
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test002127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        stringWriter0.write("");
        assertEquals("+", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test002128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        stringWriter0.write("");
        stringWriter1.flush();
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test002129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        stringWriter0.write("");
        stringWriter1.flush();
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test002130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        stringWriter0.write("");
        stringWriter1.flush();
        assertEquals("+", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test002131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        stringWriter0.write("");
        stringWriter1.flush();
        assertEquals("+", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test002132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 1;
        String string0 = helpFormatter0.createPadding(1);
        String string1 = "";
        String string2 = helpFormatter0.rtrim("");
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('+');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        stringWriter0.write("");
        stringWriter1.flush();
        int int1 = 2;
        Options options0 = null;
        int int2 = 66;
        PrintWriter printWriter0 = null;
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) null, 1687, 2, "Ih8DH^U%\"(");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test003133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test003134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test003135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test003136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test003137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test003138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test003139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test003140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test003141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test003142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test003143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test003144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test003145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test003146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test003147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test003148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test003149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test003150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test003151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test003153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test003154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test003155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test003156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test003157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test003158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test003159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test003160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test003161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test003163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test003164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test003165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test003166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test003169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test003170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test003171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test003172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test003173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test003174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test003175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test003177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test003178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test003179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test003180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test003181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test003182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test003184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test003185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test003186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test003187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test003190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test003191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test003192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test003193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test003194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test003195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test003196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test003197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test003198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test003199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test003200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test003202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test003203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test003204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test003205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test003206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test003207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test003209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test003210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test003211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test003212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test003215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test003216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test003217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test003218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test003219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test003220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test003221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test003222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test003223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test003224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test003225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test003226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test003227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test003228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test003229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test003231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test003232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test003233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test003234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test003235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test003236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test003238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test003239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test003240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test003241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test003244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test003245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test003246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test003247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test003248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test003249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test003250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test003251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test003252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test003253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test003254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test003255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test003256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test003257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test003258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test003259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test003260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test003261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test003262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test003263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test003264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test003265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test003266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test003267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test003268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test003269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test003270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test003271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test003272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test003274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test003275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test003276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test003277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test003278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test003279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test003281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test003282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test003283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test003284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test003285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test003286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test003287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test003288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test003289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test003290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        StringWriter stringWriter0 = new StringWriter();
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test003291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        StringWriter stringWriter0 = new StringWriter();
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test003292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test003293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test003294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test003295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
        assertEquals(0, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test003296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test003297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
        assertEquals("org.apache.commons.cli.HelpFormatter$1", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test003298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$1", objectArray0);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage(printWriter0, (-2), "", options1);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test004299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test004300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test004301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test004302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test004303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test004304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test004305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test004306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test004307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test004309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test004311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test004312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test004313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test004314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test004315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test004316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test004317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test004318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test004319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test004320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test004321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test004322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test004323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test004324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test004325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test004327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test004329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test004330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test004331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test004332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test004333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test004334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test004335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test004336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test004337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test004338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test004339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test004340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test004341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test004342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test004344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test004346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test004347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test004348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test004349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test004350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test004351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test004352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test004353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test004354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test004355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test004356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test004357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test004358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test004360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(" ", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test004362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test004363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test004364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test004365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test004366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test004367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test004368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test004369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test004370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test004371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test004372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("arg", string1);
    }

    @Test(timeout = 4000)
    public void test004373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test004374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test004375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test004376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test004378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test004380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test004381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test004382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test004383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test004384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test004385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test004386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test004387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test004388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test004389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test004390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test004391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test004393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(" ", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test004395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test004396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test004397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test004398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        objectArray0[5] = (Object) pipedOutputStream0;
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3191, "[", "", options0, 1591, 302, "[");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test005399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test005400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test005401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test005402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test005403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test005404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test005405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test005406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test005407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test005408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test005409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test005411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test005413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test005414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test005415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test005416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test005417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test005418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test005419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        assertEquals(24, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test005420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test005421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test005422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test005423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test005424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test005425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test005426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test005427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test005428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals("k6SD", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test005429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test005430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test005431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test005433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test005435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test005436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test005437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test005438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(24, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test005439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test005440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test005441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test005442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test005443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test005444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test005445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test005446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("k6SD", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test005447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test005448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test005449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test005451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test005453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test005454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test005455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test005456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test005457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test005458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test005459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test005460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test005461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test005462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test005463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("k6SD", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test005464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test005465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test005466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test005468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test005470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test005471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test005472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test005473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test005474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test005475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test005476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test005477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test005478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test005479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals("k6SD", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test005480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test005481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test005482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test005483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(" ", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test005486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test005487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test005488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test005489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test005490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test005491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test005492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test005493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("k6SD", string1);
    }

    @Test(timeout = 4000)
    public void test005494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test005495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test005496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test005497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("k6SD", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test005498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test005499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test005500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test005501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test005504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test005505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test005506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test005507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test005508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test005509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test005510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test005511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test005512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test005513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals("k6SD", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test005514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test005515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test005516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test005517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(" ", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test005520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.setArgName("k6SD");
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        String string1 = helpFormatter0.getArgName();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ", "x", options0, 496, 1149, "k6SD", false);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006521() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test006522() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006523() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006524() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006525() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006526() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006527() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006528() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test006529() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006530() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006531() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006532() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006533() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006534() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006535() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006536() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006537() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006538() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006539() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006540() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006541() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006542() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006543() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006544() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006545() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006546() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006547() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006548() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006549() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006550() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006551() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006552() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006553() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006554() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006555() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006556() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        assertEquals((-2231), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006557() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006558() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006559() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006560() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006561() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006562() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006563() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006564() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006565() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        assertEquals(32, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006566() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006567() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006568() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006569() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006570() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006571() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test006572() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test006573() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test006574() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        assertTrue(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test006575() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        assertTrue(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test006576() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006577() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006578() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006579() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006580() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006581() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006582() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006583() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006584() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006585() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006586() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006587() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006588() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006589() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006590() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006591() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006592() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006593() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006594() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006595() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006596() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006597() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test006598() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test006599() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006600() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006601() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006602() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006603() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006604() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006605() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006606() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006607() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006608() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006609() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006610() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006611() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006612() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006613() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006614() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006615() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006616() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006617() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006618() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006619() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006620() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006621() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006622() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006623() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals((-2032), int0);
    }

    @Test(timeout = 4000)
    public void test006624() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006625() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006626() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006627() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006628() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006629() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006630() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006631() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006632() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006633() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006634() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006635() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006636() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006637() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006638() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006639() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("-", string1);
    }

    @Test(timeout = 4000)
    public void test006640() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test006641() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test006642() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006643() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006644() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006645() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006646() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006647() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006648() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006649() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006650() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006651() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006652() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006653() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006654() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006655() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006656() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006657() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals("arg", string2);
    }

    @Test(timeout = 4000)
    public void test006658() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertNotNull(string2);
    }

    @Test(timeout = 4000)
    public void test006659() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertFalse(string2.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test006660() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertFalse(string2.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test006661() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006662() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006663() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006664() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006665() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006666() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006667() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006668() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006669() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006670() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006671() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006672() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006673() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006674() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006675() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006676() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string3);
    }

    @Test(timeout = 4000)
    public void test006677() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertNotNull(string3);
    }

    @Test(timeout = 4000)
    public void test006678() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string3.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test006679() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string3.equals((Object) string2));
    }

    @Test(timeout = 4000)
    public void test006680() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string3.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test006681() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006682() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006683() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006684() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006685() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006686() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006687() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006688() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006689() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006690() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006691() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006692() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006693() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006694() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006695() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006696() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string4);
    }

    @Test(timeout = 4000)
    public void test006697() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string4);
    }

    @Test(timeout = 4000)
    public void test006698() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertFalse(string4.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test006699() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertFalse(string4.equals((Object) string3));
    }

    @Test(timeout = 4000)
    public void test006700() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertFalse(string4.equals((Object) string2));
    }

    @Test(timeout = 4000)
    public void test006701() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertFalse(string4.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test006702() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006703() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006704() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006705() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006706() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006707() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006708() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006709() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006710() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006711() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006712() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006713() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006714() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006715() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006716() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006717() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals("lE+V", string5);
    }

    @Test(timeout = 4000)
    public void test006718() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertNotNull(string5);
    }

    @Test(timeout = 4000)
    public void test006719() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertFalse(string5.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test006720() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertFalse(string5.equals((Object) string2));
    }

    @Test(timeout = 4000)
    public void test006721() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertFalse(string5.equals((Object) string4));
    }

    @Test(timeout = 4000)
    public void test006722() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertFalse(string5.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test006723() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertFalse(string5.equals((Object) string3));
    }

    @Test(timeout = 4000)
    public void test006724() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006725() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006726() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006727() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006728() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006729() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006730() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006731() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006732() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006733() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006734() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006735() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006736() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006737() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006738() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006739() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals((-2032), int1);
    }

    @Test(timeout = 4000)
    public void test006740() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertTrue(int1 == int0);
    }

    @Test(timeout = 4000)
    public void test006741() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006742() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006743() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006744() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006745() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006746() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006747() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006748() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006749() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006750() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006751() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006752() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006753() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006754() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006755() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006756() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals(1, int2);
    }

    @Test(timeout = 4000)
    public void test006757() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertFalse(int2 == int0);
    }

    @Test(timeout = 4000)
    public void test006758() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertFalse(int2 == int1);
    }

    @Test(timeout = 4000)
    public void test006759() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006760() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006761() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006762() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006763() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006764() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006765() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006766() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006767() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006768() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test006769() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test006770() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test006771() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test006772() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test006773() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006774() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006775() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006776() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006777() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006778() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006779() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test006780() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006781() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006782() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006783() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006784() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006785() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006786() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006787() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006788() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test006789() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals("lE+V", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test006790() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(4, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test006791() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals(4, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test006792() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        assertEquals("lE+V", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test006793() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006794() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals((-2032), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test006795() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test006796() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test006797() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006798() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test006799() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string6);
    }

    @Test(timeout = 4000)
    public void test006800() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertNotNull(string6);
    }

    @Test(timeout = 4000)
    public void test006801() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string6.equals((Object) string4));
    }

    @Test(timeout = 4000)
    public void test006802() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string6.equals((Object) string2));
    }

    @Test(timeout = 4000)
    public void test006803() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string6.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test006804() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string6.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test006805() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string6.equals((Object) string5));
    }

    @Test(timeout = 4000)
    public void test006806() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006807() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test006808() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test006809() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals((-2032), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test006810() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test006811() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006812() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test006813() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test006814() throws Throwable {
        boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}+.WrVa,u7Z?3@d0F");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.defaultWidth = (-2231);
        helpFormatter0.defaultWidth = 32;
        boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
        boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
        helpFormatter0.setWidth((-2032));
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.optionComparator = null;
        int int0 = helpFormatter0.getWidth();
        String string1 = helpFormatter0.getOptPrefix();
        String string2 = helpFormatter0.getArgName();
        String string3 = helpFormatter0.getSyntaxPrefix();
        String string4 = helpFormatter0.getLongOptSeparator();
        String string5 = helpFormatter0.rtrim("lE+V");
        int int1 = helpFormatter0.getWidth();
        int int2 = helpFormatter0.getLeftPadding();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2983, 52, "lE+V");
        String string6 = helpFormatter0.getSyntaxPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test007815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test007816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test007817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test007818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test007819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test007820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test007821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test007822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test007823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test007824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test007825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test007826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test007827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test007828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test007829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test007830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test007831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test007832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) mockPrintWriter0;
        objectArray0[1] = (Object) "";
        objectArray0[2] = (Object) "";
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test007833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) mockPrintWriter0;
        objectArray0[1] = (Object) "";
        objectArray0[2] = (Object) "";
        Object object0 = new Object();
        objectArray0[3] = object0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) helpFormatter0;
        objectArray0[6] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test007834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) mockPrintWriter0;
        objectArray0[1] = (Object) "";
        objectArray0[2] = (Object) "";
        Object object0 = new Object();
        objectArray0[3] = object0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) helpFormatter0;
        objectArray0[6] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test007835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) mockPrintWriter0;
        objectArray0[1] = (Object) "";
        objectArray0[2] = (Object) "";
        Object object0 = new Object();
        objectArray0[3] = object0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) helpFormatter0;
        objectArray0[6] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
        assertEquals(7, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test007836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) mockPrintWriter0;
        objectArray0[1] = (Object) "";
        objectArray0[2] = (Object) "";
        Object object0 = new Object();
        objectArray0[3] = object0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) helpFormatter0;
        objectArray0[6] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test007837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) mockPrintWriter0;
        objectArray0[1] = (Object) "";
        objectArray0[2] = (Object) "";
        Object object0 = new Object();
        objectArray0[3] = object0;
        objectArray0[4] = (Object) mockPrintWriter0;
        objectArray0[5] = (Object) helpFormatter0;
        objectArray0[6] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage(printWriter0, 29, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test008838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test008839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test008840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test008841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test008842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test008843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test008844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test008845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test008846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test008847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test008848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test008849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test008850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test008851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test008852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test008853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test008854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test008855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test008856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test008857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test008858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        assertEquals(24, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test008859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test008860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test008861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test008862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(24, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test008863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test008864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test008865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test008866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test008867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test008868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test008869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test008870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test008871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test008872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test008873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test008874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test008875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test008876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test008877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test008878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test008879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test008880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test008881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test008882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test008883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test008884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test008885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test008886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test008887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test008888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test008889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test008890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test008891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test008892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test008893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test008894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test008895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test008896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test008897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test008898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test008899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test008900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test008901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test008902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals("arg", string1);
    }

    @Test(timeout = 4000)
    public void test008903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test008904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test008905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test008906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test008907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test008908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test008909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test008910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test008911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test008912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test008913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        String string0 = helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        String string1 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test009914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test009915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test009916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test009917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test009918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test009919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test009920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test009921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test009922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test009923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test009924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test009926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test009928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test009929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test009930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test009931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test009932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test009933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test009935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        assertEquals("\"8@{W }uB=@mJ4~", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test009937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test009938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test009939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test009940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test009941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test009942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test009943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test009944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test009945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test009946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test009947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test009948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test009950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals("\"8@{W }uB=@mJ4~", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test009952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test009953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test009954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test009955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test009956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test009957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test009958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test009959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test009960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test009961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test009962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test009964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals("\"8@{W }uB=@mJ4~", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test009966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test009967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test009968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        assertEquals("org.apache.commons.cli.HelpFormatter", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test009969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test009970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test009971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals((-1001), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test009972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test009973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test009974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test009975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test009976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test009978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals("\"8@{W }uB=@mJ4~", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals((-1001), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test009980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test009981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test009982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test009983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        assertEquals("org.apache.commons.cli.HelpFormatter", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test009984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test009985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        assertEquals(";:Vg*mTyWp]", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test009987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        assertEquals("\"8@{W }uB=@mJ4~", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        assertEquals((-1001), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test009989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test009990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test009991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test009992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        assertEquals("org.apache.commons.cli.HelpFormatter", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test009993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test009994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test009995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals((-1001), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test009996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test009997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test009998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test009999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals("arg", string0);
    }

    @Test(timeout = 4000)
    public void test0091000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0091001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0091002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals(";:Vg*mTyWp]", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0091003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0091004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals("\"8@{W }uB=@mJ4~", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0091005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals((-1001), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0091006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0091007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0091008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0091009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        assertEquals("org.apache.commons.cli.HelpFormatter", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0091010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0091011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0091012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals((-1001), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0091013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0091014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0091015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0091016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(";:Vg*mTyWp]", string1);
    }

    @Test(timeout = 4000)
    public void test0091017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0091018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0091019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0091020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(";:Vg*mTyWp]", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0091021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0091022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("\"8@{W }uB=@mJ4~", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0091023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals((-1001), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0091024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0091025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0091026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0091027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("org.apache.commons.cli.HelpFormatter", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0091028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0091029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0091030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0091031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0091032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0091033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0091034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0091035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals((-1001), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0091036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0091037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0091038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0091039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0091040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0091041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(";:Vg*mTyWp]", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0091042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0091043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals("\"8@{W }uB=@mJ4~", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0091044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals((-1001), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0091045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0091046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0091047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0091048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals("org.apache.commons.cli.HelpFormatter", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0091049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals("'+`zS> %;'X<6", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0091050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(13, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0091051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals(13, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0091052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        assertEquals("'+`zS> %;'X<6", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0091053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0091054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0091055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals((-1001), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0091056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0091057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0091058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0091059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals((-1001), int0);
    }

    @Test(timeout = 4000)
    public void test0091060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0091061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(";:Vg*mTyWp]", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0091062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0091063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("\"8@{W }uB=@mJ4~", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0091064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals((-1001), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0091065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0091066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0091067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0091068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\"8@{W }uB=@mJ4~";
        helpFormatter0.setOptPrefix("\"8@{W }uB=@mJ4~");
        helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter");
        helpFormatter0.setDescPadding((-1001));
        helpFormatter0.defaultLongOptPrefix = ";:Vg*mTyWp]";
        String string0 = helpFormatter0.getArgName();
        String string1 = helpFormatter0.getLongOptPrefix();
        StringBuffer stringBuffer0 = new StringBuffer(34);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3287, 3287, "'+`zS> %;'X<6");
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("org.apache.commons.cli.HelpFormatter", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0101069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0101070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0101071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0101072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0101073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0101074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0101075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0101076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0101077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0101078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0101079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0101080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0101081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0101082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0101083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0101084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0101085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0101086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0101087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0101088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0101089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0101090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test0101091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test0101092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0101093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0101094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0101095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0101096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0101097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0101098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0101099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0101100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0101101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0101102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0101103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0101104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0101105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0101106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0101107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0101108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0101109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0101110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0101111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0101112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0101113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0101114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0101115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0101116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0111117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0111118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0111119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0111120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0111121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0111122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0111123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0111124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0111125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0111126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0111127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0111128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0111129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0111130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0111131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0111132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0111133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0111134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0111135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0111136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0111137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0111138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test0111139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test0111140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0111141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0111142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0111143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0111144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0111145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0111146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0111147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0111148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0111149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0111150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0111151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0111152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0111153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0111154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0111155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0111156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0111157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0111158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0111159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0111160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0111161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0111162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0111163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0111164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, " ", true, (String) null);
        List list0 = options0.getMatchingOptions("4~'B");
        Options options2 = options0.addOption("arg", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options2);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0121165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0121166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0121167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0121168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0121169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0121170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0121171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0121172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0121173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0121174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0121175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0121176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0121177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0121178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0121179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0121180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0121181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0121182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0121183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0121185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0121186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        assertTrue(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0121188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0121189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0121190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0121191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0121192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0121194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0121196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0121197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0121200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0121201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0121202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0121203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0121205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0121206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0121207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0121208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0121209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0121210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0121212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0121213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0121215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0121217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0121218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0121221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0121222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0121223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0121224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0121226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0121228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0121229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0121230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0121231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0121232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0121233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0121234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0121235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0121237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0121238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0121240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0121242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0121243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0121246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0121247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0121248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0121249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0121251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0121253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0121254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0121255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0121256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0121257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0121258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0121259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0121260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0121261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0121262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0121263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0121264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0121266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0121267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0121269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0121271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0121272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0121275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0121276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0121277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0121278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0121280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0121282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0121283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0121284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0121285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0121286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0121287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0121288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0121289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0121290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0121291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0121292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0121293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0121294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0121295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0121296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0121297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0121298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0121299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0121300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0121301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0121302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0121303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0121304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0121305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0121306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0121307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0121309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0121310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0121312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0121314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0121315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0121317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0121318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0121319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0121320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0121321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0121322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0121323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0121324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        optionGroup0.setRequired(true);
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0131326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0131327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0131328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0131329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0131330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0131331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0131332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0131333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0131334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0131335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0131336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0131337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0131338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0131339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0131340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0131341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0131342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0131343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0131346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0131347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0131348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0131349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0131350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0131352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0131355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0131357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0131358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0131359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0131360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0131361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0131363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0131364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0131365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0131366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0131367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0131370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0131371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0131373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0131376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0131378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0131379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0131380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0131381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0131382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0131386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0131387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0131388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0131389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0131390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0131391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0131392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0131395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0131396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0131398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0131401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0131403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0131404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0131405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0131406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0131407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0131411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0131412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0131413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0131414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertTrue(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0131417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0131418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0131420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0131423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0131425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0131426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0131427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0131428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0131429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        assertTrue(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0131433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0131434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0131435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0131436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0131437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0131438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0131439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0131440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0131441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0131442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0131443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertTrue(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0131446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0131447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0131449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0131452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0131454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0131455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0131456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0131457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0131458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        assertTrue(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0131462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0131463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0131464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0131465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0131466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0131467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0131468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0131469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0131470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0131471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0131472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0131473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0131474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0131475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0131476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0131477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0131478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0131479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0131480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0131481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0131482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0131483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0131484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0131485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0131486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0131489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0131490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0131492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0131493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0131495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0131496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0131497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0131498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0131499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0131500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0131501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0131503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0131504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0131505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0131506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0131507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0131508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0131509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0131510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", string0);
    }

    @Test(timeout = 4000)
    public void test0131511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0131512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0131513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0131514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0131515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0131516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0131517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0131518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0131519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0131520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        optionGroup1.setRequired(true);
        Options options2 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options2, "H}hcvx>rY\"d{chtWT*!", true);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0141521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0141522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0141523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0141524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0141525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0141526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0141527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0141528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0141529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0141530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0141531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0141533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0141536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0141537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0141538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0141539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0141540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0141542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0141544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0141545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0141547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0141548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0141549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0141550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0141551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0141552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0141553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0141554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0141556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0141557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0141559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0141560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0141562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0141563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0141564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0141565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0141566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0141567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0141568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0141569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0141570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0141571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0141573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0141574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0141576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0141577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test0141579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test0141580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0141581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0141582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0141583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0141584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0141585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0141586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0141587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0141588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0141589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0141590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0141591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0141592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0141593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0141594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0141596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0141597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0141599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0141600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0141602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0141603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0141604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0141605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0141606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0141607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0141608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0141609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0141610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0141611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0141612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0141613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0141615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0141616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0141617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertEquals("\n", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0141618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0141619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0141620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0141621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0141622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0141623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0141624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0141625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0141626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0141627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0141628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0141629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0141630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0141631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0141632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0141633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0141635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0141636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0141637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals("\n", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0141638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0141639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0141640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0141641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0141642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0141643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0141644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0141645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0141646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0141647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0141648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0141649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0141650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0141651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0141652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0141653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0141654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0141655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0141657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0141658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0141660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0141661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0141663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0141664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0141665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0141666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0141667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0141669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0141670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0141671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("\n", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0141672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0141673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0141674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0141675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0141676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0141677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0141678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0141679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0141680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0141681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0141682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0141683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test0141684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0141685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0141686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0141687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0141689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0141690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0141692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0141693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0141695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0141696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0141697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0141698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0141699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0141700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("\n", string1);
    }

    @Test(timeout = 4000)
    public void test0141701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0141702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0141703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0141704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0141705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0141706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0141707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0141708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0141709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0141710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0141711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        StringBuffer stringBuffer0 = new StringBuffer(918);
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0151713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0151714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0151715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0151716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0151717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0151718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0151719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0151721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0151723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0151724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0151725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0151726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0151727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0151728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertNotNull(pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test0151729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0151730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0151731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0151732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0151733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0151734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0151735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0151736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0151737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0151738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0151739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0151740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0151741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0151742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0151743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0151744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0151745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0151746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0151747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0151749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0151751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0151752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0151753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0151754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0151755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0151756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0151757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0151758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0151759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0151760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0151761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0151762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0151763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0151765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0151767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0151768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0151769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0151770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0151771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        assertEquals("", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0151772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0151773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0151774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0151775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0151776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0151777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0151778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test0151779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0151780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0151782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0151784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0151785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0151786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0151787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0151788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0151789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0151790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0151791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0151792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0151793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0151794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0151795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test0151796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0151798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0151800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0151801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0151802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0151803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0151804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0151805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0151806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0151807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0151808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0151809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0151810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0151811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(74, int1);
    }

    @Test(timeout = 4000)
    public void test0151812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertFalse(int1 == int0);
    }

    @Test(timeout = 4000)
    public void test0151813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0151815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0151816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0151817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0151818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0151819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0151820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0151821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        assertEquals("", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0151822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        String string1 = "";
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0151823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        String string1 = "";
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0151824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        String string1 = "";
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0151825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        String string1 = "";
        StringBuffer stringBuffer0 = new StringBuffer("");
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0151826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        mockPrintWriter0.print((-1511L));
        PrintWriter printWriter0 = mockPrintWriter0.printf("R>Mk", (Object[]) null);
        Options options0 = new Options();
        helpFormatter0.printOptions(printWriter0, 445, options0, 15, 445);
        helpFormatter0.setLongOptSeparator("");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getLeftPadding();
        int int1 = helpFormatter0.getWidth();
        String string1 = "";
        StringBuffer stringBuffer0 = new StringBuffer("");
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        // Undeclared exception!
        try {
            stringBuffer0.append((char[]) null, 74, (-1952));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0161827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0161828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0161829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0161830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0161831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0161832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0161833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0161834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0161835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0161836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0161837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0161838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0161839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0161841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0161842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0161844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0161845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0161846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0161847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0161848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0161849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test0161850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0161851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0161852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0161853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0161854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0161855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0161857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0161858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0161860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0161861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0161862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0161863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0161864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0161865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0161866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test0161867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0161868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0161869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0161870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0161871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0161872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0161874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0161875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0161877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0161878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0161879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0161880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0161881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0161882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(3, int1);
    }

    @Test(timeout = 4000)
    public void test0161883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertFalse(int1 == int0);
    }

    @Test(timeout = 4000)
    public void test0161884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0161885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0161886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0161887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0161888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0161889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0161891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0161892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0161894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0161895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0161896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0161897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0161898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0161899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(3, int2);
    }

    @Test(timeout = 4000)
    public void test0161900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertTrue(int2 == int1);
    }

    @Test(timeout = 4000)
    public void test0161901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertFalse(int2 == int0);
    }

    @Test(timeout = 4000)
    public void test0161902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0161903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0161904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0161905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0161906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0161907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0161909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0161910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0161912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0161913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        assertEquals("usage: ", string1);
    }

    @Test(timeout = 4000)
    public void test0161914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0161915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0161916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0161917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertNotNull(stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0161918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertEquals("usage: ", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0161919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertEquals("usage: ", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0161920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0161921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0161922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0161923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertEquals("usage: ", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0161924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertEquals("usage: ", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0161925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertEquals("usage: ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0161926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        assertEquals(7, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0161927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0161928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0161929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0161930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0161931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0161932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0161933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0161934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0161935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0161936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0161937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0161938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0161939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0161940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0161941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0161942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0161943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0161945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0161946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0161947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals("usage: ", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0161948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals("usage: ", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0161949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals("usage: ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0161950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(7, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0161951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals("usage: ", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0161952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm;-8n/(M?}|Qe3f;g0");
        String string0 = helpFormatter0.rtrim((String) null);
        int int1 = helpFormatter0.getDescPadding();
        int int2 = helpFormatter0.getDescPadding();
        StringWriter stringWriter0 = new StringWriter();
        String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 13, "");
        assertEquals(7, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0171953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0171954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0171955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0171956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0171957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0171958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0171959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0171960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0171961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0171962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0171963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0171964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0171965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0171966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0171967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0171968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0171969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0171970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0171971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0171972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0171973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0171974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0171975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test0171976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0171977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0171978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0171979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0171980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0171981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0171982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0171983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0171984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0181985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0181986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0181987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0181988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0181989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0181990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0181991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0181992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0181993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0181994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0181995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0181996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0181997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0181998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0181999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0182000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0182001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0182002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0182003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0182004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0182005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0182006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0182007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0182008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0182009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0182010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0182011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0182012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0182013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0182014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0182015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0182016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0182017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0182018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0182019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0182020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0182021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0182022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0182023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0182024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        assertFalse(optionGroup1.equals((Object) optionGroup0));
    }

    @Test(timeout = 4000)
    public void test0182025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0182026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0182027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0182028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNotSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0182029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0182030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0182031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.equals((Object) optionGroup0));
    }

    @Test(timeout = 4000)
    public void test0182032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0182033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0182034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0182035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0182036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertNotSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0182037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0182038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0182039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0182040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0182041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0182042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertFalse(optionGroup1.equals((Object) optionGroup0));
    }

    @Test(timeout = 4000)
    public void test0182043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0182044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0182045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0182046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0182047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0182048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertNotSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0182049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0182050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0182051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0182052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test0182053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test0182054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test0182055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0182056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0182057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertNotNull(options3);
    }

    @Test(timeout = 4000)
    public void test0182058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertFalse(optionGroup1.equals((Object) optionGroup0));
    }

    @Test(timeout = 4000)
    public void test0182059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0182060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0182061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0182062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0182063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0182064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0182065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0182066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0182067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0182068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0182069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0182070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0182071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0182072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0182073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0182074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0182075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0182076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0182077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0182078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertNotSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0182079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0182080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0182081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0182082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test0182083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test0182084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test0182085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0182086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0182087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0182088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0182089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0182090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0182091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0182092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0182093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(optionGroup1.equals((Object) optionGroup0));
    }

    @Test(timeout = 4000)
    public void test0182094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0182095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0182096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0182097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0182098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0182099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0182100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0182101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0182102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0182103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0182104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0182105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0182106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0182107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0182108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0182109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0182110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0182111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0182112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0182113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0182114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0182115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0182116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0182117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0182118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption("arg", true, "usage: ");
        Options options3 = options1.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0192119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0192120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0192121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0192122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0192123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0192124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0192125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0192126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0192127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0192129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0192130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0192131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0192133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0192134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0192135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0192136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0192139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0192140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0192141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0192142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0192143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0192144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0192145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0192146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0192147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0192148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0192149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0192150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0192151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0192154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0192155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0192156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0192157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0192158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0192159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0192160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0192161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0192162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0192163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0192164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0192165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0192166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0192167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0192170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0192171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0192172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0192173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0192174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0192175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0192176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0192177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0192178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0192179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0192180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0192181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0192182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0192183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0192184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0192185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0192186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0192187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0192188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0192189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertEquals("\n", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0192190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0192191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0192192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0192193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0192194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0192195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0192196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0192197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0192198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0192199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0192200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0192201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0192202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0192203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0192204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0192205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0192206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0192207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0192208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0192209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals("\n", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0192210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0192211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0192212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0192213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0192214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0192215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0192216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0192217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0192218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0192219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0192220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0192221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0192222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0192223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0192224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0192225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0192228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0192229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0192230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0192231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0192232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0192233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0192234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0192235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0192236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0192237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0192238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0192239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0192240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0192241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0192242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0192243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("\n", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0192244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0192245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0192246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0192247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0192248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0192249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0192250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0192251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0192252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0192253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0192254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test0192255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0192256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0192257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0192259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0192260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0192261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0192262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0192263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0192264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0202265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0202266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0202267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0202268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0202269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0202270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0202271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0202272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0202273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0202274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0202275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0202276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0202277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0202278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0202279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0202280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0202281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0202282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0202283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0202284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0202285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0202286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0202287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0202288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0202289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0202290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0202291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0202292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0202293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0202294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0202295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0202296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0202297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0202298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0202299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0202300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0202301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0202302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0202303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0202304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0202305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0202306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0202307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0202308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0202309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0202310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0202311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0202312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0202313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0202314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0202315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0202316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0202317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0202318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0202319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0202320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0202321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0202322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0202323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0202324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0202325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0202326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0202327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0202328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0202329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0202330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0202331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        assertEquals((-1), helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0202332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0202333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0202334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0202335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0202336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0202337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0202338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0202339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0202340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0202341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0202342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0202343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0202344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0202345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0202346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0202347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0202348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0202349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0202350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0202351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0202352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0202353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0202354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0202355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0202356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0202357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0202358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0202359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0202360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        helpFormatter0.defaultLeftPad = (-1);
        Options options1 = options0.addOption(option0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "org.apache.commons.cli.HelpFormatter", true);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0212361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0212362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0212363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0212364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0212365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0212366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0212367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0212368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0212370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0212372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0212373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0212374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0212375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0212376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0212377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0212379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0212381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0212382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0212383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0212384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0212385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0212386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0212387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0212388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0212389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0212390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0212391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0212392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0212394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0212396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0212397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0212398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0212399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0212400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0212401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals((-3543), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0212402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0212403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0212404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0212405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0212406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0212407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0212409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0212411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0212412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals((-3543), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0212413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0212414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0212415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0212416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals((-3543), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0212417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals((-3543), helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0212418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0212419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0212420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0212421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0212422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0212424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0212426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals((-3543), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0212427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0212428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0212429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals((-3543), helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0212430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0212431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = (-3543);
        helpFormatter0.setDescPadding((-3543));
        helpFormatter0.setLeftPadding((-3543));
        Options options0 = null;
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("m", "usage: ", (Options) null, "m");
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0222432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0222433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0222434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0222435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0222436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0222437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0222438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0222439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0222441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0222442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0222443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0222444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0222445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0222446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0222448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0222450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0222451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0222452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0222453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0222454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0222455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0222456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0222458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0222459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0222460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0222461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0222462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0222463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0222465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0222466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0222467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0222468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0222469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0222470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0222471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0222473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0222474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0222475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0222476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0222477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0222478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test0222479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0222480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0222482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0222483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0222484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0222485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0222486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0222487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0222488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0222490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0222491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0222492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0222493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0222494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0222495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0222497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0222498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0222499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0222500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0222501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0222502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0222503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0222504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0222505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        assertNotNull(mockFile1);
    }

    @Test(timeout = 4000)
    public void test0222506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        assertFalse(mockFile1.equals((Object) mockFile0));
    }

    @Test(timeout = 4000)
    public void test0222507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0222508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        assertFalse(mockFile0.equals((Object) mockFile1));
    }

    @Test(timeout = 4000)
    public void test0222509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        assertFalse(mockFile1.equals((Object) mockFile0));
    }

    @Test(timeout = 4000)
    public void test0222510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertNotSame(mockFile0, mockFile1);
    }

    @Test(timeout = 4000)
    public void test0222511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertNotSame(mockFile1, mockFile0);
    }

    @Test(timeout = 4000)
    public void test0222512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertFalse(mockFile0.equals((Object) mockFile1));
    }

    @Test(timeout = 4000)
    public void test0222513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertFalse(mockFile1.equals((Object) mockFile0));
    }

    @Test(timeout = 4000)
    public void test0222514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test0222515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test0222516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test0222517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals("--", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test0222518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test0222519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test0222520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0222521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertNull(mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test0222522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test0222523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertFalse(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0222524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals("--", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test0222525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test0222526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test0222527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test0222528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test0222529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertFalse(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test0222530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals("--", mockFile1.getName());
    }

    @Test(timeout = 4000)
    public void test0222531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(1392409281320L, mockFile1.lastModified());
    }

    @Test(timeout = 4000)
    public void test0222532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(0L, mockFile1.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test0222533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile1.canExecute());
    }

    @Test(timeout = 4000)
    public void test0222534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertFalse(mockFile1.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0222535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(0L, mockFile1.length());
    }

    @Test(timeout = 4000)
    public void test0222536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(0L, mockFile1.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test0222537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals("/Users/elliottzackrone/IdeaProjects/defects4jprefix/--", mockFile1.getParent());
    }

    @Test(timeout = 4000)
    public void test0222538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile1.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0222539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile1.canWrite());
    }

    @Test(timeout = 4000)
    public void test0222540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertFalse(mockFile1.isHidden());
    }

    @Test(timeout = 4000)
    public void test0222541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals(0L, mockFile1.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test0222542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertEquals("/Users/elliottzackrone/IdeaProjects/defects4jprefix/--/--", mockFile1.toString());
    }

    @Test(timeout = 4000)
    public void test0222543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile1.canRead());
    }

    @Test(timeout = 4000)
    public void test0222544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile1.exists());
    }

    @Test(timeout = 4000)
    public void test0222545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        assertTrue(mockFile1.isFile());
    }

    @Test(timeout = 4000)
    public void test0222546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertNotSame(mockFile0, mockFile1);
    }

    @Test(timeout = 4000)
    public void test0222547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0222548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(mockFile0.equals((Object) mockFile1));
    }

    @Test(timeout = 4000)
    public void test0222549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test0222550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test0222551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test0222552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals("--", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test0222553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test0222554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test0222555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0222556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertNull(mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test0222557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test0222558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0222559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals("--", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test0222560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test0222561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test0222562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test0222563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test0222564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test0222565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertNotSame(mockFile0, mockFile1);
    }

    @Test(timeout = 4000)
    public void test0222566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test0222567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertFalse(mockFile0.equals((Object) mockFile1));
    }

    @Test(timeout = 4000)
    public void test0222568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test0222569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test0222570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test0222571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test0222572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertEquals("--", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test0222573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test0222574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test0222575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertTrue(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0222576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertNull(mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test0222577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test0222578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertFalse(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0222579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertEquals("--", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test0222580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test0222581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test0222582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test0222583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test0222584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        assertFalse(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test0222585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        mockPrintWriter0.println();
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        boolean boolean1 = mockFile0.createNewFile();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "ac:cA74j", "ac:cA74j", (Options) null, 2360, 74, "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0232586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0232587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0232588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0232589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0232590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0232591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0232592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0232593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0232594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0232595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0232596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0232597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0232598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0232599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0232600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0232601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0232602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0232603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0232604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0232605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0232606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0232607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0232608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test0232609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0232610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0232611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0232612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0232613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0232614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0232615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0232616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0232617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0232618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0232619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0232620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0232621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0232622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0232623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0232624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0232625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, int0);
    }

    @Test(timeout = 4000)
    public void test0232626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0232627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0232628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0232629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0232630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0232631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0232632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0232633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0232634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0232635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0232636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0232637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        assertEquals("\u0001", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0232638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0232639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0232640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0232641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0232642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0232643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0232644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(" | ", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0232645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0232646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0232647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0232648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0232649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0232650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0232651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0232652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0232653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0232654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0232655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test0232656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0232657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test0232658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0232659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0232660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0232661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0232662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0232663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0232664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0232665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0232666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        int int1 = (-1709);
        String string2 = options0.toString();
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0232667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        int int1 = (-1709);
        String string2 = options0.toString();
        assertNotNull(string2);
    }

    @Test(timeout = 4000)
    public void test0232668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        int int1 = (-1709);
        String string2 = options0.toString();
        assertFalse(string2.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test0232669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        int int1 = (-1709);
        String string2 = options0.toString();
        assertFalse(string2.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0232670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        int int1 = (-1709);
        String string2 = options0.toString();
        optionGroup0.setRequired(true);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0232671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        int int1 = (-1709);
        String string2 = options0.toString();
        optionGroup0.setRequired(true);
        assertTrue(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0232672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("--");
        int int0 = helpFormatter0.getWidth();
        StringWriter stringWriter0 = new StringWriter(15);
        stringWriter0.write(1);
        helpFormatter0.setNewLine(" | ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
        String string1 = "";
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        int int1 = (-1709);
        String string2 = options0.toString();
        optionGroup0.setRequired(true);
        String string3 = "";
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 19, "--", "", options1, 3, (-1709), "", true);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0242673() throws Throwable {
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0242674() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0242675() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0242676() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0242677() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0242678() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0242679() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0242680() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0242681() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0242682() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0242683() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0242684() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0242685() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0242686() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0242687() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0242688() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0242689() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0242690() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0242691() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0242692() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0242693() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0242694() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0242695() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0242696() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0242697() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0242698() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0242699() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0242700() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0242701() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0242702() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0242703() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0242704() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0242705() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0242706() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("");
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 103, 103);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0252707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0252708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0252709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0252710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0252711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0252712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0252713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0252714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0252715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0252716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0252717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0252718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0252719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0252720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0252721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0252722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0252723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0252724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0252725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0252726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0252727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0252728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0252729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0252730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0252731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0252732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0252733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0252734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0252735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0252736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0252737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0252738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0252739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0252740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0252741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0252742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0252743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0252744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0252745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0252746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        assertFalse(optionGroup1.equals((Object) optionGroup0));
    }

    @Test(timeout = 4000)
    public void test0252747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0252748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0252749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0252750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNotSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0252751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0252752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0252753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.equals((Object) optionGroup0));
    }

    @Test(timeout = 4000)
    public void test0252754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0252755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0252756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0252757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0252758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNotSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0252759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0252760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0252761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0252762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0252763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0252764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0252765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0252766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(optionGroup1.equals((Object) optionGroup0));
    }

    @Test(timeout = 4000)
    public void test0252767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0252768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0252769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0252770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0252771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0252772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0252773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0252774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0252775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0252776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0252777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0252778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0252779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0252780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0252781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0252782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0252783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string0 = options0.toString();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup1);
        Options options2 = options1.addOption(option0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(1, "Ss>42{22", "", options2, "", true);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0262784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0262785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0262786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0262787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0262788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0262789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0262790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0262791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0262792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0262794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0262796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0262797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0262798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0262799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0262800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0262801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0262802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0262803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0262804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0262805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0262806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0262807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0262809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0262811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0262812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0262813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0262814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0262815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0262816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0262817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0262818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0262821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0262822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0262823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0262824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0262825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0262826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0262827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0262828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0262829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0262830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0262831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0262832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0262833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0262834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0262837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0262838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0262839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0262840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0262841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0262842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0262843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0262844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0262845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0262846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test0262847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0262848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0262849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0262850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0262851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0262854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0262855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0262856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0262857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0262858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0262859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0262860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0262861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0262862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0262863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0262864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0262865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0262866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0262868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0262869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0262870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0262871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0262872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0262873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        assertNotNull(mockFile1);
    }

    @Test(timeout = 4000)
    public void test0262874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        assertFalse(mockFile1.equals((Object) mockFile0));
    }

    @Test(timeout = 4000)
    public void test0262875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0262876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        assertFalse(mockFile0.equals((Object) mockFile1));
    }

    @Test(timeout = 4000)
    public void test0262877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        assertFalse(mockFile1.equals((Object) mockFile0));
    }

    @Test(timeout = 4000)
    public void test0262878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertNotSame(mockFile0, mockFile1);
    }

    @Test(timeout = 4000)
    public void test0262879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test0262880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertFalse(mockFile0.equals((Object) mockFile1));
    }

    @Test(timeout = 4000)
    public void test0262881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test0262882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test0262883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test0262884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertEquals("--", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test0262885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test0262886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test0262887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertFalse(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test0262888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test0262889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test0262890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test0262891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertEquals("--", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test0262892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test0262893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test0262894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertNull(mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test0262895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertTrue(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0262896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test0262897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        assertFalse(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0262898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean1 = mockFile0.mkdir();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "ac:cA74j", "ac:cA74j", (Options) null, 2360, (-2), "");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0272899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0272900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0272901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0272902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0272903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0272904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0272905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0272906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0272907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0272908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0272909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0272910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0272911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0272912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0272913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0272914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0272915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0272916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0272917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0272918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0272919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0272920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0272921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0272922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0272923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0272924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0272925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0272926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0272927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0272928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0272929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0272930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0272931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0272932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0272933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0272934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0272935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0272936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0272937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0272938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0272939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0272940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0272941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0272942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0272943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0272944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0272945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0272946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0272947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0272948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0272949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0272950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0272951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0272952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0272953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0272954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0272955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0272956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0272957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0272958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0272959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0272960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0272961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0272962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0272963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0272964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0272965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0272966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0272967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0272968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0272969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0272970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0272971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0272972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0272973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0272974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0272975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0272976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0272977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0272978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0272979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0272980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0272981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0272982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0272983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0272984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0272985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "org.apache.commons.cli.HelpFormatter", true);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0282986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0282987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0282988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0282989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0282990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0282991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0282992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0282993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0282994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0282995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0282996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0282997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0282998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0282999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0283000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0283001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0283002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0283003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0283004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0283005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0283006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0283007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0283008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0283009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0283010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0283011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0283012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertEquals(7, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0283013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0283014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0283015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0283016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0283017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0283018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0283019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0283020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0283021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0283022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0283023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(7, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0283024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0283025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0283026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0283027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0283028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0283029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0283030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0283031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0283032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0283033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0283034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0283035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0283036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0283037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0283038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0283039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0283040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0283041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0283042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0283043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0283044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        Locale locale0 = Locale.JAPANESE;
        Object[] objectArray0 = new Object[7];
        objectArray0[0] = (Object) helpFormatter0;
        objectArray0[1] = (Object) locale0;
        objectArray0[2] = (Object) helpFormatter0;
        objectArray0[3] = (Object) locale0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) locale0;
        objectArray0[6] = (Object) locale0;
        PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
        Options options0 = new Options();
        helpFormatter0.printUsage(printWriter0, 36, "", options0);
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0293045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0293046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0293047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0293048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0293049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0293050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0293051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0293052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0293053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0293054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0293055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0293056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0293057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0293058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0293059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0293060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0293061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0293062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0293063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0293064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0293065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0293066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0293067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0293068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0293069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0293070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertEquals("usage: ", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0293071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0293072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertEquals("--", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0293073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0293074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0293075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0293076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0293077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0293078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0293079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0293080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0293081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0293082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0293083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0293084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0293085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0293086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0293087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertEquals("usage: ", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0293088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0293089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertEquals("--", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0293090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0293091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0293092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0293093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0293094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0293095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertEquals("usage: ", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0293096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0293097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0293098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0293099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0293100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0293101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0293102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0293103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0293104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0293105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0293106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0293107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0293108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0293109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("usage: ", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0293110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0293111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("--", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0293112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0293113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0293114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0293115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0293116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0293117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("usage: ", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0293118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0293119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0293120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0293121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0293122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0293123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0293124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0293125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0293126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0293127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0293128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0293129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0293130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0293131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0293132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0293133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0293134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0293135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("usage: ", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0293136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0293137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("--", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0293138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0293139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0293140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0293141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0293142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0293143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("usage: ", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0293144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0293145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0293146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0293147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0293148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0293149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0293150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0293151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0293152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test0293153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0293154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test0293155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0293156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0293157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0293158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0293159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0293160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0293161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0293162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0293163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0293164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0293165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0293166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0293167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0293168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0293169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0293170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0293171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("usage: ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "usage: ", false, "--");
        option0.setArgName("usage: ");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        List list0 = options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, true);
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) null, (-2), 408, "[ARG...]");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0303172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0303173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0303174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0303175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0303176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0303177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0303178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0303179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0303180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0303182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0303183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0303184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0303185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0303186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0303188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0303189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0303190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0303191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0303192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0303193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0303194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0303195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0303196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0303198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0303199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0303200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0303201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0303203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0303204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0303205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0303206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0303207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0303208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0303209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0303210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0303211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0303212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0303214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0303215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0303216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0303217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0303219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0303220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0303221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0303222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0303223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0303224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0303225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0303226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0303227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0303228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0303229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0303230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0303231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0303232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0303233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0303234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0303235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0303236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0303237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0303238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0303239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0303240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0303241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0303242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0303243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0303244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0303245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0303246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0303247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0303248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0303249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0303250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0303251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0303252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0303253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0303254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0303255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0303256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0303257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0303258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0303259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0303260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0303261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0303262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0303263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0303264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0303265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0303266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0303267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0303268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0303269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0303270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0303272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0303273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0303274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0303275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0303277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0303278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0303279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0303280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0303281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0303282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0303283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0303284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0303285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0303286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0303287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0303288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0303289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0303290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0303291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0303292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(918, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0303293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0303294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0303295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0303296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0303297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(10, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0303298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals("arg", string0);
    }

    @Test(timeout = 4000)
    public void test0303299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0303300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(918, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0303301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(10, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0303302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0303304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0303305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0303306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0303307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0303308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0303309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0303310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
        Object[] objectArray0 = new Object[6];
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test0303311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
        Object[] objectArray0 = new Object[6];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) "arg";
        objectArray0[2] = (Object) "[ option: ";
        objectArray0[3] = (Object) options0;
        objectArray0[4] = (Object) "";
        objectArray0[5] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0303312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
        Object[] objectArray0 = new Object[6];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) "arg";
        objectArray0[2] = (Object) "[ option: ";
        objectArray0[3] = (Object) options0;
        objectArray0[4] = (Object) "";
        objectArray0[5] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0303313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
        Object[] objectArray0 = new Object[6];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) "arg";
        objectArray0[2] = (Object) "[ option: ";
        objectArray0[3] = (Object) options0;
        objectArray0[4] = (Object) "";
        objectArray0[5] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
        assertEquals(6, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0303314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
        Object[] objectArray0 = new Object[6];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) "arg";
        objectArray0[2] = (Object) "[ option: ";
        objectArray0[3] = (Object) options0;
        objectArray0[4] = (Object) "";
        objectArray0[5] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0303315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(918);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "-");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        String string0 = helpFormatter0.getArgName();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
        Object[] objectArray0 = new Object[6];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) "arg";
        objectArray0[2] = (Object) "[ option: ";
        objectArray0[3] = (Object) options0;
        objectArray0[4] = (Object) "";
        objectArray0[5] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage(printWriter0, (-2), "", options0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0313316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0313317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0313318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0313319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0313320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0313321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0313322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0313323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0313324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0313325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0313326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0313327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0313328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0313329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0313330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0313331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0313332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0313333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0313334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertEquals("arg", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test0313335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test0313336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertTrue(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test0313337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test0313338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test0313339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test0313340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertNull(mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test0313341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test0313342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test0313343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test0313344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertFalse(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0313345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertFalse(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0313346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertEquals("arg", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test0313347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test0313348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test0313349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test0313350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0313351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("arg");
        boolean boolean0 = mockFile0.createNewFile();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1819, ">713>99&9uG~Z ", "org.apache.commons.cli.HelpFormatter$1", (Options) null, (-2524), (-825), "[F+C-r{J", true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0323352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0323353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0323354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0323355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0323356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0323357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0323358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0323359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0323360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0323361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0323362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0323363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0323364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0323365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0323366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0323367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0323368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0323369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0323370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0323371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0323372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0323373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0323374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test0323375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0323376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0323377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0323378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0323379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0323380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0323381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0323382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0323383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0323384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0323385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertNotNull(pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test0323386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0323387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0323388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0323389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0323390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0323391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 29, "IHPX>p2[t=)87{C9,t", "IHPX>p2[t=)87{C9,t", options0, (-2), (-2), "Qt/,RE-u+rW,I");
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0333392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0333393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0333394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0333395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0333396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0333397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0333398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0333399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0333400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0333401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0333402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0333403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0333404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0333405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0333406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0333407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0333408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0333409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "", true, "arg");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0333410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "", true, "arg");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0333411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "", true, "arg");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0333412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "", true, "arg");
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions((StringBuffer) null, 54, options1, 54, 54);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0343413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0343414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0343415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0343416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0343417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0343418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0343419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0343420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0343421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0343422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0343423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0343424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0343425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0343426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0343427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0343428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0343429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0343430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0343431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0343432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0343433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0343434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0343435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test0343436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0343437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0343438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0343439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0343440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0343441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0343442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0343443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0343444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0343445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0343446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0343447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        assertNotNull(mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test0343448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        assertFalse(mockPrintWriter1.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0343449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        assertNotSame(mockPrintWriter0, mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test0343450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        assertNotSame(mockPrintWriter1, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0343451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test0343452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        assertFalse(mockPrintWriter0.equals((Object) mockPrintWriter1));
    }

    @Test(timeout = 4000)
    public void test0343453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        assertFalse(mockPrintWriter1.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0343454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        assertArrayEquals(new char[] { '0', ';', 'u', 'i' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test0343455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        assertNotNull(mockPrintWriter2);
    }

    @Test(timeout = 4000)
    public void test0343456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        assertFalse(mockPrintWriter0.equals((Object) mockPrintWriter1));
    }

    @Test(timeout = 4000)
    public void test0343457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        assertFalse(mockPrintWriter1.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0343458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        assertFalse(mockPrintWriter2.equals((Object) mockPrintWriter1));
    }

    @Test(timeout = 4000)
    public void test0343459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        assertFalse(mockPrintWriter2.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0343460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertNotSame(mockPrintWriter0, mockPrintWriter2);
    }

    @Test(timeout = 4000)
    public void test0343461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertNotSame(mockPrintWriter0, mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test0343462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertNotSame(mockPrintWriter1, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0343463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertNotSame(mockPrintWriter1, mockPrintWriter2);
    }

    @Test(timeout = 4000)
    public void test0343464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertNotSame(mockPrintWriter2, mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test0343465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertNotSame(mockPrintWriter2, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0343466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0343467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0343468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0343469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0343470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0343471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0343472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertFalse(mockPrintWriter0.equals((Object) mockPrintWriter2));
    }

    @Test(timeout = 4000)
    public void test0343473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertFalse(mockPrintWriter0.equals((Object) mockPrintWriter1));
    }

    @Test(timeout = 4000)
    public void test0343474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertFalse(mockPrintWriter1.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0343475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertFalse(mockPrintWriter1.equals((Object) mockPrintWriter2));
    }

    @Test(timeout = 4000)
    public void test0343476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertFalse(mockPrintWriter2.equals((Object) mockPrintWriter1));
    }

    @Test(timeout = 4000)
    public void test0343477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertFalse(mockPrintWriter2.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0343478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0343479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0343480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0343481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0343482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0343483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0343484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0343485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0343486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0343487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0343488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0343489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0343490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0343491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0343492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0343493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string1);
    }

    @Test(timeout = 4000)
    public void test0343494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0343495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0343496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0343497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0343498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0343499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0343500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0343501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0343502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0343503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0343504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        char[] charArray0 = new char[4];
        charArray0[0] = '0';
        charArray0[1] = ';';
        charArray0[2] = 'u';
        charArray0[3] = 'i';
        mockPrintWriter1.println(charArray0);
        MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 2, 2, "-");
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0353505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0353506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0353507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0353508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0353509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0353510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0353511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0353512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0353513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0353514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0353515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0353516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0353517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0353518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0353519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0353520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0353521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals((-1), helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0353522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0353523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0353524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0353525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0353526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0353527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0353528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0353529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0353530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0353531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals((-1), helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0353532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0353533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0353534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0353535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0353536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals((-1), helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0353537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0353538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0353539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0353540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0353541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0353542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test0353543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0353544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0353545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0353546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0353547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0353548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals((-1), helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0353549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0353550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0353551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0353552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0353553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals((-1), helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0353554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0353555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0353556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0353557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0353558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0353559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string1);
    }

    @Test(timeout = 4000)
    public void test0353560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0353561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0353562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0353563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0353564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0353565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0353566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals((-1), helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0353567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0353568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0353569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0353570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0353571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-1);
        helpFormatter0.setLeftPadding((-1));
        int int1 = 0;
        String string0 = helpFormatter0.createPadding(0);
        String string1 = helpFormatter0.getLongOptPrefix();
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter((File) null, "--");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (Throwable e) {
            //
            // --
        }
    }

    @Test(timeout = 4000)
    public void test0363572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0363573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0363574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0363575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0363576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0363577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0363578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0363579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0363581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0363583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0363584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0363585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0363586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0363587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0363588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0363589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0363590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0363591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0363592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertNotNull(stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0363593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertEquals("usage: ", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0363594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        assertEquals("usage: ", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0363595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0363596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0363597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0363598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0363599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0363600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0363601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        assertEquals("usage: [", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0363602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        assertEquals("usage: [", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0363603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0363604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0363605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0363606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        assertEquals("usage: [0\n", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0363607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        assertEquals("usage: [0\n", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0363608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0363609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0363610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0363611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0363612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0363613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0363614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0363615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0363616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0363617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0363618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0363620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0363622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0363623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0363624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0363625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0363626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0363627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals("usage: [0\n\n", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0363628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        assertEquals("usage: [0\n\n", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0363629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0363630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0363631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0363632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0363633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0363634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0363635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(1, int1);
    }

    @Test(timeout = 4000)
    public void test0363636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertFalse(int1 == int0);
    }

    @Test(timeout = 4000)
    public void test0363637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0363639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0363641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0363642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0363643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0363644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0363645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0363646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0363647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0363648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0363649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0363650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0363651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0363652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("-", string1);
    }

    @Test(timeout = 4000)
    public void test0363653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0363654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0363655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0363657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0363659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0363660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0363661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0363662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0363663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0363664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0363665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0363666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0363667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0363668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0363669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0363670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0363672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0363673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0363674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0363675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0363676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0363677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0363678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0363679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0363680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        PrintWriter printWriter0 = mockPrintWriter0.append('[');
        mockPrintWriter0.println((long) 0);
        String string0 = "";
        helpFormatter0.printWrapped(printWriter0, 0, "");
        int int1 = helpFormatter0.getLeftPadding();
        String string1 = helpFormatter0.getOptPrefix();
        helpFormatter0.setArgName("");
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", options0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0373681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0373682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0373683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0373684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0373685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0373686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0373687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0373688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0373689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0373690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0373691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0373692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0373693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0373694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0373695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0373696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0373697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0373698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0373699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        assertEquals("\n", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0373700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        assertEquals(1, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0373701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0373702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0373703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0373704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0373705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0373706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0373707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0373708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0373709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0373710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0373711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0373712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0373713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0373714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0373715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0373716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0373717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0373718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0373719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals("\n", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0373720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(1, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0373721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals("\n", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0373722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        assertEquals(1, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0373723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-848);
        String string0 = "";
        String string1 = "P";
        Options options0 = new Options();
        String string2 = "";
        boolean boolean0 = true;
        StringBuffer stringBuffer0 = new StringBuffer("\n");
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
        // Undeclared exception!
        try {
            stringBuffer1.insert((-328), true);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
            //
            // String index out of range: -328
        }
    }

    @Test(timeout = 4000)
    public void test0383724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0383725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0383726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0383727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0383728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0383729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0383730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0383731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0383732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0383733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0383734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0383735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0383736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0383737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0383738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0383739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0383740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0383741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0383742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0383743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0383744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0383745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0383746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0383747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0383748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0383749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0383750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0383751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertNull(helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0383752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0383753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0383754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0383755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0383756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0383757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0383758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0383759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0383760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0383761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0383762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0383763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0383764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0383765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0383766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0383767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertEquals("kB", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0383768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0383769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0383770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0383775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0383776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test0383777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test0383778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0383779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0383780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0383781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0383782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0383783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0383784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0383785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0383786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0383787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0383788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0383789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertEquals("kB", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0383790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0383791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0383792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0383797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0383798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0383799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0383800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0383801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0383802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0383803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0383804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0383805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0383806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0383807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0383808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0383809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0383810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0383811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0383812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertEquals("kB", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0383813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0383814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0383815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0383820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0383821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0383822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0383823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0383824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0383825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0383826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0383827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0383828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0383829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0383830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0383831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertEquals("kB", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0383832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0383833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0383834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0383839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0383840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0383841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0383842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0383843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0383844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0383845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0383846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0383847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0383848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test0383849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test0383850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test0383851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test0383852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0383853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0383854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertNotNull(options3);
    }

    @Test(timeout = 4000)
    public void test0383855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0383856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0383857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0383858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0383859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0383860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertEquals("kB", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0383861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0383862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0383863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0383868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0383869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0383870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0383871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0383872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0383873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0383874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0383875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0383876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0383877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0383878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0383879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0383880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0383881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0383882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0383883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0383884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0383885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertEquals("kB", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0383886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0383887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0383888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0383891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0383892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0383893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0383894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        int int0 = 0;
        Options options0 = new Options();
        Option option0 = new Option("", "kB");
        List list0 = options0.helpOptions();
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", false, "\n");
        OptionGroup optionGroup0 = new OptionGroup();
        option0.setOptionalArg(false);
        Options options3 = options2.addOptionGroup(optionGroup0);
        boolean boolean0 = options1.hasOption((String) null);
        int int1 = 0;
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions(stringBuffer0, 0, options3, 0, 0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0393895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0393896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0393897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0393898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0393899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0393900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0393901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0393902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0393903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0393904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0393905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0393906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0393907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0393908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0393909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0393910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0393911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0393912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0393913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0393914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0393915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0393916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0393917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test0393918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0393919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0393920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0393921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0393922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0393923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0393924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0393925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0393926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0393927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0393928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\":`9;");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0393929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\":`9;");
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test0393930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\":`9;");
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        objectArray0[2] = (Object) "\":`9;";
        objectArray0[3] = (Object) "[ARG...]";
        mockPrintWriter0.print((Object) "[ARG...]");
        PrintWriter printWriter0 = mockPrintWriter0.format("[ARG...]", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0393931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\":`9;");
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        objectArray0[2] = (Object) "\":`9;";
        objectArray0[3] = (Object) "[ARG...]";
        mockPrintWriter0.print((Object) "[ARG...]");
        PrintWriter printWriter0 = mockPrintWriter0.format("[ARG...]", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0393932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\":`9;");
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        objectArray0[2] = (Object) "\":`9;";
        objectArray0[3] = (Object) "[ARG...]";
        mockPrintWriter0.print((Object) "[ARG...]");
        PrintWriter printWriter0 = mockPrintWriter0.format("[ARG...]", objectArray0);
        assertEquals(4, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0393933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\":`9;");
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        objectArray0[2] = (Object) "\":`9;";
        objectArray0[3] = (Object) "[ARG...]";
        mockPrintWriter0.print((Object) "[ARG...]");
        PrintWriter printWriter0 = mockPrintWriter0.format("[ARG...]", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0393934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\":`9;");
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        objectArray0[2] = (Object) "\":`9;";
        objectArray0[3] = (Object) "[ARG...]";
        mockPrintWriter0.print((Object) "[ARG...]");
        PrintWriter printWriter0 = mockPrintWriter0.format("[ARG...]", objectArray0);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage(printWriter0, (-1788), "The option '");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0403935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0403936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0403937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0403938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0403939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0403940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0403941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0403942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0403943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0403944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0403945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0403946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0403947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0403948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0403949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0403950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0403951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0403952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test0403953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Object object1 = new Object();
        assertNotNull(object1);
    }

    @Test(timeout = 4000)
    public void test0403954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Object object1 = new Object();
        assertFalse(object1.equals((Object) object0));
    }

    @Test(timeout = 4000)
    public void test0403955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Object object1 = new Object();
        objectArray0[1] = object1;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) mockPrintWriter0;
        objectArray0[4] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0403956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Object object1 = new Object();
        objectArray0[1] = object1;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) mockPrintWriter0;
        objectArray0[4] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0403957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Object object1 = new Object();
        objectArray0[1] = object1;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) mockPrintWriter0;
        objectArray0[4] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertEquals(5, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0403958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Object object1 = new Object();
        objectArray0[1] = object1;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) mockPrintWriter0;
        objectArray0[4] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0403959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Object object1 = new Object();
        objectArray0[1] = object1;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) mockPrintWriter0;
        objectArray0[4] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(printWriter0, (-740), "K-|PUWPd2<)?~", "org.apache.commons.cli.Options", (Options) null, (-4322), (-1104), "org.apache.commons.cli.Option", false);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0413960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0413961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0413962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0413963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0413964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0413965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0413966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0413967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0413968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0413969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0413970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0413971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0413972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0413973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0413974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0413975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0413976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0413977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0413978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0413979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0413980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0413981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0413982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0413983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0413984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0413985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0413986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0413987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0413988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0413989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0413990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0413991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals("   ", string0);
    }

    @Test(timeout = 4000)
    public void test0413992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0413993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0413994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0413995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0413996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0413997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0413998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0413999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0414001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0414002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0414003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0414004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0414005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0414006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0414007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0414008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0414009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0414010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0414011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0414012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0414014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0414016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        assertEquals("   ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0414017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0414018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0414019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0414020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0414021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0414022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0414023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals("   ", string1);
    }

    @Test(timeout = 4000)
    public void test0414024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0414025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertTrue(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0414026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0414027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0414028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0414029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0414030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0414032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0414034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        assertEquals("   ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0414035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0414036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0414037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0414038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0414039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0414040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0414041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals("\n", string2);
    }

    @Test(timeout = 4000)
    public void test0414042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertNotNull(string2);
    }

    @Test(timeout = 4000)
    public void test0414043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertFalse(string2.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test0414044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertFalse(string2.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0414045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0414046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0414047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0414048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0414049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0414051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0414053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        assertEquals("   ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0414054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0414055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0414056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0414057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0414058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0414059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0414060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals("", string3);
    }

    @Test(timeout = 4000)
    public void test0414061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertNotNull(string3);
    }

    @Test(timeout = 4000)
    public void test0414062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertFalse(string3.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0414063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertFalse(string3.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test0414064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertFalse(string3.equals((Object) string2));
    }

    @Test(timeout = 4000)
    public void test0414065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0414066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0414067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0414068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0414069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0414071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0414073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        assertEquals("   ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0414074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0414075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0414076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0414077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0414078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0414079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0414080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string4);
    }

    @Test(timeout = 4000)
    public void test0414081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertNotNull(string4);
    }

    @Test(timeout = 4000)
    public void test0414082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string4.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0414083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string4.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test0414084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string4.equals((Object) string2));
    }

    @Test(timeout = 4000)
    public void test0414085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string4.equals((Object) string3));
    }

    @Test(timeout = 4000)
    public void test0414086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0414087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0414088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0414089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0414090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0414092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0414093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0414094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        String string0 = helpFormatter0.createPadding(3);
        helpFormatter0.setLongOptSeparator("   ");
        String string1 = helpFormatter0.createPadding(3);
        String string2 = helpFormatter0.getNewLine();
        String string3 = helpFormatter0.rtrim("\n");
        String string4 = helpFormatter0.getSyntaxPrefix();
        assertEquals("   ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0424095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0424096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0424097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0424098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0424099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0424100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0424101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0424102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0424103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0424104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0424105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0424106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0424107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0424108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0424109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0424111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0424112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0424113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0424114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0424115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0424117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0424118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0424121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0424123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertEquals("arg", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0424125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0424126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0424127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0424128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0424130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0424131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0424132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0424133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0424134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0424136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0424137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0424140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0424142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0424144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0424145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0424146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0424147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0424149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0424150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0424151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0424152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0424153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0424154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0424155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0424156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0424157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0424159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0424160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0424163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0424165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertEquals("arg", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0424167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0424168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0424169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0424170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0424172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0424173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0424175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0424176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0424179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0424181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertEquals("arg", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0424183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0424184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0424185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0424186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0424188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0424189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0424190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0424191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0424192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0424193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0424194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0424195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test0424196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test0424197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test0424198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test0424199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0424200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0424201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertNotNull(options3);
    }

    @Test(timeout = 4000)
    public void test0424202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0424204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0424205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0424208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0424210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertEquals("arg", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0424212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0424213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0424214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0424215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0424217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0424218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0424220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0424221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0424222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0424223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0424224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0424225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0424226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0424227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test0424228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0424229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0424230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test0424231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0424233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0424234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0424237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0424239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertEquals("arg", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0424241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0424242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0424243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0424244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0424246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test0424247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0424248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0424249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0424250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0424251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0424252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0424254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0424255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0424258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0424260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("arg", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0424262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0424263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0424264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0424265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0424267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0424269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options0, options4);
    }

    @Test(timeout = 4000)
    public void test0424271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0424272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0424273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0424274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0424275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options1, options4);
    }

    @Test(timeout = 4000)
    public void test0424276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0424277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0424278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0424279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0424280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test0424281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options2, options4);
    }

    @Test(timeout = 4000)
    public void test0424282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test0424283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options3, options4);
    }

    @Test(timeout = 4000)
    public void test0424284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test0424285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test0424286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0424287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0424288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options4, options1);
    }

    @Test(timeout = 4000)
    public void test0424289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options4, options0);
    }

    @Test(timeout = 4000)
    public void test0424290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options4, options3);
    }

    @Test(timeout = 4000)
    public void test0424291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertSame(options4, options2);
    }

    @Test(timeout = 4000)
    public void test0424292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0424293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0424294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertNotNull(options4);
    }

    @Test(timeout = 4000)
    public void test0424295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0424297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0424298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0424301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0424303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertEquals("arg", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0424305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0424306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0424307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0424308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0424310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0424312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options0, options4);
    }

    @Test(timeout = 4000)
    public void test0424314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0424315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0424316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0424317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0424318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options1, options4);
    }

    @Test(timeout = 4000)
    public void test0424319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0424320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0424321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0424322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0424323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test0424324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options2, options4);
    }

    @Test(timeout = 4000)
    public void test0424325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test0424326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options3, options4);
    }

    @Test(timeout = 4000)
    public void test0424327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test0424328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test0424329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0424330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0424331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options4, options1);
    }

    @Test(timeout = 4000)
    public void test0424332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options4, options0);
    }

    @Test(timeout = 4000)
    public void test0424333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options4, options3);
    }

    @Test(timeout = 4000)
    public void test0424334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertSame(options4, options2);
    }

    @Test(timeout = 4000)
    public void test0424335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0424336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0424337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0424338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0424339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0424340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0424341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0424342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0424343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0424344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0424345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0424346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0424347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0424348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0424349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0424350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0424352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0424354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0424355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0424358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0424359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0424360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0424361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals("arg", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0424362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0424363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0424364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0424365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0424366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0424367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0424369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0424370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0424371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0424372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0424373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        String string0 = "";
        Option option0 = new Option("", true, "arg");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("arg", true, "\n");
        option0.setArgName("arg");
        Options options3 = options2.addOption("", "\n", true, "");
        OptionGroup optionGroup0 = new OptionGroup();
        List list0 = options2.helpOptions();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options4 = options3.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("[", options4);
        StringBuffer stringBuffer0 = new StringBuffer("");
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions(stringBuffer0, 1708, options4, (-1), (-2));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0434374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0434375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0434376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0434377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0434378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0434379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0434380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0434381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0434382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0434383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0434384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0434385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0434386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0434387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0434388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0434389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0434390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0434391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0434392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0434393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0434394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0434395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        assertNotNull(mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test0434396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0434397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0434398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0434399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0434400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0434401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0434402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0434403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0434404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0434405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0434406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0434407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0434408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0434409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0434410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0434411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0434412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0434413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0434414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0434415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0434416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0434417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0434418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0434419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0434420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0434421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0434422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0434423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0434424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0434425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0434426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0434427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0434428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0434429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0434430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0434431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0434432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0434433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0434434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0434435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0434436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0434437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test0434438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test0434439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test0434440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test0434441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertNotNull(options3);
    }

    @Test(timeout = 4000)
    public void test0434442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0434443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0434444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0434445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0434446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0434447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0434448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0434449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0434450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0434451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0434452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test0434453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0434454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0434455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0434456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0434457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0434458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0434459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0434460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0434461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0434462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0434463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0434464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0434465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0434466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0434467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "-");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
        helpFormatter0.printOptions(printWriter0, 1549, options1, 1549, 3);
        Options options2 = options1.addOption((String) null, "VRplBWKp#D", false, "iD'K?bn'aYdH3!{");
        OptionGroup optionGroup0 = new OptionGroup();
        Options options3 = options2.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("-", options2);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0444468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0444469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0444470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0444471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0444472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0444473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0444474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0444475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0444476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0444478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0444479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0444480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0444481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0444482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0444484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0444485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        assertEquals(">", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0444486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        assertEquals(1, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0444487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0444488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0444489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0444490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0444491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0444492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0444493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0444494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0444495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0444496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0444497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0444499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0444500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0444501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0444502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0444503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0444505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(2, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0444506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(">>", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0444507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(">>", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0444508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        assertEquals(2, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0444509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0444510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0444511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0444512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(0, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0444513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0444514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0444515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(0, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0444516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0444518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0444519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0444520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0444521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0444522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0444524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0444525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0444526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0444527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(0, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0444528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0444529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0444530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals("          ", string0);
    }

    @Test(timeout = 4000)
    public void test0444531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0444532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(0, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0444533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0444535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0444536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0444537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0444538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0444539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0444541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0444542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0444543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0444544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(0, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0444545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0444546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0444547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertNotNull(comparator0);
    }

    @Test(timeout = 4000)
    public void test0444548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(0, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0444549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0444551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0444552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0444553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0444554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0444555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0444557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0444558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0444559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0444560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(0, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0444561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0444562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0444563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(0, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0444564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0444565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0444566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0444567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0444568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0444569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0444570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0444571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(">");
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, ">");
        helpFormatter0.setLeftPadding(0);
        String string0 = helpFormatter0.createPadding(10);
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        helpFormatter0.setLongOptPrefix((String) null);
        assertNull(helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0454573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0454574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0454575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0454576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0454577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0454578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0454579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0454589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0454590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0454591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0454592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0454593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0454594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0454604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0454605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0454606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0454607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0454608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0454609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        assertEquals("x'W67qe @qB{Zsu", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        assertEquals("x'W67qe @qB{Zsu", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0454628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0454629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0454630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0454631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0454632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0454633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, int0);
    }

    @Test(timeout = 4000)
    public void test0454634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        assertEquals("x'W67qe @qB{Zsu", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0454644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0454645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0454646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0454647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0454648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0454649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test0454650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0454651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("x'W67qe @qB{Zsu", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0454661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0454662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0454663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0454664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0454665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0454666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals((-1), int1);
    }

    @Test(timeout = 4000)
    public void test0454667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertFalse(int1 == int0);
    }

    @Test(timeout = 4000)
    public void test0454668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        assertEquals("x'W67qe @qB{Zsu", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        assertEquals(" ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        assertEquals("x'W67qe @qB{Zsu", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0454687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0454688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0454689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0454690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(0, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0454691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0454692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(" ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(0, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        assertEquals("x'W67qe @qB{Zsu", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0454702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0454703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0454705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        assertEquals(0, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0454706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0454707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0454708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0454709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("x'W67qe @qB{Zsu", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0454710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.setLongOptPrefix("x'W67qe @qB{Zsu");
        helpFormatter0.defaultLongOptPrefix = "x'W67qe @qB{Zsu";
        int int0 = helpFormatter0.getWidth();
        String string0 = helpFormatter0.getLongOptSeparator();
        int int1 = helpFormatter0.findWrapPos(" ", 74, 74);
        helpFormatter0.defaultOptPrefix = " ";
        helpFormatter0.setWidth(0);
        Options options0 = null;
        helpFormatter0.defaultOptPrefix = "";
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("x'W67qe @qB{Zsu", "", (Options) null, "b7kS}sflFb)p>vjSM", true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0464711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0464712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0464713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0464714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0464715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0464716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0464717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0464718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0464719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0464720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0464721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0464722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0464723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0464724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0464725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0464726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0464727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("*x)9%vnL=", (Options) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0474728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0474729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0474730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0474731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0474732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0474733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0474734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0474735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0474736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0474737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0474738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0474739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0474740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0474741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0474742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0474743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0474744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0474745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test0474746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0474747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test0474748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.helpOptions();
        String string0 = "org.apache.commons.cli.HelpFormatter";
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((-3055), "", "", options0, "org.apache.commons.cli.HelpFormatter");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0484749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0484750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0484751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0484752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0484753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0484754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0484755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0484756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0484757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0484758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0484759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0484760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0484761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0484762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0484763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0484764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0484765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0484766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0484767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0484768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0484769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(760, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0484770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0484771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0484772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0484773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0484774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0484775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0484776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals(760, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0484777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0484778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0484779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0484780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0484781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        assertNull(option0);
    }

    @Test(timeout = 4000)
    public void test0484782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0484783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0484784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertNotNull(option1);
    }

    @Test(timeout = 4000)
    public void test0484785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertFalse(option1.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0484786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertEquals("", option1.getOpt());
    }

    @Test(timeout = 4000)
    public void test0484787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertFalse(option1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0484788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertEquals("", option1.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0484789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertNull(option1.getValue());
    }

    @Test(timeout = 4000)
    public void test0484790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertFalse(option1.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0484791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertFalse(option1.hasArg());
    }

    @Test(timeout = 4000)
    public void test0484792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertFalse(option1.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0484793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertEquals("arg", option1.getArgName());
    }

    @Test(timeout = 4000)
    public void test0484794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertEquals((-1), option1.getArgs());
    }

    @Test(timeout = 4000)
    public void test0484795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertEquals('\u0000', option1.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0484796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertTrue(option1.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0484797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertTrue(option1.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0484798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        assertEquals("", option1.getDescription());
    }

    @Test(timeout = 4000)
    public void test0484799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0484800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0484801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0484802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0484803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0484804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertFalse(option1.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0484805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertEquals("", option1.getOpt());
    }

    @Test(timeout = 4000)
    public void test0484806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertFalse(option1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0484807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertEquals("", option1.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0484808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertNull(option1.getValue());
    }

    @Test(timeout = 4000)
    public void test0484809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertFalse(option1.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0484810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertFalse(option1.hasArg());
    }

    @Test(timeout = 4000)
    public void test0484811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertFalse(option1.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0484812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertEquals("arg", option1.getArgName());
    }

    @Test(timeout = 4000)
    public void test0484813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertEquals((-1), option1.getArgs());
    }

    @Test(timeout = 4000)
    public void test0484814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertEquals('\u0000', option1.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0484815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertTrue(option1.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0484816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertTrue(option1.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0484817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        assertEquals("", option1.getDescription());
    }

    @Test(timeout = 4000)
    public void test0484818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(760);
        Options options0 = new Options();
        Option option0 = options0.getOption("");
        Option option1 = new Option("", "", false, "");
        Options options1 = options0.addOption(option1);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", "", options1, "FMI(?zcf");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0494819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0494820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0494821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0494822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0494823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0494824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0494825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0494826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0494827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0494828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0494829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0494830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0494831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0494833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0494835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0494836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0494837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0494838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0494839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0494840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0494841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0494842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0494843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0494844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0494845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0494846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals("arg", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0494849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0494850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0494851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0494852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0494853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0494854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        assertNotNull(stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0494855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        assertEquals("s", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0494856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        assertEquals("s", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0494857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0494858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0494859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0494860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0494861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0494862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertEquals(1, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0494863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0494864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertEquals("s", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0494865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        assertEquals("s", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0494866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertSame(stringWriter0, stringWriter1);
    }

    @Test(timeout = 4000)
    public void test0494867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertSame(stringWriter1, stringWriter0);
    }

    @Test(timeout = 4000)
    public void test0494868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0494869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0494870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(1, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0494871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0494872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0494873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0494874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0494875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0494876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0494877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0494878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0494879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0494880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0494881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0494882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals("arg", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0494885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0494886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals("susage: org.apache.commons.cli.HelpFormatter$1\n", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test0494887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        assertEquals("susage: org.apache.commons.cli.HelpFormatter$1\n", stringWriter1.toString());
    }

    @Test(timeout = 4000)
    public void test0494888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0494889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0494890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0494891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0494892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0494893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0494894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test0494895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0494896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0494897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0494898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0494899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0494900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0494901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0494904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0494905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0494906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0494907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0494908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0494909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0494910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0494911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, int0);
    }

    @Test(timeout = 4000)
    public void test0494912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0494913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0494914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0494915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0494916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0494917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0494919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0494920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("arg");
        StringWriter stringWriter0 = new StringWriter(74);
        StringWriter stringWriter1 = stringWriter0.append('s');
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
        Object[] objectArray0 = new Object[1];
        objectArray0[0] = (Object) mockPrintWriter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
        helpFormatter0.printUsage(printWriter0, 1221, "org.apache.commons.cli.HelpFormatter$1");
        String string0 = helpFormatter0.getOptPrefix();
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0504921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0504922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0504923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0504924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0504925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0504926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0504927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0504928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0504930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0504932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0504933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0504934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0504935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0504936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0504937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0504938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0504939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0504940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0504941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0504942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0504943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0504945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0504946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0504947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0504948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0504949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0504950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertNull(helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0504952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0504953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0504954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0504955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0504956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0504957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0504958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0504960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0504961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0504962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0504963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0504964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0504965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertNull(helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0504967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0504969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0504970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        assertEquals("", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0504971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0504972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0504973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0504974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0504975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        assertNull(helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0504977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0504978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(732, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0504979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0504980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0504981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0504982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0504984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(732, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0504985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals("", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0504986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0504987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0504988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0504989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0504990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        assertNull(helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0504991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0504992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0504993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(732, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0504994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0504995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0504996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0504997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test0504998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0504999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0505000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0505001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(732, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0505002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals("", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0505003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0505004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0505005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0505006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0505007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        assertNull(helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0505008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix((String) null);
        helpFormatter0.setArgName("");
        helpFormatter0.defaultSyntaxPrefix = "";
        int int0 = 732;
        helpFormatter0.setWidth(732);
        String string0 = helpFormatter0.rtrim("");
        Options options0 = null;
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", (Options) null, true);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0515009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0515010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0515011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0515012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0515013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0515014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0515015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0515016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0515017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0515018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0515019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0515020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0515021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0515022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0515023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0515024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0515025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        assertEquals(0, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0515026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0515027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0515028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0515029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0515030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0515031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0515032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0515033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0515034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0515035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        assertEquals("usage: ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0515036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        assertEquals(7, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0515037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0515038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0515039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0515040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0515041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0515042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0515043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0515044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(0, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0515045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0515046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(0, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0515047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0515048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0515049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0515050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0515051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0515052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0515053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0515054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0515055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("usage: ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0515056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(7, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0515057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("usage: ", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0515058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = 0;
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        int int0 = 0;
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(7, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0525059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0525060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0525061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0525062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0525063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0525064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0525065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0525066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0525067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0525068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0525069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0525070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0525071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0525072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0525073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0525074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0525075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0525076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0525077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0525078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0525079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0525080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0525081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals("[", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0525082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0525083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0525084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0525085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0525086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0525087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0525088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0525089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0525090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "[";
        helpFormatter0.setSyntaxPrefix("[");
        Options options0 = null;
        boolean boolean0 = false;
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", " :: ", (Options) null, "", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0535091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0535092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0535093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0535094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0535095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0535096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0535097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0535098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0535099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0535100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0535101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0535102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0535103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0535104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0535105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0535106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0535107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " [ARG]";
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0535108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " [ARG]";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<V");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0535109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " [ARG]";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<V");
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0535110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " [ARG]";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<V");
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0535111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " [ARG]";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<V");
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
        assertEquals(0, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0535112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " [ARG]";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<V");
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0535113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = " [ARG]";
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<V");
        Object[] objectArray0 = new Object[0];
        PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage(printWriter0, (-2), "<-2z'j@xi_AAjO/6{De", options0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0545114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0545115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0545116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0545117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0545118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0545119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0545120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0545121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0545122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0545123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0545124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0545125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0545126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0545127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0545128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0545129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0545130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0545131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0545132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0545133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0545134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0545135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0545136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0545137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0545138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0545139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0545140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0545141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0545142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0545143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0545144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        assertEquals("TQMt", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0545145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0545146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0545147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0545148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0545149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0545150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0545151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0545152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0545153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0545154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test0545155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0545156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0545157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0545158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0545159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0545160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("TQMt", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0545161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0545162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0545163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0545164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        helpFormatter0.defaultArgName = "";
        String string1 = "TQMt";
        helpFormatter0.defaultLongOptPrefix = "TQMt";
        int int0 = helpFormatter0.getLeftPadding();
        String string2 = "8h>p(.EE|pW";
        // Undeclared exception!
        try {
            helpFormatter0.findWrapPos("8h>p(.EE|pW", 1, (-1087));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0555165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0555166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0555167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0555168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0555169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0555170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0555171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0555172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0555173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0555175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0555176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0555177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0555178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0555180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0555181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0555182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        assertEquals(550, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0555184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0555185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0555186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0555187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0555189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0555190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0555191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0555192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0555193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0555194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals(550, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0555195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0555196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0555197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals(550, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0555199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0555200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals("nlD?p^L?`Te", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0555201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0555202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0555203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0555205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0555206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        assertEquals(550, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0555208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        assertEquals(4571, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0555209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        assertEquals("nlD?p^L?`Te", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0555210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0555211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0555212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0555214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0555215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals(550, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0555217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals(4571, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0555218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("nlD?p^L?`Te", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0555219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0555220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0555221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0555223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0555224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0555225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals(4571, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0555226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0555227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals(550, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0555228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0555229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0555230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals(550, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0555232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals(4571, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0555233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals("nlD?p^L?`Te", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0555234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0555235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0555236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0555238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0555239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0555240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(4571, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0555241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0555242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(550, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0555243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0555244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", string0);
    }

    @Test(timeout = 4000)
    public void test0555245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0555246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0555247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(550, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0555249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals(4571, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0555250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("nlD?p^L?`Te", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0555251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0555252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0555253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0555254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0555255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 550;
        helpFormatter0.setLongOptSeparator("nlD?p^L?`Te");
        helpFormatter0.defaultWidth = 4571;
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator0;
        Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator1);
        String string0 = helpFormatter0.getNewLine();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(0, "\n", "", (Options) null, (String) null, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0565256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0565257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0565258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0565259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0565260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0565261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0565262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0565263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0565264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0565265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0565266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0565267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0565268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0565269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0565270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0565271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0565272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0565273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test0565274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test0565275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test0565276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        assertTrue(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test0565277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        assertTrue(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test0565278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0565279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0565280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0565281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0565282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0565283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0565284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0565285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0565286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0565287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0565288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0565289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0565290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0565291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0565292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        assertEquals("$zY6ZZY7FF3", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0565293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0565294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0565295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0565296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0565297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0565298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0565299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0565300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0565301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertEquals("$zY6ZZY7FF3", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0565302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0565303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0565304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0565305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0565306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertEquals("", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0565307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0565308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0565309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0565310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0565311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0565312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0565313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0565314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0565315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0565316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0565317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0565318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0565319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0565320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertEquals("$zY6ZZY7FF3", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0565321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0565322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0565323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0565324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0565325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertEquals("", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0565326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0565327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0565328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0565329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "";
        Options options0 = new Options();
        boolean boolean0 = false;
        boolean boolean1 = options0.hasOption("--");
        String string1 = "$zY6ZZY7FF3";
        boolean boolean2 = options0.hasOption("usage: ");
        helpFormatter0.setArgName("$zY6ZZY7FF3");
        Option option0 = new Option("", "$zY6ZZY7FF3", false, "");
        Options options1 = options0.addOption(option0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", options0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0575330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0575331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0575332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0575333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0575334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0575335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0575336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0575337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0575338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0575339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0575340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0575341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0575342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0575343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0575344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0575345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0575346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0575347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test0575348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        Object object1 = new Object();
        assertNotNull(object1);
    }

    @Test(timeout = 4000)
    public void test0575349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        Object object1 = new Object();
        assertFalse(object1.equals((Object) object0));
    }

    @Test(timeout = 4000)
    public void test0575350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        Object object1 = new Object();
        objectArray0[2] = object1;
        PrintWriter printWriter0 = mockPrintWriter0.format(",\u0000Twq9", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0575351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        Object object1 = new Object();
        objectArray0[2] = object1;
        PrintWriter printWriter0 = mockPrintWriter0.format(",\u0000Twq9", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0575352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        Object object1 = new Object();
        objectArray0[2] = object1;
        PrintWriter printWriter0 = mockPrintWriter0.format(",\u0000Twq9", objectArray0);
        assertEquals(3, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0575353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        Object object1 = new Object();
        objectArray0[2] = object1;
        PrintWriter printWriter0 = mockPrintWriter0.format(",\u0000Twq9", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0575354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        Object object1 = new Object();
        objectArray0[2] = object1;
        PrintWriter printWriter0 = mockPrintWriter0.format(",\u0000Twq9", objectArray0);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0575355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) helpFormatter0;
        Object object0 = new Object();
        objectArray0[1] = object0;
        Object object1 = new Object();
        objectArray0[2] = object1;
        PrintWriter printWriter0 = mockPrintWriter0.format(",\u0000Twq9", objectArray0);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(printWriter0, (-3982), "[", "[", options0, (-1), 1856, "Se.[_)1;/X@GA&__", true);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0585356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0585357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0585358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0585359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0585360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0585361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0585362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0585363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0585364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0585365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0585366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0585367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0585368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0585369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0585370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0585371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0585372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0585373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0585374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0585375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0585376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0585377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0585378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals("&?\nKwz}_", string0);
    }

    @Test(timeout = 4000)
    public void test0585379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0585380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0585381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0585382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0585383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0585384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0585385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0585386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0585387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0585388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0585389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0585390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0585391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0585392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0585393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0585394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0585395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0585396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0585397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0585398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0585399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0585400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0585401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0585402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0585403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0585404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0585405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0585406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0585407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim("&?\nKwz}_");
        Options options0 = new Options();
        String string1 = options0.toString();
        helpFormatter0.printHelp("&?\nKwz}_", "&?\nKwz}_", options0, "&?\nKwz}_");
        int int0 = (-1834);
        String string2 = null;
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((-1834), "&?\nKwz}_", (String) null, options0, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0595408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0595409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0595410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0595411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0595412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0595413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0595414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0595415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0595416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0595417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0595418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0595419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0595420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0595421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0595422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0595423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0595424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0595425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0595426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0595427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0595428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0595429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0595430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0595431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0595432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0595433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0595434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0595435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0595436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0595437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0595438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0595439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("T9sA8M", options0, true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0605440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0605441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0605442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0605443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0605444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0605445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0605446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0605447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0605448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0605449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0605450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0605451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0605452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0605453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0605454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0605455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0605456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}4P");
        assertNotNull(mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0605457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}4P");
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
        assertNotNull(bufferedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0605458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}4P");
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0605459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}4P");
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
        int int0 = (-1087);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1087), "}4P", (Options) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0615460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0615461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0615462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0615463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0615464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0615465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0615466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0615467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0615468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0615469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0615470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0615471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0615472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0615473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0615474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0615475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0615476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0615477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0615478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0615479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0615480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0615481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0615482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0615483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0615484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0615485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0615486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0615487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0615488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0615489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0615490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0615491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0615492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0615493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0615494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0615495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0615496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0615497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0615498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0615499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals("w+9Lr#}&r&(e", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0615500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0615501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0615502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0615503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0615504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0615505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0615506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0615507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0615508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertFalse(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0615509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertEquals("w+9Lr#}&r&(e", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test0615510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test0615511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test0615512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test0615513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test0615514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test0615515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertTrue(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0615516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test0615517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertEquals("/w+9Lr#}&r&(e", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test0615518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test0615519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test0615520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertEquals("/", mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test0615521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertTrue(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test0615522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test0615523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test0615524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0615525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "9F");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0615526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "9F");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0615527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "9F");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0615528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setNewLine("w+9Lr#}&r&(e");
        Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "";
        MockFile mockFile0 = new MockFile("", "w+9Lr#}&r&(e");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        mockPrintWriter0.println((Object) "/");
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "9F");
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-742), (String) null, "", options1, (-742), 1, "w+9Lr#}&r&(e", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0625529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0625530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0625531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0625532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0625533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0625534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0625535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0625536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0625537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0625538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0625539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0625540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0625541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0625542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0625543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0625544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0625545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0625546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0625547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0625548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0625549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0625550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0625551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        assertEquals((-5049), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0625552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0625553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0625554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(3, helpFormatter1.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0625555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0625556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0625557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(1, helpFormatter1.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0625558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0625559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(74, helpFormatter1.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0625560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertNotNull(helpFormatter1);
    }

    @Test(timeout = 4000)
    public void test0625561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertFalse(helpFormatter1.equals((Object) helpFormatter0));
    }

    @Test(timeout = 4000)
    public void test0625562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("\n", helpFormatter1.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0625563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0625564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(74, helpFormatter1.getWidth());
    }

    @Test(timeout = 4000)
    public void test0625565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(1, helpFormatter1.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0625566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("arg", helpFormatter1.getArgName());
    }

    @Test(timeout = 4000)
    public void test0625567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("--", helpFormatter1.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0625568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("-", helpFormatter1.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0625569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(" ", helpFormatter1.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0625570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(3, helpFormatter1.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0625571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0625572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
        assertEquals(1, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0625573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
        assertEquals("\n", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0625574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
        int int0 = (-8);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0625575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-5049);
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
        int int0 = (-8);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter1.renderOptions(stringBuffer0, (-8), options0, (-35), 864);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0635576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0635577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0635578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0635579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0635580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0635581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0635582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0635583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0635584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0635585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0635586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0635587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0635588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0635589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0635590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0635591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0635592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        assertNotNull(mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0635593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0635594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        assertNotNull(mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test0635595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        assertFalse(mockPrintWriter1.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0635596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertNotSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0635597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertNotSame(mockPrintWriter0, mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test0635598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertNotSame(mockPrintWriter1, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0635599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertSame(mockPrintWriter1, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0635600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertSame(printWriter0, mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test0635601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertNotSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0635602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0635603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertFalse(mockPrintWriter0.equals((Object) mockPrintWriter1));
    }

    @Test(timeout = 4000)
    public void test0635604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertFalse(mockPrintWriter1.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0635605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        assertFalse(printWriter0.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0635606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*JJMup^Em-QvA*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
        PrintWriter printWriter0 = mockPrintWriter1.append('u');
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped(printWriter0, 1, 1, "%*JJMup^Em-QvA*");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0645607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0645608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0645609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0645610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0645611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0645612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0645613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0645614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0645615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0645616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0645617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0645618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0645619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0645620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0645621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0645622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0645623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0645624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0645625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        assertEquals(1687, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0645626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0645627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0645628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0645629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0645630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0645631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0645632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0645633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0645634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0645635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0645636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0645637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1687, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0645638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test0645639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0645640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0645641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1687, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0645642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0645643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0645644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0645645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0645646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0645647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0645648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0645649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(31, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0645650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0645651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0645652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0645653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(1687, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0645654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0645655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0645656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(31, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0645657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(1687, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0645658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0645659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0645660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0645661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0645662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultDescPad = 1687;
        int int0 = helpFormatter0.getLeftPadding();
        helpFormatter0.setLeftPadding(31);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0655663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0655664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0655665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0655666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0655667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0655668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0655669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0655670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0655671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0655672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0655673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0655674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0655675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0655676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0655677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0655678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0655679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0655680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0655681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0655682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0655683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0655684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals((-1879), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0655685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0655686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0655687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals((-1879), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0655688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0655689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0655690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0655691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0655692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0655693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0655694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth((-1879));
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) null, 4427, "_CV-qOcIV1>'8E9");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0665695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0665696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0665697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0665698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0665699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0665700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0665701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0665702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0665703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0665704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0665705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0665706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0665707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0665708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0665709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0665710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0665711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0665712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0665713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        assertEquals("arg", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0665714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0665715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        assertNotNull(mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0665716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0665717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test0665718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0665719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0665720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertEquals(9, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0665721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0665722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertTrue(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0665723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test0665724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertEquals(" ", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test0665725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertEquals("/Users/elliottzackrone/IdeaProjects/defects4jprefix/usage: ", mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test0665726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertEquals(15L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test0665727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test0665728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test0665729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test0665730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertTrue(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test0665731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test0665732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertEquals("/Users/elliottzackrone/IdeaProjects/defects4jprefix/usage: / ", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test0665733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test0665734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test0665735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test0665736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertFalse(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0665737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test0665738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        assertEquals(9, objectArray0.length);
    }

    @Test(timeout = 4000)
    public void test0665739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        assertNotNull(mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test0665740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        assertFalse(mockPrintWriter1.equals((Object) printWriter0));
    }

    @Test(timeout = 4000)
    public void test0665741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        assertFalse(mockPrintWriter1.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0665742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        MockFile mockFile0 = new MockFile("usage: ", " ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        Object[] objectArray0 = new Object[9];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) mockFile0;
        objectArray0[2] = (Object) mockFile0;
        objectArray0[3] = (Object) mockFile0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) stringBuffer0;
        objectArray0[6] = (Object) helpFormatter0;
        objectArray0[7] = (Object) mockFileOutputStream0;
        objectArray0[8] = (Object) helpFormatter0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("1T[MPmf6/yGLlvX", objectArray0);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, (-3300), "1f :5WD-yg@*Yk8");
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0675743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0675744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0675745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0675746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0675747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0675748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0675749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0675750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0675751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0675752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0675753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0675754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0675755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0675756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0675757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0675758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0675759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0675760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0675761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        assertEquals("arg", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0675762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
        int int0 = 0;
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0685763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0685764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0685765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0685766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0685767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0685768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0685769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0685770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0685771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0685772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0685773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0685774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0685775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0685776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0685777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0685778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0685779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = (-76);
        // Undeclared exception!
        try {
            helpFormatter0.createPadding((-76));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0695780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0695781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0695782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0695783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0695784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0695785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0695786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0695787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0695788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0695789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0695790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0695791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0695792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0695793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0695794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0695795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0695796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0695797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0695798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(0, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0695799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0695800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0695801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0695802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0695803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0695804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0695805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0695806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0695807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(0, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0695808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0695809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0695810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0695811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7kymYe1");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0695812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7kymYe1");
        PrintWriter printWriter0 = mockPrintWriter0.append('$');
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0695813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7kymYe1");
        PrintWriter printWriter0 = mockPrintWriter0.append('$');
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0695814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = "arg";
        Options options0 = null;
        int int0 = 0;
        helpFormatter0.setLeftPadding(0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7kymYe1");
        PrintWriter printWriter0 = mockPrintWriter0.append('$');
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0705815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0705816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0705817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0705818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0705819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0705820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0705821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0705822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0705823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0705824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0705825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0705826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0705827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0705828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0705829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0705830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0705831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0705832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        PrintWriter printWriter0 = mockPrintWriter0.append('E');
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0705833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        PrintWriter printWriter0 = mockPrintWriter0.append('E');
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0705834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        PrintWriter printWriter0 = mockPrintWriter0.append('E');
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0705835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        PrintWriter printWriter0 = mockPrintWriter0.append('E');
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0705836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        PrintWriter printWriter0 = mockPrintWriter0.append('E');
        Options options0 = new Options();
        int int0 = (-502);
        // Undeclared exception!
        try {
            helpFormatter0.printOptions(printWriter0, 0, options0, 0, (-502));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0715837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0715838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0715839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0715840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0715841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0715842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0715843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0715844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0715845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0715846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0715847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0715848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0715849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0715850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0715851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0715852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0715853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0715854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0715855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0715856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0715857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0715858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0715859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0715860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0715861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0715862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0715863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0715864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0715865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0715866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0715867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0715868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0715869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0715870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0715871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0715872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0715873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        assertEquals("9:c16d=Fg@ryywr@H", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0715874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0715875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0715876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0715877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0715878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0715879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0715880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0715881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        assertNull(helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0715882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        assertEquals("9:c16d=Fg@ryywr@H", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0715883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0715884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0715885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0715886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PrintWriter printWriter0 = null;
        int int0 = 0;
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "9:c16d=Fg@ryywr@H";
        helpFormatter0.defaultArgName = "9:c16d=Fg@ryywr@H";
        String string1 = "n";
        String string2 = null;
        String string3 = null;
        helpFormatter0.defaultNewLine = null;
        Options options0 = null;
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) null, 0, ">Gj;P");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0725887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0725888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0725889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0725890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0725891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0725892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0725893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0725894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0725895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0725896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0725897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0725898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0725899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0725900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0725902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0725904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0725905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0725906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0725907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0725909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0725910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0725911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0725913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0725914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0725915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0725916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0725917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0725918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0725919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0725920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0725921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0725922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0725924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0725925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0725926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0725928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0725929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0725930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0725931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0725932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0725933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test0725934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0725935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0725936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0725937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0725938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0725939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0725941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0725942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0725943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0725945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0725946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0725947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0725948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0725949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0725950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0725951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0725952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0725953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0725954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0725956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0725957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0725958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0725959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0725960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        assertNotNull(mockFile1);
    }

    @Test(timeout = 4000)
    public void test0725961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        assertFalse(mockFile1.equals((Object) mockFile0));
    }

    @Test(timeout = 4000)
    public void test0725962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0725963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        assertFalse(mockFile0.equals((Object) mockFile1));
    }

    @Test(timeout = 4000)
    public void test0725964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        assertFalse(mockFile1.equals((Object) mockFile0));
    }

    @Test(timeout = 4000)
    public void test0725965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertNotSame(mockFile0, mockFile1);
    }

    @Test(timeout = 4000)
    public void test0725966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0725967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(mockFile0.equals((Object) mockFile1));
    }

    @Test(timeout = 4000)
    public void test0725968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test0725969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test0725970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test0725971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test0725972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals("--", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test0725973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test0725974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test0725975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0725976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertFalse(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test0725977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test0725978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals("--", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test0725979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test0725980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0725981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertNull(mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test0725982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test0725983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test0725984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
        helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
        String string0 = helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string1 = "ac:cA74j";
        Options options0 = null;
        boolean boolean0 = mockFile0.mkdir();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "ac:cA74j", "ac:cA74j", (Options) null, 2360, (-2), "");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0735985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0735986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0735987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0735988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0735989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0735990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0735991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0735992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0735993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0735994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0735995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0735996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0735997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0735998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0735999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0736000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0746001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0746002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0746003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0746004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0746005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0746006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0746007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0746008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0746009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0746010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0746011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0746012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0746013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0746014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0746015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0746016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0746017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0746018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0746019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0746020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(9, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0746021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0746022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0746023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0746024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0746025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(9, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0746026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0746027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0746028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0746029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0746030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0746031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0746032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0746033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0746034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0746035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(9, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0746036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0746037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0746038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals("arg", string0);
    }

    @Test(timeout = 4000)
    public void test0746039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0746040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0746041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0746042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(9, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0746043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0746044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0746045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0746046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0746047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0746048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(9);
        String string0 = helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0756049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0756050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0756051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0756052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0756053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0756054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0756055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0756056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0756057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0756058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0756059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0756060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0756061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0756062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0756063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0756064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0756065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0756066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0756067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0756068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0756069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string1 = "A CloneNotSupportedException was thrown: ";
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I4+*E@");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0756070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string1 = "A CloneNotSupportedException was thrown: ";
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I4+*E@");
        PrintWriter printWriter0 = mockPrintWriter0.format("wG^Z}fA^/m`,ky", (Object[]) null);
        assertSame(mockPrintWriter0, printWriter0);
    }

    @Test(timeout = 4000)
    public void test0756071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string1 = "A CloneNotSupportedException was thrown: ";
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I4+*E@");
        PrintWriter printWriter0 = mockPrintWriter0.format("wG^Z}fA^/m`,ky", (Object[]) null);
        assertSame(printWriter0, mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0756072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string1 = "A CloneNotSupportedException was thrown: ";
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I4+*E@");
        PrintWriter printWriter0 = mockPrintWriter0.format("wG^Z}fA^/m`,ky", (Object[]) null);
        assertNotNull(printWriter0);
    }

    @Test(timeout = 4000)
    public void test0756073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string1 = "A CloneNotSupportedException was thrown: ";
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I4+*E@");
        PrintWriter printWriter0 = mockPrintWriter0.format("wG^Z}fA^/m`,ky", (Object[]) null);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
        assertNotNull(mockPrintWriter1);
    }

    @Test(timeout = 4000)
    public void test0756074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string1 = "A CloneNotSupportedException was thrown: ";
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I4+*E@");
        PrintWriter printWriter0 = mockPrintWriter0.format("wG^Z}fA^/m`,ky", (Object[]) null);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
        assertFalse(mockPrintWriter1.equals((Object) printWriter0));
    }

    @Test(timeout = 4000)
    public void test0756075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string1 = "A CloneNotSupportedException was thrown: ";
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I4+*E@");
        PrintWriter printWriter0 = mockPrintWriter0.format("wG^Z}fA^/m`,ky", (Object[]) null);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
        assertFalse(mockPrintWriter1.equals((Object) mockPrintWriter0));
    }

    @Test(timeout = 4000)
    public void test0756076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = 0;
        String string0 = "";
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        String string1 = "A CloneNotSupportedException was thrown: ";
        boolean boolean0 = false;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I4+*E@");
        PrintWriter printWriter0 = mockPrintWriter0.format("wG^Z}fA^/m`,ky", (Object[]) null);
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-511), "", "", options0, 0, (-511), (String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0766077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0766078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0766079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0766080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0766081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0766082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0766083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0766084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0766085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0766086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0766087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0766088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0766089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0766090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0766091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0766092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0766093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0766094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0766095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0766096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0766097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0766098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0766099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test0766100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0766101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0766102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0766103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0766104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0766105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0766106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0766107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0766108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0766109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0776110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0776111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0776112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0776113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0776114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0776115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0776116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0776117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0776118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0776119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0776120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0776121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0776122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0776123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0776124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0776125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0776126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0776127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0776128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0776129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0776130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0776131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0776132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", string0);
    }

    @Test(timeout = 4000)
    public void test0776133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0776134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0776135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0776136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0776137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0776138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0776139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0776140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0776141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0776142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0776143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0776144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0776145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0776146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0776147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0776148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0776149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, int0);
    }

    @Test(timeout = 4000)
    public void test0776150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0776151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0776152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0776153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0776154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0776155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0776156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0776157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0776158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0776159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0776160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0776161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0776162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0776163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0776164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0776165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0776166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0776167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0776168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0776169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0776170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0776171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0776172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0776173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0776174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0776175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0776176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0776177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0776178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0776179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertNotNull(uRI0);
    }

    @Test(timeout = 4000)
    public void test0776180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertFalse(uRI0.isOpaque());
    }

    @Test(timeout = 4000)
    public void test0776181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertNull(uRI0.getRawUserInfo());
    }

    @Test(timeout = 4000)
    public void test0776182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertEquals("http://foo.bar", uRI0.toString());
    }

    @Test(timeout = 4000)
    public void test0776183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertNull(uRI0.getRawFragment());
    }

    @Test(timeout = 4000)
    public void test0776184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertEquals("", uRI0.getRawPath());
    }

    @Test(timeout = 4000)
    public void test0776185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertEquals("foo.bar", uRI0.getHost());
    }

    @Test(timeout = 4000)
    public void test0776186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertEquals("foo.bar", uRI0.getRawAuthority());
    }

    @Test(timeout = 4000)
    public void test0776187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertNull(uRI0.getRawQuery());
    }

    @Test(timeout = 4000)
    public void test0776188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertEquals("http", uRI0.getScheme());
    }

    @Test(timeout = 4000)
    public void test0776189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertEquals((-1), uRI0.getPort());
    }

    @Test(timeout = 4000)
    public void test0776190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        assertTrue(uRI0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0776191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertSame(uRI0, uRI1);
    }

    @Test(timeout = 4000)
    public void test0776192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertSame(uRI1, uRI0);
    }

    @Test(timeout = 4000)
    public void test0776193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertNotNull(uRI1);
    }

    @Test(timeout = 4000)
    public void test0776194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertFalse(uRI0.isOpaque());
    }

    @Test(timeout = 4000)
    public void test0776195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertNull(uRI0.getRawUserInfo());
    }

    @Test(timeout = 4000)
    public void test0776196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("http://foo.bar", uRI0.toString());
    }

    @Test(timeout = 4000)
    public void test0776197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertNull(uRI0.getRawFragment());
    }

    @Test(timeout = 4000)
    public void test0776198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("", uRI0.getRawPath());
    }

    @Test(timeout = 4000)
    public void test0776199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("foo.bar", uRI0.getHost());
    }

    @Test(timeout = 4000)
    public void test0776200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("foo.bar", uRI0.getRawAuthority());
    }

    @Test(timeout = 4000)
    public void test0776201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertNull(uRI0.getRawQuery());
    }

    @Test(timeout = 4000)
    public void test0776202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("http", uRI0.getScheme());
    }

    @Test(timeout = 4000)
    public void test0776203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals((-1), uRI0.getPort());
    }

    @Test(timeout = 4000)
    public void test0776204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertTrue(uRI0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0776205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("http", uRI1.getScheme());
    }

    @Test(timeout = 4000)
    public void test0776206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("", uRI1.getRawPath());
    }

    @Test(timeout = 4000)
    public void test0776207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertNull(uRI1.getRawFragment());
    }

    @Test(timeout = 4000)
    public void test0776208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertNull(uRI1.getRawUserInfo());
    }

    @Test(timeout = 4000)
    public void test0776209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals((-1), uRI1.getPort());
    }

    @Test(timeout = 4000)
    public void test0776210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("foo.bar", uRI1.getHost());
    }

    @Test(timeout = 4000)
    public void test0776211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("http://foo.bar", uRI1.toString());
    }

    @Test(timeout = 4000)
    public void test0776212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertNull(uRI1.getRawQuery());
    }

    @Test(timeout = 4000)
    public void test0776213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertFalse(uRI1.isOpaque());
    }

    @Test(timeout = 4000)
    public void test0776214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertEquals("foo.bar", uRI1.getRawAuthority());
    }

    @Test(timeout = 4000)
    public void test0776215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        assertTrue(uRI1.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test0776216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        int int0 = helpFormatter0.getWidth();
        Options options0 = new Options();
        String string1 = "";
        Options options1 = options0.addOption("", false, "-");
        helpFormatter0.printHelp("[", "\n", options0, "\n", false);
        URI uRI0 = MockURI.aHttpURI;
        URI uRI1 = MockURI.resolve(uRI0, uRI0);
        MockFile mockFile0 = null;
        try {
            mockFile0 = new MockFile(uRI1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // URI scheme is not \"file\"
        }
    }

    @Test(timeout = 4000)
    public void test0786217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0786218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0786219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0786220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0786221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0786222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0786223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0786224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0786225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0786226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0786227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0786228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0786229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0786230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0786231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0786232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0786233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0786234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0786235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0786236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0786237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0786238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0786239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        assertEquals("' was specified but an option from this group ", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0786240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0786241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0786242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0786243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0786244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0786245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0786246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0786247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0786248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0786249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0786250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals("", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0786251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0786252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0786253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0786254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0786255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0786256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0786257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0786258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0786259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        String string0 = "/y<.b,";
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0786260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "' was specified but an option from this group ";
        helpFormatter0.setOptPrefix("");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        String string0 = "/y<.b,";
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "/y<.b,", options0, 1, (-150), "p`Dsm&J5{CpnN|`", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0796261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0796262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0796263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0796264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0796265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0796266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0796267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0796268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0796269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0796270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0796271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0796272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0796273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0796274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0796275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0796276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0796277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0796278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test0796279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test0796280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test0796281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0796282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0796283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0796284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0796285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0796286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0796287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0796288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0796289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0796290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0796291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0796292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0796293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0796294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0796295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0796296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0796297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0796298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0796299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0796300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        List list0 = options0.getMatchingOptions("4~'B");
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        helpFormatter0.printHelp("V", options1);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0806301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0806302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0806303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0806304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0806305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0806306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0806307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0806308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0806309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0806310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0806311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0806312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0806313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0806314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0806315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0806316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0806317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(3, " :: ", (String) null, (Options) null, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0816318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0816319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0816320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0816321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0816322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0816323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0816324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0816325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0816326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0816327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0816328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0816329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0816330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0816331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0816332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0816333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0816334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0816335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0816336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0816337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        assertEquals("w;dC%8MgB*", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0816338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0816339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0816340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0816341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0816342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0816343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0816344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0816345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0816346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0816347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0816348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0816349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0816350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0816351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0816352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals("w;dC%8MgB*", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0816353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0816354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals("", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0816355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0816356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0816357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "w;dC%8MgB*";
        helpFormatter0.setLongOptPrefix("");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0826358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0826359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0826360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0826361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0826362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0826363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0826364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0826365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0826366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0826367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0826368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0826369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0826370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0826371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0826372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0826373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0826374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0826375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0826376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0826377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0826378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0826379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0826380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0826381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0826382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0826383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0826384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0826385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0826386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0826387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0826388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0826389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0826390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0826391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0826392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0826393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0826394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0826395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0826396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0826397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0826398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0826399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0826400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0826401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Options options1 = options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("skGcZ@Z)-f6Q:T<(", "~g", options1, "`.9icS;X?7w");
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0836402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0836403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0836404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0836405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0836406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0836407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0836408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0836409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0836410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0836411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0836412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0836413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0836414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0836415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0836416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0836417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0836418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0836419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0836420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0836421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        assertEquals("XsfZ))", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0836422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0836423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0836424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0836425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0836426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0836427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultNewLine = "XsfZ))";
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("]-&vg[49`Hc", ")*C'", (Options) null, ")*C'");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0846428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0846429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0846430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0846431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0846432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0846433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0846434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0846435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0846436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0846437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0846438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0846439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0846440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0846441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0846442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0846443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0846444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0846445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0846446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0846447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0846448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0846449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0846450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", string0);
    }

    @Test(timeout = 4000)
    public void test0846451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0846452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0846453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0846454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0846455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0846456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0846457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0846458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0846459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0846460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0846461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        boolean boolean0 = true;
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0856462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0856463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0856464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0856465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0856466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0856467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0856468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0856469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0856470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0856471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0856472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0856473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0856474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0856475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0856476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0856477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0856478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0856479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0856480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0856481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0856482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0856483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0856484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string0);
    }

    @Test(timeout = 4000)
    public void test0856485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0856486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0856487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0856488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0856489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0856490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0856491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0856492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0856493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0856494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0856495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0856496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0856497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0856498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0856499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0856500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0856501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0856502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0856503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0856504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0856505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0856506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0856507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0856508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0856509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        helpFormatter0.setSyntaxPrefix("usage: ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0866511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0866512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0866513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0866514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0866515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0866516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0866517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0866523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0866527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0866528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0866529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0866530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0866531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0866532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals("+!", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0866538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(1, helpFormatter1.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0866542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(3, helpFormatter1.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0866543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0866544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(74, helpFormatter1.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0866545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0866546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0866547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertNotNull(helpFormatter1);
    }

    @Test(timeout = 4000)
    public void test0866548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertFalse(helpFormatter1.equals((Object) helpFormatter0));
    }

    @Test(timeout = 4000)
    public void test0866549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(" ", helpFormatter1.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("\n", helpFormatter1.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(3, helpFormatter1.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("arg", helpFormatter1.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("--", helpFormatter1.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(1, helpFormatter1.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals("-", helpFormatter1.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        assertEquals(74, helpFormatter1.getWidth());
    }

    @Test(timeout = 4000)
    public void test0866558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0866559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0866560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0866561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0866562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertNotSame(helpFormatter1, helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0866563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0866564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0866565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(1, helpFormatter1.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0866566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(3, helpFormatter1.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0866567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0866568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(74, helpFormatter1.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0866569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0866570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0866571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0866572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertFalse(helpFormatter1.equals((Object) helpFormatter0));
    }

    @Test(timeout = 4000)
    public void test0866573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(" ", helpFormatter1.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals("\n", helpFormatter1.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(3, helpFormatter1.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals("arg", helpFormatter1.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals("--", helpFormatter1.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(1, helpFormatter1.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals("-", helpFormatter1.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(74, helpFormatter1.getWidth());
    }

    @Test(timeout = 4000)
    public void test0866582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0866583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0866584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0866585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0866586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertNotSame(helpFormatter0, helpFormatter1);
    }

    @Test(timeout = 4000)
    public void test0866587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0866588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0866589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0866590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0866591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0866592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals((-341), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0866593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertFalse(helpFormatter0.equals((Object) helpFormatter1));
    }

    @Test(timeout = 4000)
    public void test0866594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals("+!", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals((-341), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0866601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertNotSame(helpFormatter1, helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0866604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test0866605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0866606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test0866607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0866608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertSame(stringBuffer2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0866609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertSame(stringBuffer2, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0866610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(1, helpFormatter1.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0866611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(3, helpFormatter1.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0866612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0866613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(74, helpFormatter1.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0866614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0866615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0866616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertNotNull(stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test0866617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertFalse(helpFormatter1.equals((Object) helpFormatter0));
    }

    @Test(timeout = 4000)
    public void test0866618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(" ", helpFormatter1.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals("\n", helpFormatter1.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(3, helpFormatter1.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals("arg", helpFormatter1.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals("--", helpFormatter1.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(1, helpFormatter1.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals("-", helpFormatter1.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(74, helpFormatter1.getWidth());
    }

    @Test(timeout = 4000)
    public void test0866627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0866628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0866629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0866630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0866631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals(0, stringBuffer2.length());
    }

    @Test(timeout = 4000)
    public void test0866632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        assertEquals("", stringBuffer2.toString());
    }

    @Test(timeout = 4000)
    public void test0866633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        assertEquals(" ", helpFormatter1.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        assertEquals("\n", helpFormatter1.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        assertEquals(3, helpFormatter1.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        assertEquals("arg", helpFormatter1.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        assertEquals("--", helpFormatter1.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        assertEquals(1, helpFormatter1.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        assertEquals("-", helpFormatter1.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        assertEquals(74, helpFormatter1.getWidth());
    }

    @Test(timeout = 4000)
    public void test0866642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertNotSame(helpFormatter0, helpFormatter1);
    }

    @Test(timeout = 4000)
    public void test0866643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertNotSame(helpFormatter1, helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0866644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test0866645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test0866646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0866647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test0866648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test0866649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0866650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertSame(stringBuffer3, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test0866651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertSame(stringBuffer3, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0866652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertSame(stringBuffer3, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0866653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0866654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0866655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0866656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0866657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0866658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals((-341), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0866659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(1, helpFormatter1.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0866660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(3, helpFormatter1.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0866661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0866662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(74, helpFormatter1.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0866663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0866664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0866665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertNotNull(stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test0866666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertFalse(helpFormatter0.equals((Object) helpFormatter1));
    }

    @Test(timeout = 4000)
    public void test0866667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertFalse(helpFormatter1.equals((Object) helpFormatter0));
    }

    @Test(timeout = 4000)
    public void test0866668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("+!", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals((-341), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0866675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(" ", helpFormatter1.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("\n", helpFormatter1.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(3, helpFormatter1.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("arg", helpFormatter1.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("--", helpFormatter1.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(1, helpFormatter1.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("-", helpFormatter1.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(74, helpFormatter1.getWidth());
    }

    @Test(timeout = 4000)
    public void test0866686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0866687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("arg", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0866688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(3, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0866689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("arg", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0866690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals(3, stringBuffer3.length());
    }

    @Test(timeout = 4000)
    public void test0866691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        assertEquals("arg", stringBuffer3.toString());
    }

    @Test(timeout = 4000)
    public void test0866692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertNotSame(helpFormatter1, helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0866693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(1, helpFormatter1.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0866694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(3, helpFormatter1.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0866695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0866696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(74, helpFormatter1.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0866697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0866698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0866699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertFalse(helpFormatter1.equals((Object) helpFormatter0));
    }

    @Test(timeout = 4000)
    public void test0866700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(" ", helpFormatter1.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0866701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(" ", helpFormatter1.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0866702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals("\n", helpFormatter1.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0866703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(3, helpFormatter1.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0866704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals("arg", helpFormatter1.getArgName());
    }

    @Test(timeout = 4000)
    public void test0866705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals("--", helpFormatter1.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(1, helpFormatter1.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0866707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals("-", helpFormatter1.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0866708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("+!");
        HelpFormatter helpFormatter1 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3, 3);
        helpFormatter0.setDescPadding((-341));
        StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter1.optionComparator = comparator0;
        StringBuffer stringBuffer3 = helpFormatter0.renderWrappedText(stringBuffer1, 1041, 32, "arg");
        helpFormatter1.setSyntaxPrefix(" ");
        assertEquals(74, helpFormatter1.getWidth());
    }

    @Test(timeout = 4000)
    public void test0876709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0876710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0876711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0876712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0876713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0876714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0876715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0876716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0876717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0876718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0876719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0876720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0876721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0876722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0876723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0876724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0876725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0876726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0876727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0876728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0876729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0876730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0876731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0876732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0876733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0876734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0876735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0876736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0876737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0876738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0876739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0876740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0876741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0876742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0876743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0876744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0876745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0876746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0876747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0876748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0876749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0876750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0876751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0876752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals("x.G7TNJx0DNRLj<alwc", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0876753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0876754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0876755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0876756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0876757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0876758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0876759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0876760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0876761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string1);
    }

    @Test(timeout = 4000)
    public void test0876762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0876763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0876764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0876765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0876766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0876767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0876768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0876769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0876770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals("x.G7TNJx0DNRLj<alwc", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0876771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0876772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0876773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0876774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0876775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0876776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        IntStream intStream0 = stringBuffer0.chars();
        assertNotNull(intStream0);
    }

    @Test(timeout = 4000)
    public void test0876777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        IntStream intStream0 = stringBuffer0.chars();
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0876778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        IntStream intStream0 = stringBuffer0.chars();
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0876779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "x.G7TNJx0DNRLj<alwc";
        helpFormatter0.setOptPrefix("x.G7TNJx0DNRLj<alwc");
        String string1 = helpFormatter0.getLongOptSeparator();
        StringBuffer stringBuffer0 = new StringBuffer(3);
        IntStream intStream0 = stringBuffer0.chars();
        int int0 = (-391);
        String string2 = " ] [ long ";
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText(stringBuffer0, (-391), (-224), " ] [ long ");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0886780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0886781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0886782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0886783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0886784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0886785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0886786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0886787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0886788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0886789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0886790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0886791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0886792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0886793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0886794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0886795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0886796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0886797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0886798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0886799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0886800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0886801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertEquals("8FT", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0886802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0886803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0886804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0886805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0886806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0886807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0886808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0886809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0886810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0886811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0886812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0886813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0886814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0886815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0886816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0886817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0886818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0886819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0886820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0886821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertEquals("8FT", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0886822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0886823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0886824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0886825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0886826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0886827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0886828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0886829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0886830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0886831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0886832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0886833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0886834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0886835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0886836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0886837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0886838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0886839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0886840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0886841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertEquals("8FT", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0886842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0886843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0886844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0886845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0886846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0886847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0886848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0886849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0886850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0886851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0886852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0886853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0886854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0886855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0886856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0886857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0886858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0886859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0886860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0886861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0886862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0886863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0886864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0886865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertEquals("8FT", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0886866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0886867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0886868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0886869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0886870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0886871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertEquals("arg", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0886872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0886873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0886874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0886875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0886876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0886877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0886878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        assertEquals(97, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0886879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", false, "8FT");
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasLongOption("");
        Options options2 = options1.addOption("8FT", "usage: ", false, "x2Zob+^GI]p~+@BV1@d");
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((-1818), (String) null, "--", options2, "--", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0896880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0896881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0896882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0896883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0896884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0896885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0896886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0896887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0896888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0896889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0896890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0896891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0896892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0896893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0896894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0896895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0896896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.findWrapPos("E$", (-2350), (-2350));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0906897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0906898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0906899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0906900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0906901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0906902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0906903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0906904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0906905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0906906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0906907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0906908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0906909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0906910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0906911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0906912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0906913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0906914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0906915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0906916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0906917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0906918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0906919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0906920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0906921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0906922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0906923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0906924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0906925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0906926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0906927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0906928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0906929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0906930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0906931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0906932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(0, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0906933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0906934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0906935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0906936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0906937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0906938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0906939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0906940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(0, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0906941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0906942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setDescPadding(0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0916943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0916944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0916945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0916946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0916947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0916948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0916949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0916950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0916951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0916952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0916953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0916954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0916955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0916956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0916957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0916958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0916959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0916960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0916961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0916962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0916963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0916964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0916965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertNotNull(comparator0);
    }

    @Test(timeout = 4000)
    public void test0916966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0916967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0916968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0916969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0916970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0916971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0916972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0916973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0916974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0916975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0916976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0916977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0916978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0916979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0916980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0916981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0916982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0916983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0916984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0916985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0916986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0916987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0916988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0916989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0916990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0916991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0916992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0916993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0916994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0916995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0916996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0916997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0916998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0916999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0917000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0917001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0917002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(".E^|YbFb@Ba", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0917003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0917004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0917005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0917006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0917007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0917008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0917009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0917010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0917011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0917012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(".E^|YbFb@Ba", string0);
    }

    @Test(timeout = 4000)
    public void test0917013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0917014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0917015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0917016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0917017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0917018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0917019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(".E^|YbFb@Ba", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0917020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0917021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0917022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0917023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0917024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0917025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0917026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0917027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0917028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0917029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, int0);
    }

    @Test(timeout = 4000)
    public void test0917030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0917031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0917032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0917033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0917034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0917035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(".E^|YbFb@Ba", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0917036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0917037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0917038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0917039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator comparator0 = helpFormatter0.getOptionComparator();
        Options options0 = new Options();
        helpFormatter0.printHelp(2042, "~", ".E^|YbFb@Ba", options0, "~");
        helpFormatter0.setLongOptSeparator(".E^|YbFb@Ba");
        String string0 = helpFormatter0.getLongOptSeparator();
        int int0 = helpFormatter0.getWidth();
        // Undeclared exception!
        try {
            helpFormatter0.findWrapPos((String) null, 74, 74);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0927040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0927041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0927042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0927043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0927044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0927045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0927046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0927047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0927048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0927049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0927050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0927051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0927052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0927053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0927054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0927055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0927056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0927057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0927058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0927059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0927060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0927061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0927062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test0927063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0927064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0927065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0927066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0927067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0927068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0927069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0927070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0927071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0927072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0927073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0927074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0927075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0927076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0927077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0927078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0927079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0927080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0927081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals("", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0927082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0927083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0927084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0927085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0927086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0927087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0927088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0927089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0927090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0927091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0927092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0927093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0927094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0927095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0927096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals("", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0927097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0927098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0927099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0927100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0927101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        helpFormatter0.setOptPrefix("");
        helpFormatter0.setOptPrefix("");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0937102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0937103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0937104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0937105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0937106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0937107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0937108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0937109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0937110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0937111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0937112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0937113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0937114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0937115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0937116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0937117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0937118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0937119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0937120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0937121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0937122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "1N*W_yjSq?W{");
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", options1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0947123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0947124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0947125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0947126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0947127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0947128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0947129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0947130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0947131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0947132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0947133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0947134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0947135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0947136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0947137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0947138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0947139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0947140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0947141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0947142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0947143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0947144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0947145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0947146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0947147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertNull(helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0947148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0947149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0947150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0947151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0947152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0947153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName((String) null);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0957154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0957155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0957156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0957157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0957158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0957159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0957160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0957161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0957162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0957163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0957164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0957165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0957166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0957167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0957169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0957171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0957172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0957173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0957174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0957175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0957176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0957177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0957178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals("usage: ", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0957179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0957180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0957181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0957182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0957184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0957186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        assertEquals("usage: ", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0957187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0957188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0957189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0957190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        assertEquals((-4001), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0957192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0957193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals((-4001), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0957195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0957196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals((-4001), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0957197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0957198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0957199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0957200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0957201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals("usage: ", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0957202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0957203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0957204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0957205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals((-4001), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0957207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals((-4001), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0957208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals((-4001), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0957210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0957211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals((-4001), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0957212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0957213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0957214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0957215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0957216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals("usage: ", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0957217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0957218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals("[", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0957219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0957220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals((-4001), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0957222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals((-4001), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0957223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals(0, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0957225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0957226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals((-4001), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0957227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0957228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0957229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0957230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0957231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals(0, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0957232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals("usage: ", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0957233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0957234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals("[", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0957235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0957236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0957237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals((-4001), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0957238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("usage: ");
        helpFormatter0.defaultDescPad = (-4001);
        helpFormatter0.setWidth((-4001));
        helpFormatter0.setLongOptSeparator("[");
        helpFormatter0.setDescPadding(0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0967239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0967240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0967241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0967242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0967243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0967244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0967245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0967246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0967247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0967248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0967249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0967250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0967251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0967252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0967253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0967254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0967255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0967256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0967257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0967258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0967259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0967260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0967261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0967262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0967263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0967264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0967265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0967266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0967267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0967268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0967269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0967270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("*", 1169, 63);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0977271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0977272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0977273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0977274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0977275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0977276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0977277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0977278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0977279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0977280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0977281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0977282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0977283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0977284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0977285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0977286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0977287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0977288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((String) null, options0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test0987289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0987290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0987291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0987292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0987293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0987294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0987295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0987296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0987306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0987307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0987308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0987309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0987310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0987311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals("]", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0987321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0987322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0987323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0987324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0987325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0987326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test0987327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("]", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0987337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0987338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0987339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0987340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0987341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0987342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals("]", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0987352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0987353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0987354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0987355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0987356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0987357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals("]", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        assertEquals("]", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        assertEquals("The option '", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0987376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0987377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0987378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0987379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0987380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0987381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("]", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("The option '", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0987391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0987392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0987393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0987394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0987395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0987396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals("]", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals("The option '", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0987406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0987407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0987408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0987409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0987410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0987411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string1);
    }

    @Test(timeout = 4000)
    public void test0987412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test0987413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0987414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("]", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("The option '", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0987424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0987425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0987426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0987427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0987428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0987429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string2);
    }

    @Test(timeout = 4000)
    public void test0987430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertNotNull(string2);
    }

    @Test(timeout = 4000)
    public void test0987431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertFalse(string2.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test0987432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals("]", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0987434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0987435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals("The option '", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0987436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals("Q.Q.0;/d*|E", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0987437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0987438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0987439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0987440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0987441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        String string3 = ">";
        MockFile mockFile0 = new MockFile("?", ">");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test0987442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("]");
        int int0 = helpFormatter0.getLeftPadding();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        String string0 = "Q.Q.0;/d*|E";
        helpFormatter0.setNewLine("Q.Q.0;/d*|E");
        helpFormatter0.setLongOptSeparator("Q.Q.0;/d*|E");
        helpFormatter0.defaultLongOptPrefix = "The option '";
        helpFormatter0.setOptionComparator(comparator0);
        helpFormatter0.setLeftPadding(1);
        String string1 = helpFormatter0.getSyntaxPrefix();
        String string2 = helpFormatter0.getSyntaxPrefix();
        String string3 = ">";
        MockFile mockFile0 = new MockFile("?", ">");
        MockPrintWriter mockPrintWriter0 = null;
        try {
            mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (Throwable e) {
            //
            //
        }
    }

    @Test(timeout = 4000)
    public void test0997443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0997444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0997445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0997446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0997447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0997448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0997449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0997450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0997451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0997452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0997453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0997454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0997455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0997456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0997457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0997458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0997459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0997460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0997461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0997462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test0997463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0997464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0997465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0997467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0997468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test0997469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0997470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0997471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0997472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0997473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0997474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0997475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0997476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0997477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertEquals("Illegal option name '", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0997478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0997479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertNull(option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0997480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0997481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0997483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0997484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0997485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0997486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0997487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0997488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0997489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0997491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0997492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0997493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0997494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0997495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0997496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0997497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0997498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("Illegal option name '", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0997499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0997500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0997501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0997502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0997504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0997506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0997507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0997508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0997509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0997510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0997511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0997512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0997513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0997514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0997515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0997516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test0997517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0997518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0997520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0997521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0997522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0997523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0997524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0997525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0997526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0997527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertEquals("Illegal option name '", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0997528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0997529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertNull(option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0997530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0997531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0997533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0997535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test0997536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0997537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test0997538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test0997539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0997540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options1, options3);
    }

    @Test(timeout = 4000)
    public void test0997541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test0997542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test0997543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test0997544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test0997545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test0997546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test0997547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test0997548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test0997549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test0997550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test0997551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNotNull(options3);
    }

    @Test(timeout = 4000)
    public void test0997552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test0997553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test0997555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test0997556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0997557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0997558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0997559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0997560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0997561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0997562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals("Illegal option name '", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0997563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0997564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNull(option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0997565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0997566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0997568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test0997569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test0997570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("wh", false, " ");
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, true, "Illegal option name '");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options2 = options1.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", "", options3, "}ZU[WMS>|F`6c", true);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test1007571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test1007572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test1007573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1007574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test1007575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test1007576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1007577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test1007578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test1007579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1007580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test1007581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1007582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1007583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test1007584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test1007585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test1007586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1007587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test1007588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test1007589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test1007591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test1007592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test1007593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test1007594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test1007597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1007598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test1007599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1007600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test1007601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test1007602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1007605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test1007606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test1007608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test1007609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test1007610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test1007611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test1007612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test1007613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test1007615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test1007618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1007619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test1007620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1007621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test1007622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test1007623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1007626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test1007627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test1007629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test1007630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test1007632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test1007633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test1007634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test1007635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test1007636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test1007637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test1007638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test1007639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test1007640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test1007641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test1007642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test1007643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test1007645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test1007648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1007649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test1007650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1007651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test1007652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test1007653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1007656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test1007657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test1007659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test1007660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test1007662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test1007663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test1007664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test1007665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test1007666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test1007667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test1007668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test1007669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test1007670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test1007671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test1007672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test1007673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test1007674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNotNull(options3);
    }

    @Test(timeout = 4000)
    public void test1007675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test1007677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test1007680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1007681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test1007682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1007683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test1007684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test1007685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1007688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test1007689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test1007691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test1007692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options3);
    }

    @Test(timeout = 4000)
    public void test1007694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test1007695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test1007696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test1007697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test1007698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test1007699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test1007700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options2, options3);
    }

    @Test(timeout = 4000)
    public void test1007701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options3, options1);
    }

    @Test(timeout = 4000)
    public void test1007702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options3, options2);
    }

    @Test(timeout = 4000)
    public void test1007703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertSame(options3, options0);
    }

    @Test(timeout = 4000)
    public void test1007704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test1007705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test1007706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1007707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test1007708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test1007709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1007710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test1007711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test1007712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test1007713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1007714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test1007715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1007716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1007717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test1007718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test1007719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test1007720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1007721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test1007723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("--", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1007725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test1007726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1007727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test1007728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("-", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1007729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test1007730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test1007731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1007734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test1007735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1007736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test1007737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test1007738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test1007739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "--", true, "-");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOption("Uw15Z5", "", true, "\n");
        Options options2 = options0.addOptionGroup(optionGroup1);
        Options options3 = options2.addOption(option0);
        helpFormatter0.printHelp(2983, "Ss>42{22", "", options3, "H}hcvx>rY\"d{chtWT*!", true);
        StringBuffer stringBuffer0 = null;
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions((StringBuffer) null, 2983, options0, 32, 4819);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1017740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
        helpFormatter0.getSyntaxPrefix();
        options0.toString();
        helpFormatter0.getOptPrefix();
        PrintWriter printWriter0 = null;
        String string0 = "^+_";
        int int0 = (-882);
        int int1 = 64;
        String string1 = "^gU}O['L!s";
        String string2 = "--";
        // Undeclared exception!
        try {
            options0.addOption("-", "--", true, "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal option name '-'
        }
    }

    @Test(timeout = 4000)
    public void test1027741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(24);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
        helpFormatter0.getWidth();
        helpFormatter0.getNewLine();
        StringBuffer stringBuffer0 = new StringBuffer();
        helpFormatter0.renderWrappedText(stringBuffer0, 32, 34, "\n");
        assertEquals(2, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test1027742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(24);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
        helpFormatter0.getWidth();
        helpFormatter0.getNewLine();
        StringBuffer stringBuffer0 = new StringBuffer();
        helpFormatter0.renderWrappedText(stringBuffer0, 32, 34, "\n");
        helpFormatter0.getDescPadding();
        helpFormatter0.getLongOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test1037743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(74, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "cmdLineSyntax not provided");
        // Undeclared exception!
        try {
            helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", (-1479), 44);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1047744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        boolean boolean0 = false;
        Options options0 = new Options();
        Option option0 = null;
        try {
            option0 = new Option(" ", false, "arg");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal option name ' '
        }
    }

    @Test(timeout = 4000)
    public void test1057745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "\n";
        helpFormatter0.setDescPadding(3910);
        Options options0 = new Options();
        helpFormatter0.setWidth(10);
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        Option option0 = new Option("arg", true, "\n");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("}lTTuf", "' was specified but an option from thi- group ", options1, "", true);
        helpFormatter0.getLongOptSeparator();
        assertEquals(3910, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1067746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
        StringWriter stringWriter0 = new StringWriter(1);
        StringWriter stringWriter1 = stringWriter0.append('a');
        stringWriter0.close();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
        StringBuffer stringBuffer0 = stringWriter2.getBuffer();
        Option option0 = new Option((String) null, "", true, "");
        Options options1 = options0.addOption(option0);
        helpFormatter0.renderOptions(stringBuffer0, 31, options1, 9, 31);
        helpFormatter0.getSyntaxPrefix();
        URI uRI0 = MockURI.aFileURI;
        URI uRI1 = MockURI.parseServerAuthority(uRI0);
        MockFile mockFile0 = new MockFile(uRI1);
        MockFile mockFile1 = new MockFile(mockFile0, "#]<imT&zbEp");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, (String) null, options0);
        // Undeclared exception!
        try {
            helpFormatter0.createPadding((-2));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1077747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        int int0 = 0;
        int int1 = 31;
        helpFormatter0.setDescPadding(31);
        helpFormatter0.setLeftPadding(31);
        Options options0 = null;
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("-", "usage: ", (Options) null, "-");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1087748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setArgName("fk%gXnz8@$$pq");
        Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.optionComparator = comparator1;
        helpFormatter0.setOptionComparator(comparator0);
        String string0 = "m";
        int int0 = 0;
        int int1 = 31;
        helpFormatter0.setDescPadding(31);
        Options options0 = null;
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("m", (String) null, (Options) null, "m");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1097749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1097750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, false);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test1097751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, false);
        int int0 = helpFormatter0.getDescPadding();
        String string0 = helpFormatter0.rtrim("rbNw0r>mtU[b+jhMcKR");
        assertEquals("rbNw0r>mtU[b+jhMcKR", string0);
    }

    @Test(timeout = 4000)
    public void test1097752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, false);
        int int0 = helpFormatter0.getDescPadding();
        String string0 = helpFormatter0.rtrim("rbNw0r>mtU[b+jhMcKR");
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1097753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, false);
        int int0 = helpFormatter0.getDescPadding();
        String string0 = helpFormatter0.rtrim("rbNw0r>mtU[b+jhMcKR");
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string1);
    }

    @Test(timeout = 4000)
    public void test1097754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        options0.getMatchingOptions("[ARG...]");
        helpFormatter0.printHelp("rbNw0r>mtU[b+jhMcKR", options0, false);
        int int0 = helpFormatter0.getDescPadding();
        String string0 = helpFormatter0.rtrim("rbNw0r>mtU[b+jhMcKR");
        String string1 = helpFormatter0.getSyntaxPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1107755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Object[] objectArray0 = new Object[24];
        objectArray0[0] = (Object) pipedOutputStream0;
        objectArray0[1] = (Object) mockPrintWriter0;
        objectArray0[2] = (Object) mockPrintWriter0;
        objectArray0[3] = (Object) pipedOutputStream0;
        objectArray0[4] = (Object) helpFormatter0;
        objectArray0[5] = (Object) pipedOutputStream0;
        PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
        helpFormatter0.printWrapped(printWriter0, 1149, 1902, "");
        helpFormatter0.getLongOptSeparator();
        Options options0 = new Options();
        helpFormatter0.setLongOptPrefix(" ");
        helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1117756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator("-");
        helpFormatter0.getLongOptPrefix();
        helpFormatter0.setSyntaxPrefix(" ");
        MockFile mockFile0 = new MockFile((String) null, "--");
        MockFile mockFile1 = new MockFile(mockFile0, "--");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
        int int0 = (-2);
        String string0 = "ac:cA74j";
        Options options0 = null;
        mockFile0.mkdir();
        String string1 = "";
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "ac:cA74j", "--", (Options) null, 2, 2, "a\"d8v");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }
}
