/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:21:05 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Comparator;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.junit.runner.RunWith;

public class HelpFormatterTest {

    @Test(timeout = 4000)
    public void test0260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("-");
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText(stringBuffer0, 3, 1859, "Wr2XR!Z");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(1735);
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "usage: ");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:
        }
    }

    @Test(timeout = 4000)
    public void test0282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText((StringBuffer) null, 762, 31, "arg");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(0);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText(stringBuffer0, 0, (-533), " <");
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        options0.addOption("arg", "\n", true, "NnS");
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions(stringBuffer0, (-2340), options0, 3, 3);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("", "usage: ", false, "-^KP|(L@o1K+&lF");
        StringWriter stringWriter0 = new StringWriter(1958);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions(stringBuffer0, 13, options1, 8, 1958);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          -^KP|(L@o1K+&lF
        }
    }

    @Test(timeout = 4000)
    public void test0336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(74);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions(stringBuffer0, (-519), (Options) null, 90, 78);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$OptionComparator");
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions(stringBuffer0, 0, options0, (-1), 0);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "JP{");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test0369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) null, (-1), (-1), "");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test03710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test03811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1468), "", options0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test03912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) null, 818, "!1m`", options0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test04013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintStream mockPrintStream0 = new MockPrintStream("T]~]LIvezO*");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2090), "");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test04114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " ] [ long ");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:         ] [ long
        }
    }

    @Test(timeout = 4000)
    public void test04215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1276), (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "\n", true, "NnS");
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        // Undeclared exception!
        try {
            helpFormatter0.printOptions(mockPrintWriter0, (-1), options1, 63, 43);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test04417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printOptions(mockPrintWriter0, (-956), options0, 0, (-2));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 8;
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("d||M },BT6w<Mx!", (Options) null, false);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:             d||M },BT6w<Mx!
        }
    }

    @Test(timeout = 4000)
    public void test04619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("^bIz%Fe;b}T37J", (Options) null, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setDescPadding((-3102));
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("lG_>58Z/gY{c", options0, false);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((String) null, options0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test04922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultWidth = (-1);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("^p[3*R&VXA+", options0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test05023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(8);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("^p[3*R&VXA+", options0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:        ^p[3*R&VXA+
        }
    }

    @Test(timeout = 4000)
    public void test05124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("TO", (Options) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setDescPadding((-2471));
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("^p[3*R&VXA+", options0);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", options0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test05427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth((-625));
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("OS&]{jjXE", "OS&]{jjXE", options0, "", true);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test05528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 32;
        helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("Fh&T", "#", options0, "Fh&T", true);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:
        }
    }

    @Test(timeout = 4000)
    public void test05629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("2Hh+M[A:=", "'", (Options) null, (String) null, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setLeftPadding((-1475));
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("OS&]{jjXE", "OS&]{jjXE", options0, "", false);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", "", options0, "AY`,8", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test05932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "bleD'*bNhe8Fl");
        Options options2 = options1.addOption("arg", "", true, "3");
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("usage: ", "cmdLineSyntax not provided", options2, "3");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test06033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setDescPadding((-3102));
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("-", "[", options0, "4;");
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test06134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        options0.addOption("arg", "\n", true, "NnS");
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ",V^6EmI&E", "NnS", options0, 63, 43, "[ h5", true);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:                                                                                                                         NnS
        }
    }

    @Test(timeout = 4000)
    public void test06235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) null, 11, "^W", "/A=F2+tB", options0, 11, 13, (String) null, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test06336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "arg", "S0k[m/DDf;C;o~|W.V", options0, (-138), 1718, "U;HmBV3.JM[>[Y");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test06437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) null, 8, "Text too long for line - throwing exception to avoid infinite loop [CLI-162]: ", "", options0, (-2054), 1, " ");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:             Text too long for line - throwing exception to avoid infinite loop [CLI-162]:
        }
    }

    @Test(timeout = 4000)
    public void test06538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) null, 2453, "R o|=cM", "_a/aeEs`5k", options0, 0, 0, "The option '");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test06639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "\"snj%]il\"", options0, 14, (-2), (String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test06740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((-2), "S{g~hk0QrIx?f", "S{g~hk0QrIx?f", options0, "", false);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test06841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(2335, "usage: ", "usage: ", (Options) null, "O'3:/*2", true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test06942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setDescPadding((-3102));
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(753, ":q[%/`7[-o,)4?b", ":q[%/`7[-o,)4?b", options0, "", false);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((-2), "", "", options0, "", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test07144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(74, "Gj_^9N", "Gj_^9N", (Options) null, " 2n[Yx8$}N<1d6b ");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(1931, "", "", options0, "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test07346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.findWrapPos(":E2_FsGE+b^", (-1669), (-1669));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test07447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.findWrapPos((String) null, (-73), 0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.createPadding((-2005));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "\n", true, "NnS");
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        options0.addOption("", "", true, "org.apache.commons.cli.OptionValidator");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 43, "^p[3*R&VXA+", options1);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test07650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "\n", true, "NnS");
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        options0.addOption("", "", true, "org.apache.commons.cli.OptionValidator");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 43, "^p[3*R&VXA+", options1);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test07751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", " ", true, "arg");
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:        [- <arg>]
        }
    }

    @Test(timeout = 4000)
    public void test07852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 387, ",V^6EmI&E", "NnS", options0, 63, 43, "\n", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test07853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 387, ",V^6EmI&E", "NnS", options0, 63, 43, "\n", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test07954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 387, "]Cv,G*y(gK,*s[", "N6LqP4gH", options0, 2167, 387, (String) null, true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1214), "org.apache.commons.cli.OptionGroup", "Wr2XR!Z", options0, (-1214), 55, "", false);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test08156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1839, (String) null, "^p[3*R&VXA+", options0, 1839, 1839, "^p[3*R&VXA+", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test08257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptionComparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test08258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptionComparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test08259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptionComparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptionComparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test08261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptionComparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test08262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptionComparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test08263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.getOptionComparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test08465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "' was specified but an option from this group ");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]: this group
        }
    }

    @Test(timeout = 4000)
    public void test08566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("F7Gt%Gd.FsnP^PT6", "");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1478, "arg");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("F7Gt%Gd.FsnP^PT6", "");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1478, "arg");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test08568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("F7Gt%Gd.FsnP^PT6", "");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1478, "arg");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test08569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("F7Gt%Gd.FsnP^PT6", "");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1478, "arg");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test08670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(0, "&}\"P", "QC|", options0, "&}\"P", true);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:        &}\"P
        }
    }

    @Test(timeout = 4000)
    public void test08771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test08772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test08775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test08776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test08777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test08778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test08879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(3, "\n", "^p[3*R&VXA+", options0, "\n");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:
        }
    }

    @Test(timeout = 4000)
    public void test08980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "\n", true, "NnS");
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        // Undeclared exception!
        try {
            helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 63, 43);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Text too long for line - throwing exception to avoid infinite loop [CLI-162]:                                                                                                                         NnS
        }
    }

    @Test(timeout = 4000)
    public void test09081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        options0.addOption("", "\n", false, "arg");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 387, ",V^6EmI&E", "NnS", options0, 63, 43, "[ h5", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test09082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        File file0 = MockFile.createTempFile("usage: ", "org.apache.commons.cli.OptionValidator");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
        options0.addOption("", "\n", false, "arg");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 387, ",V^6EmI&E", "NnS", options0, 63, 43, "[ h5", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test09183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("OS&]{jjXE", "OS&]{jjXE", options0, "", false);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test09184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("OS&]{jjXE", "OS&]{jjXE", options0, "", false);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test09285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        MockFile mockFile0 = new MockFile("-", "usage: ");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-V.,e&*{X6z9Ps^@", "", options0, (-134), 164, "", true);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringWriter stringWriter0 = new StringWriter(44);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "", options0, 43, 9, "org.apache.commons.cli.Option", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test09487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((String) null, "[", options0, "4;");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test09588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test09589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test09590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test09591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test09592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test09593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test09594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test09695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test09697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test09698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test09699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test096100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test096101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test097102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test097103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test097104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test097105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test097106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test097107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test097108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test098109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string0);
    }

    @Test(timeout = 4000)
    public void test098110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test098111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test098112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test098113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test098114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test098115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test099116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test099117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test099118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test099119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test099120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test099121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test099122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test100123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test100124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test100125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test100126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", string0);
    }

    @Test(timeout = 4000)
    public void test100127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test100128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test100129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test100130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test101131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-3102));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals((-3102), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test101132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-3102));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals((-3102), int0);
    }

    @Test(timeout = 4000)
    public void test102133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        MockFile mockFile0 = new MockFile("W~(s)cB1e7.D:O(hf+");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, " ", "qRI8.[I434N", options0, (-1), 274, "qRI8.[I434N");
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test103134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test103135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("arg", string0);
    }

    @Test(timeout = 4000)
    public void test103136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test103137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test103138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test103139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test103140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test104141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test104142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test104143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test104144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test104145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test104146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test104147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test105148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("^p[3*R&VXA+", options0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test106149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((-1230), "Wr2XR!Z", "Wr2XR!Z", options0, "");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test107150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test107151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "@yW");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test108152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        helpFormatter0.getNewLine();
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test109153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test109154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test109155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test109156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test109157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test109158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test109159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test110160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test110161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test110162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, int0);
    }

    @Test(timeout = 4000)
    public void test110163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test110164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test110165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test110166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test111167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "-", true, "\n");
        options1.addOption("arg", true, (String) null);
        helpFormatter0.printHelp(" ", options1, true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test111168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "-", true, "\n");
        options1.addOption("arg", true, (String) null);
        helpFormatter0.printHelp(" ", options1, true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }
}
