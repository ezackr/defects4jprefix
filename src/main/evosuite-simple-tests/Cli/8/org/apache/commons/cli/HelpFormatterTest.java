/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 19:44:58 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.junit.runner.RunWith;

public class HelpFormatterTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertNotNull(pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "\n", options0);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test0152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1059, 31, "--");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test0281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test0282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test0284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test0287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test0289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test0290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test0293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(838, "arg", "\n", options0, "\n", false);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test0399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test03100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test03101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test03102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test03103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test03104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test03105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test03106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test03107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test03108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test03109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test03110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test03111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test03112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test03113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test03114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test03115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test03116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test03117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test03118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test03119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test03120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test03121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test03122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test03123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test03124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test03125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("[ Options: [ short ", options0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test04126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test04127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test04128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test04129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test04130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test04131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test04132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test04133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test04134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test04135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test04136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test04137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test04138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test04139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test04140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test04143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test04144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test04146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(")", string0);
    }

    @Test(timeout = 4000)
    public void test04148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test04149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test04150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test04151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test04152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test04153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test04154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test04155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test04156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(")");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test05157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test05158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test05159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test05160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test05161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test05162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test05163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test05164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test05165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test05166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test05167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test05168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test05169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test05170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test05171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test05172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test05173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test05174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test05175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test05176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test05177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test05178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test05179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test05180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test05181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test05182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test05183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test05184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test05185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test05186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test05187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim(" ");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test06188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test06189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test06190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test06191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test06192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test06193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test06194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test06195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test06196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test06197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test06198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test06199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test06200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test06201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test06202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test06203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test06204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test06205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test06206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test06207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test06208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test06209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test06210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test06211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test06212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test06213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test06214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test06215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test06216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test06217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test06218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 2010, options0, 2010, 3521);
        assertNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test07219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test07220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test07221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test07222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test07223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test07224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test07225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test07226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test07227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test07228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test07229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test07230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test07231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test07232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test07233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test07234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test07235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test07236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test07237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test07238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test07239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test07240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test07241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test07242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test07243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test07244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test07245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test07246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test07247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test07248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test07249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test07250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test07251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test07252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test07253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test07254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test07255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test07256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test07257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test07258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(31);
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test08259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test08260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test08261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test08262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test08263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test08264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test08265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test08266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test08268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test08269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test08270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test08272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test08273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test08274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test08275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        assertEquals("arg", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test08276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test08277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test08278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test08279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test08280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test08281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test08283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test08284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test08285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test08286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test08287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test08289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test08290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test08291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test08292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test08293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test08294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test08295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals("arg", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test08296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals(3, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test08297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertEquals("arg", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test08298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 322, options0, 322, 8);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test09299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test09300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test09301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test09302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test09303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test09304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test09305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test09306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test09307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test09308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test09309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test09310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test09311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test09312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test09313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test09314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test09315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test09316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test09317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test09318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals(0, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test09319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test09320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals(0, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test09321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test09322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test09323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test09324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test09325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test09326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test09327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test09328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test09329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test09330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test09331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test09332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(0, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test09333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test09334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test09335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(0, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test09336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test09337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test09338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test09339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test09340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test09341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test09342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(0);
        int int0 = helpFormatter0.getWidth();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test10343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test10344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test10345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test10346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test10347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test10348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test10349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test10350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test10351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test10352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test10353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test10354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test10355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test10356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test10357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test10358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test10359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test10360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test10361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test10362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test10363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test10364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        assertEquals((-1430), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test10365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test10366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test10367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals((-1430), helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test10368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test10369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test10370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test10371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test10372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals((-1430), int0);
    }

    @Test(timeout = 4000)
    public void test10373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test10374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test10375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test10376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test10377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test10378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test10379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals((-1430), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test10380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-1430);
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test11381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test11382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test11383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test11384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test11385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test11386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test11387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test11388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test11389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test11390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test11391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test11392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test11393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test11394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test11395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test11396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test11397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test11398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test11399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test11400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test11401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test11402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test11403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test11404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test11405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test11406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test11407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test11408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test11409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test11410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test11411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test11412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test11413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test11414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test11415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test11416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test11417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test11418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test11419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultOptPrefix = "";
        String string0 = helpFormatter0.getOptPrefix();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test12420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test12421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test12422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test12423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test12424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test12425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test12426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test12427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test12428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test12429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test12430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test12431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test12432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test12433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test12434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test12435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test12436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test12437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test12438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test12439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test12440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test12441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test12442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        assertEquals((-2), helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test12443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test12444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test12445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals((-2), helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test12446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test12447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test12448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test12449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals((-2), int0);
    }

    @Test(timeout = 4000)
    public void test12450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test12451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test12452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test12453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test12454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test12455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test12456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test12457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-2);
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals((-2), helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test13458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test13459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test13460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test13461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test13462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test13463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test13464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test13465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test13466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test13467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test13468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test13469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test13470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test13471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test13472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test13473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test13474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals(0, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test13475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test13476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test13477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test13478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test13479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test13480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test13481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals(0, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test13482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test13483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test13484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test13485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test13486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test13487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test13488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(0, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test13489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test13490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test13491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test13492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test13493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test13494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test13495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test13496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(0, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test13497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test13498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test13499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test13500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test13501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(0);
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test14502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test14503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test14504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test14505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test14506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test14507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test14508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test14509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test14510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test14511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test14512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test14513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test14514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test14515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test14516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test14517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test14518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test14519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test14520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test14521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test14522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals((-2483), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test14523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test14524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test14525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test14526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test14527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test14528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals((-2483), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test14529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test14530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test14531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test14532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test14533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test14534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test14535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test14536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals((-2483), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test14537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals((-2483), int0);
    }

    @Test(timeout = 4000)
    public void test14538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test14539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test14540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test14541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test14542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test14543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals((-2483), helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test14544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test14545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-2483));
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test15546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test15547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test15548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test15549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test15550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test15551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test15552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test15553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test15554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test15555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test15556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test15557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test15558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test15559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test15560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test15561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test15562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test15563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test15564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test15565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test15566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test15567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test15568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test15569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test15570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test15571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test15572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test15573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test15574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test15575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test15576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test15577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test15578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test15579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test15580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test15581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test15582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test15583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test15584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals("", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test15585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test15586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test15587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test15588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test15589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test15590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName("");
        String string0 = helpFormatter0.getArgName();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test16591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test16592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test16593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test16594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test16595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test16596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test16597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test16598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test16599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test16600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test16601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test16602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test16603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test16604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test16605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test16606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test16607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test16608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test16609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test16610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test16611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test16612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test16613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test16614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test16615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test16616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test16617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test16618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test16619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test16620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test16621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test16622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test16623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test16624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test16625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test16626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test16627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(687, int0);
    }

    @Test(timeout = 4000)
    public void test16628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test16629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test16630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test16631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test16632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test16633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test16634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test16635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(2526);
        int int0 = helpFormatter0.findWrapPos(string0, (-1839), 2526);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test17636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test17637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test17638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test17639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test17640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test17641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test17642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test17643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test17644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test17645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test17646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test17647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test17648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test17649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test17650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test17651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test17652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test17653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test17654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test17655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test17656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test17657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test17658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test17659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test17660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test17661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test17662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test17663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test17664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test17665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.findWrapPos("T)W\"Dj2D~-ku", 16, 19);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test18666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test18667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test18668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test18669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test18670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test18671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test18672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test18673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test18674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test18675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test18676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test18677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test18678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test18679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test18680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test18681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test18682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test18683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test18684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test18685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test18686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test18687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test18688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test18689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test18690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test18691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test18692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test18693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test18694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test18695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test18696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.createPadding(0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test19697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test19698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test19699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test19700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test19701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test19702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test19703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test19704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test19705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test19706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test19707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test19708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test19709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test19710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test19711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test19712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("Awg ");
        assertEquals("Awg ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test19713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("Awg ");
        assertEquals(4, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test19714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("Awg ");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test19715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("Awg ");
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, "UCPVs9#|");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test20716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test20717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test20718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test20719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test20720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test20721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test20722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test20723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test20724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test20725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test20726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test20727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test20728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test20729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test20730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test20731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        assertEquals(7, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test20732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        assertEquals("usage: ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test20733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test20734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("usage: ");
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test21735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test21736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test21737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test21738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test21739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test21740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test21741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test21742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test21743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test21744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test21745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test21746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test21747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test21748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test21749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test21750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("Awg ");
        assertEquals(4, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test21751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("Awg ");
        assertEquals("Awg ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test21752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("Awg ");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test21753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("Awg ");
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "Awg ");
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test22754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test22755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test22756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test22757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test22758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test22759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test22760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test22761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test22762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test22763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test22764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test22765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test22766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test22767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test22768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test22769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        assertEquals("arg", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test22770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test22771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test22772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test22773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test22774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test22775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test22776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test22777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test22778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test22779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test22780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test22781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test22782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test22783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test22784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test22785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test22786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertEquals("WhB0~O`/XSo@+tWe!r", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test22787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test22788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test22789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test22790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test22791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test22792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test22793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test22794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test22795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test22796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test22797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test22798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test22799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test22800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test22801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test22802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertNull(option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test22803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test22804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test22805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertEquals("WhB0~O`/XSo@+tWe!r", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test22806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test22807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test22808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test22809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer("arg");
        Options options0 = new Options();
        Option option0 = new Option("", true, "WhB0~O`/XSo@+tWe!r");
        Options options1 = options0.addOption(option0);
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 322, 322);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test23810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test23811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test23812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test23813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test23814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test23815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test23816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test23817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test23818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test23819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test23820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test23821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test23822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test23823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test23824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test23825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions((StringBuffer) null, 662, (Options) null, 662, 662);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test24826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test24827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test24828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test24829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test24830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test24831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test24832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test24833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test24834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test24835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test24836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test24837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test24838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test24839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test24840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test24841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test24842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test24843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test24844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        // Undeclared exception!
        try {
            helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, (-2269));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test25845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test25846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test25847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test25848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test25849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test25850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test25851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test25852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test25853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test25854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test25855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test25856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test25857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test25858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test25859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test25860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) null, 0, "Cannot add value, list full.");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test26861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test26862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test26863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test26864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test26865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test26866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test26867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test26868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test26869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test26870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test26871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test26872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test26873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test26874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test26875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test26876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) null, 31, "(i;_Pl>VTz+NSQ");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test27877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test27878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test27879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test27880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test27881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test27882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test27883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test27884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test27885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test27886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test27887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test27888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test27889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test27890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test27891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test27892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) null, 31, 31, "a");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test28893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test28894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test28895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test28896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test28897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test28898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test28899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test28900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test28901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test28902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test28903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test28904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test28905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test28906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test28907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test28908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        assertEquals("", byteArrayOutputStream0.toString());
    }

    @Test(timeout = 4000)
    public void test28909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        assertEquals(0, byteArrayOutputStream0.size());
    }

    @Test(timeout = 4000)
    public void test28910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        assertNotNull(byteArrayOutputStream0);
    }

    @Test(timeout = 4000)
    public void test28911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test28912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2353), "[");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test29913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test29914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test29915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test29916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test29917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test29918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test29919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test29920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test29921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test29922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test29923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test29924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test29925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test29926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test29927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test29928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) null, 1956, "x\" i|");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test30929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test30930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test30931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test30932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test30933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test30934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test30935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test30936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test30937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test30938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test30939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test30940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test30941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test30942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test30943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test30944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test30945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test30946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test30947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test30948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "org.apache.commons.cli.Options", false, "hOz[4ov~");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test30949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "org.apache.commons.cli.Options", false, "hOz[4ov~");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test30950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "org.apache.commons.cli.Options", false, "hOz[4ov~");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test31951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test31952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test31953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test31954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test31955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test31956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test31957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test31958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test31959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test31960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test31961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test31962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test31963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test31964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test31965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test31966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test31967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test31968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test31969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test31970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", false, "9X");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test31971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", false, "9X");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test31972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", false, "9X");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test31973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", false, "9X");
        // Undeclared exception!
        try {
            helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 1, 10);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test32974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test32975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test32976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test32977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test32978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test32979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test32980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test32981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test32982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test32983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test32984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test32985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test32986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test32987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test32988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test32989() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test32990() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((String) null, options0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test33991() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test33992() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test33993() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test33994() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test33995() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test33996() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test33997() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test33998() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test33999() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test331000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test331001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test331002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test331003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test331004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test331005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test331006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test331007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        assertEquals((-2), helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test331008() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test331009() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test331010() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test331011() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test331012() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test331013() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test331014() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test331015() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = (-2);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("\n", options0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test341016() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test341017() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test341018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test341019() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test341020() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test341021() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test341022() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test341023() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test341024() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test341025() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test341026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test341027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test341028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test341029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test341030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test341031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test341032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", options0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test351033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test351034() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test351035() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test351036() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test351037() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test351038() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test351039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test351040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test351041() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test351042() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test351043() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test351044() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test351045() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test351046() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test351047() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test351048() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        assertEquals(0, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test351049() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test351050() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test351051() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test351052() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test351053() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test351054() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test351055() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test351056() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test351057() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultWidth = 0;
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("sp6)`s)PV", "&C%iyc", options0, "(\u0014c", false);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test361058() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test361059() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test361060() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test361061() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test361062() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test361063() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test361064() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test361065() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test361066() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test361067() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test361068() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test361069() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test361070() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test361071() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test361072() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test361073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("K$/GC`?%TuDyP$NK;", "K$/GC`?%TuDyP$NK;", (Options) null, "K$/GC`?%TuDyP$NK;", false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test371074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test371075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test371076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test371077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test371078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test371079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test371080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test371081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test371082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test371083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test371084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test371085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test371086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test371087() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test371088() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test371089() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test371090() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test371091() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test371092() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test371093() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test371094() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        assertEquals((-1482), helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test371095() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test371096() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test371097() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test371098() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.defaultLeftPad = (-1482);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("bVoK%6$E[I<fG1w}", "", options0, "", false);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test381099() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test381100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test381101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test381102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test381103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test381104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test381105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test381106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test381107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test381108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test381109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test381110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test381111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test381112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test381113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test381114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test381115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", "", options0, "", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test391116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test391117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test391118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test391119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test391120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test391121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test391122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test391123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test391124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test391125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test391126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test391127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test391128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test391129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test391130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test391131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test391132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals(0, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test391133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test391134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test391135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test391136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test391137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test391138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test391139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test391140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test391141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test391142() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test391143() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test391144() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test391145() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        assertEquals(0, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test391146() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.setWidth(0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("~v", (String) null, options0, "org.apache.commons.cli.HelpFormatter");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test401147() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test401148() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test401149() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test401150() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test401151() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test401152() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test401153() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test401154() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test401155() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test401156() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test401157() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test401158() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test401159() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test401160() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test401161() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test401162() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test401163() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test401164() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test401165() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test401166() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        Options options2 = options1.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, "KCpjg1~95Bn53");
        assertSame(options0, options2);
    }

    @Test(timeout = 4000)
    public void test401167() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        Options options2 = options1.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, "KCpjg1~95Bn53");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test401168() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        Options options2 = options1.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, "KCpjg1~95Bn53");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test401169() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        Options options2 = options1.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, "KCpjg1~95Bn53");
        assertSame(options1, options2);
    }

    @Test(timeout = 4000)
    public void test401170() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        Options options2 = options1.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, "KCpjg1~95Bn53");
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test401171() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        Options options2 = options1.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, "KCpjg1~95Bn53");
        assertSame(options2, options0);
    }

    @Test(timeout = 4000)
    public void test401172() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        Options options2 = options1.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, "KCpjg1~95Bn53");
        assertNotNull(options2);
    }

    @Test(timeout = 4000)
    public void test401173() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, false, "U");
        Options options2 = options1.addOption("arg", "org.apache.commons.cli.HelpFormatter", true, "KCpjg1~95Bn53");
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("@G4hoOFL9hF^5ZHe", "@G4hoOFL9hF^5ZHe", options0, "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test411174() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test411175() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test411176() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test411177() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test411178() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test411179() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test411180() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test411181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test411182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test411183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test411184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test411185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test411186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test411187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test411188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test411189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test411190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-965);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test411191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-965);
        assertEquals((-965), helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test411192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-965);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test411193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-965);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test411194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-965);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test411195() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-965);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test411196() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-965);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test411197() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-965);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test411198() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.defaultLeftPad = (-965);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("~v", (String) null, options0, "");
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test421199() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test421200() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test421201() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test421202() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test421203() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test421204() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test421205() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test421206() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test421207() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test421208() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test421209() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test421210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test421211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test421212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test421213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test421214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test421215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("", "", options0, "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test431216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test431217() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test431218() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test431219() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test431220() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test431221() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test431222() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test431223() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test431224() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test431225() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test431226() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test431227() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test431228() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test431229() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test431230() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test431231() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test431232() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) null, 0, "usage: ", "usage: ", options0, (-1), 1396, "--d,B;ARK.", false);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test441233() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test441234() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test441235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test441236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test441237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test441238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test441239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test441240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test441241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test441242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test441243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test441244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test441245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test441246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test441247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test441248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test441249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) null, 1425, "   ", ", ", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test451250() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test451251() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test451252() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test451253() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test451254() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test451255() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test451256() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test451257() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test451258() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test451259() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test451260() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test451261() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test451262() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test451263() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test451264() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test451265() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test451266() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test451267() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test451268() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator", "xC.cR*", options0, 0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test461269() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test461270() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test461271() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test461272() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test461273() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test461274() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test461275() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test461276() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test461277() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test461278() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test461279() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test461280() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test461281() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test461282() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test461283() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test461284() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("D'X", "");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test461285() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("D'X", "");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test461286() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("D'X", "");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test461287() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("D'X", "");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1832), (String) null, "Q/Mz,2vuD-Z", options0, (-1832), (-1832), "Q/Mz,2vuD-Z");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test471288() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test471289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test471290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test471291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test471292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test471293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test471294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test471295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test471296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test471297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test471298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test471299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test471300() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test471301() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test471302() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test471303() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test471304() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(0, "pf", "-", options0, "-", true);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test481305() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test481306() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test481307() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test481308() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test481309() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test481310() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test481311() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test481312() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test481313() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test481314() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test481315() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test481316() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test481317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test481318() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test481319() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test481320() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(13, "arg", "arg", (Options) null, "", false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test491321() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test491322() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test491323() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test491324() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test491325() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test491326() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test491327() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test491328() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test491329() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test491330() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test491331() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test491332() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test491333() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test491334() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test491335() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test491336() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test491337() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(0, "   ", "   ", options0, "dT");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test501338() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test501339() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test501340() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test501341() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test501342() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test501343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test501344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test501345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test501346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test501347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test501348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test501349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test501350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test501351() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test501352() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test501353() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test501354() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(33, "", "", options0, "B_nZqi4'M'*?");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test511355() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test511356() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test511357() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test511358() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test511359() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test511360() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test511361() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test511362() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test511363() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test511364() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test511365() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test511366() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test511367() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test511368() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test511369() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test511370() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.findWrapPos("", (-2), (-2621));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test521371() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test521372() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test521373() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test521374() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test521375() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test521376() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test521377() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test521378() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test521379() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test521380() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test521381() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test521382() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test521383() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test521384() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test521385() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test521386() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.findWrapPos((String) null, 1, 1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test531387() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test531388() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test531389() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test531390() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test531391() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test531392() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test531393() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test531394() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test531395() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test531396() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test531397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test531398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test531399() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test531400() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test531401() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test531402() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test531403() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test531404() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test531405() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test531406() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test531407() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test531408() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test531409() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test531410() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test531411() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test531412() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test531413() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test531414() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test531415() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test531416() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test531417() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test531418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test531419() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test531420() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test531421() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test531422() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test531423() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertTrue(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test531424() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test531425() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test531426() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test531427() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertFalse(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test531428() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertNull(mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test531429() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test531430() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test531431() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertFalse(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test531432() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test531433() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals("\n", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test531434() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test531435() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals("\n", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test531436() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test531437() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test531438() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Options options1 = options0.addOption("", false, "");
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "cmdLineSyntax not provided", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test541439() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test541440() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test541441() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test541442() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test541443() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test541444() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test541445() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test541446() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test541447() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test541448() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test541449() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test541450() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test541451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test541452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test541453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test541454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.createPadding((-683));
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test551455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test551456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test551457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test551458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test551459() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test551460() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test551461() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test551462() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test551463() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test551464() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test551465() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test551466() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test551467() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test551468() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test551469() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test551470() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test551471() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test551472() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test551473() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        assertNotNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test551474() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test551475() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test551476() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertEquals("-", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test551477() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test551478() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test551479() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertNull(option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test551480() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test551481() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test551482() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test551483() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertEquals(45, option0.getId());
    }

    @Test(timeout = 4000)
    public void test551484() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test551485() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test551486() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test551487() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test551488() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertEquals("--", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test551489() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test551490() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test551491() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test551492() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test551493() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test551494() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test551495() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test551496() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test551497() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test551498() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("-", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test551499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test551500() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test551501() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test551502() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test551503() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test551504() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test551505() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals(45, option0.getId());
    }

    @Test(timeout = 4000)
    public void test551506() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test551507() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test551508() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test551509() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test551510() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertEquals("--", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test551511() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test551512() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test551513() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test551514() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test551515() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        assertNotNull(optionGroup1);
    }

    @Test(timeout = 4000)
    public void test551516() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test551517() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals((-1), Option.UNINITIALIZED);
    }

    @Test(timeout = 4000)
    public void test551518() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test551519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup0, optionGroup1);
    }

    @Test(timeout = 4000)
    public void test551520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(optionGroup1, optionGroup0);
    }

    @Test(timeout = 4000)
    public void test551521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test551522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup0.isRequired());
    }

    @Test(timeout = 4000)
    public void test551523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup0.getSelected());
    }

    @Test(timeout = 4000)
    public void test551524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("-", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test551525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(option0.getValue());
    }

    @Test(timeout = 4000)
    public void test551526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test551527() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test551528() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test551529() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test551530() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test551531() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals(45, option0.getId());
    }

    @Test(timeout = 4000)
    public void test551532() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test551533() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test551534() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test551535() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test551536() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertEquals("--", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test551537() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test551538() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test551539() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertFalse(optionGroup1.isRequired());
    }

    @Test(timeout = 4000)
    public void test551540() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNull(optionGroup1.getSelected());
    }

    @Test(timeout = 4000)
    public void test551541() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        assertNotNull(options1);
    }

    @Test(timeout = 4000)
    public void test551542() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) null, 1730, (String) null, options1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test561543() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test561544() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test561545() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test561546() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test561547() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test561548() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test561549() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test561550() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test561551() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test561552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test561553() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test561554() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test561555() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test561556() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test561557() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test561558() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test561559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertNotNull(pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test561560() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test561561() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test561562() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test561563() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test561564() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test561565() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test561566() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test561567() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test561568() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test561569() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test561570() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test561571() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test561572() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test561573() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test561574() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test561575() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test561576() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test561577() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test561578() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 416, "6Qlt9DX9[", "", options0, 63, 7, "\n", true);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test571579() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test571580() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test571581() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test571582() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test571583() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test571584() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test571585() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test571586() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test571587() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test571588() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test571589() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test571590() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test571591() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test571592() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test571593() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test571594() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test571595() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        assertNotNull(mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test571596() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test571597() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test571598() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test571599() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test571600() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test571601() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test571602() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test571603() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test571604() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test571605() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test571606() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test571607() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test571608() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test571609() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test571610() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test571611() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test571612() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test571613() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test571614() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test571615() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertFalse(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test571616() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertFalse(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test571617() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals("arg", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test571618() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test571619() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test571620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals("arg", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test571621() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertNull(mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test571622() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertFalse(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test571623() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test571624() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test571625() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test571626() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test571627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", "\n", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertTrue(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test581628() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test581629() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test581630() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test581631() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test581632() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test581633() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test581634() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test581635() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test581636() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test581637() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test581638() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test581639() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test581640() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test581641() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test581642() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test581643() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test581644() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test581645() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test581646() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2484, "org.apache.commons.cli.HelpFormatter$OptionComparator", (String) null, options0, (-924), (-2250), "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test591647() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test591648() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test591649() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test591650() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test591651() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test591652() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test591653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test591654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test591655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test591656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test591657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test591658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test591659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test591660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test591661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test591662() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test591663() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) null, 10, (String) null, "", options0, (-1), 0, "", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test601664() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test601665() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test601666() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test601667() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test601668() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test601669() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test601670() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test601671() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test601672() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test601673() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test601674() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test601675() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test601676() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test601677() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test601678() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test601679() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        assertNotNull(mockFile0);
    }

    @Test(timeout = 4000)
    public void test601680() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test601681() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test601682() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test601683() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test601684() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test601685() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test601686() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test601687() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test601688() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test601689() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test601690() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test601691() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test601692() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test601693() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test601694() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test601695() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(1392409281320L, mockFile0.lastModified());
    }

    @Test(timeout = 4000)
    public void test601696() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test601697() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(0L, mockFile0.getFreeSpace());
    }

    @Test(timeout = 4000)
    public void test601698() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals("..Q", mockFile0.getName());
    }

    @Test(timeout = 4000)
    public void test601699() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertFalse(mockFile0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test601700() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(0L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test601701() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertTrue(mockFile0.canRead());
    }

    @Test(timeout = 4000)
    public void test601702() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertTrue(mockFile0.canExecute());
    }

    @Test(timeout = 4000)
    public void test601703() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(0L, mockFile0.getTotalSpace());
    }

    @Test(timeout = 4000)
    public void test601704() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test601705() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertTrue(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test601706() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertTrue(mockFile0.isFile());
    }

    @Test(timeout = 4000)
    public void test601707() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertTrue(mockFile0.isHidden());
    }

    @Test(timeout = 4000)
    public void test601708() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertTrue(mockFile0.isAbsolute());
    }

    @Test(timeout = 4000)
    public void test601709() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals("/Users/elliottzackrone/IdeaProjects/defects4jprefix/H@ER", mockFile0.getParent());
    }

    @Test(timeout = 4000)
    public void test601710() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("H@ER", "..Q");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "bhj66Y  /;rC");
        assertEquals("/Users/elliottzackrone/IdeaProjects/defects4jprefix/H@ER/..Q", mockFile0.toString());
    }

    @Test(timeout = 4000)
    public void test611711() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test611712() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test611713() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test611714() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test611715() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test611716() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test611717() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test611718() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test611719() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test611720() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test611721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test611722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test611723() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test611724() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test611725() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test611726() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test611727() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test611728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test611729() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        assertNotNull(options0);
    }

    @Test(timeout = 4000)
    public void test611730() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test611731() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test611732() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test611733() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test611734() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test611735() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test611736() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test611737() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test611738() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test611739() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test611740() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test611741() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test611742() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test611743() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test611744() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
        Options options0 = new Options();
        helpFormatter0.printOptions(mockPrintWriter0, 3707, options0, 3707, 10);
        assertEquals("\n", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test621745() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test621746() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test621747() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test621748() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test621749() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test621750() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test621751() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test621752() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test621753() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test621754() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test621755() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test621756() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test621757() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test621758() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test621759() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test621760() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rfLPB'=M&$';6:j");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test621761() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rfLPB'=M&$';6:j");
        // Undeclared exception!
        try {
            helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-402), (-1157), ";~{WXVqZ~");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test631762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test631763() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test631764() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test631765() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test631766() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test631767() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test631768() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test631769() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test631770() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test631771() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test631772() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test631773() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test631774() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test631775() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test631776() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test631777() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        assertNotNull(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test631778() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test631779() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test631780() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test631781() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test631782() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test631783() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test631784() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test631785() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test631786() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test631787() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test631788() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test631789() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test631790() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test631791() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1331, "HCFk ]cM[6O\"0KA?g");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test641792() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test641793() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test641794() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test641795() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test641796() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test641797() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test641798() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test641799() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test641800() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test641801() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test641802() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test641803() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test641804() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test641805() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test641806() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test641807() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test641808() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        assertNotNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test641809() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test641810() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test641811() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test641812() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test641813() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test641814() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test641815() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test641816() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test641817() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test641818() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test641819() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test641820() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test641821() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test641822() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test641823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test641824() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test641825() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test641826() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test641827() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test641828() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test641829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("", stringWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test641830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test641831() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test641832() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test641833() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test641834() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringWriter stringWriter0 = new StringWriter(1);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test651835() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test651836() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test651837() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test651838() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test651839() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test651840() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test651841() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test651842() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test651843() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test651844() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test651845() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test651846() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test651847() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test651848() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test651849() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test651850() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test651851() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test651852() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test651853() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test651854() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test651855() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test651856() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test651857() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test651858() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test651859() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test651860() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test651861() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test651862() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test651863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test651864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test661865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test661866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test661867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test661868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test661869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test661870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test661871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test661872() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test661873() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test661874() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test661875() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test661876() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test661877() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test661878() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test661879() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertNotNull(helpFormatter0);
    }

    @Test(timeout = 4000)
    public void test661880() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test661881() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test661882() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test661883() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test661884() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test661885() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
    }

    @Test(timeout = 4000)
    public void test661886() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
    }

    @Test(timeout = 4000)
    public void test661887() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
    }

    @Test(timeout = 4000)
    public void test661888() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test661889() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test661890() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test661891() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(74, helpFormatter0.getWidth());
    }

    @Test(timeout = 4000)
    public void test661892() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test661893() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test661894() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test661895() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test661896() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(1, helpFormatter0.getLeftPadding());
    }

    @Test(timeout = 4000)
    public void test661897() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test661898() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals("\n", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test661899() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals("\n                               ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test661900() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(32, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test661901() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals("\n                               ", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test661902() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertEquals(32, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test661903() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2526, 31, "\n");
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test671904() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        Option option0 = new Option("", "\n", false, (String) null);
        options0.addOption(option0);
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator", "xC.cR*", options0, 0, 3459, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test681905() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test681906() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option((String) null, "", true, "-");
        Options options1 = options0.addOption(option0);
        Options options2 = options1.addOption("", "\n", true, "arg");
        helpFormatter0.printHelp("~v", (String) null, options2, "");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test701907() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", "--");
        options0.addOption(option0);
        helpFormatter0.printHelp("&UB@H[_", "&UB@H[_", options0, "&UB@H[_", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test701908() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", "--");
        options0.addOption(option0);
        helpFormatter0.printHelp("&UB@H[_", "&UB@H[_", options0, "&UB@H[_", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test711909() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", ", ", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test711910() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile((File) null, "arg");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, "-", true, "--");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1425, "   ", ", ", options0, 1005, 0, "3<+FNwT+`'[`r`", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test721911() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(385, "sp6)`s)PV", "", options0, "sp6)`s)PV");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test731912() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "", "", options0, 838, 1379, "", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test741913() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(13, (String) null, (String) null, (Options) null, "--", true);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
        }
    }

    @Test(timeout = 4000)
    public void test751914() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test751915() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test751916() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test751917() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test751918() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test751919() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test751920() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test761921() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test761922() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test761923() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test761924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test761925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test761926() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test761927() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string0);
    }

    @Test(timeout = 4000)
    public void test771928() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test771929() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test771930() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test771931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test771932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test771933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test771934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test781935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("s'", options0, false);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test791936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test791937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test791938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test791939() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test791940() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test791941() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test791942() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", string0);
    }

    @Test(timeout = 4000)
    public void test791943() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test801944() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("lNd?m>gBO *Z");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "lNd?m>gBO *Z", (String) null, (Options) null, (-2), 0, "j-h`sLrcqGZ6N!L");
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test811945() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test811946() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test811947() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test811948() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("arg", string0);
    }

    @Test(timeout = 4000)
    public void test811949() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test811950() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test811951() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test821952() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test821953() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test821954() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test821955() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test821956() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test821957() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test821958() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test831959() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test831960() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix((String) null);
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test831961() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix((String) null);
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test831962() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix((String) null);
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test831963() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix((String) null);
        String string0 = helpFormatter0.getOptPrefix();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test831964() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix((String) null);
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test831965() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix((String) null);
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test831966() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix((String) null);
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test841967() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(147, "-", "yF#KBv45HM>QG", (Options) null, "usage: ");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test851968() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test851969() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        helpFormatter0.getSyntaxPrefix();
        assertEquals("", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test861970() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("K{~P-n,/0pq", (Options) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test871971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding((-2289));
        assertEquals((-2289), helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test881972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("");
        assertEquals("", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test891973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test891974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test891975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test891976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test891977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test891978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test891979() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test901980() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("M8=*95rEkV[(A");
        assertEquals("M8=*95rEkV[(A", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test911981() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test911982() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test911983() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, int0);
    }

    @Test(timeout = 4000)
    public void test911984() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test911985() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test911986() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test911987() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test921988() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockFile mockFile0 = new MockFile("\n");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        Options options0 = new Options();
        options0.addOption("", false, "");
        Options options1 = options0.addOption((String) null, "\n", false, ", ");
        // Undeclared exception!
        try {
            helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "xC.cR*", options1);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }
}
