/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:32:12 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.junit.runner.RunWith;

public class DefaultParserTest {

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[5];
        stringArray0[0] = "--The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
        CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[0];
        CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        String[] stringArray0 = new String[0];
        // Undeclared exception!
        try {
            defaultParser0.parse((Options) null, stringArray0, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "h!(&[NpQ-P,ulC^E][W";
        stringArray0[1] = "8{U;";
        stringArray0[2] = "";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "";
        stringArray0[6] = "";
        stringArray0[7] = "";
        Properties properties0 = new Properties();
        Object object0 = new Object();
        properties0.put(object0, object0);
        // Undeclared exception!
        try {
            defaultParser0.parse(options0, stringArray0, properties0, false);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // java.lang.Object cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[4];
        stringArray0[0] = "org.apache.commons.cli.OptionGroup";
        stringArray0[1] = "";
        stringArray0[2] = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
        stringArray0[3] = "[ option: ";
        Properties properties0 = new Properties();
        Object object0 = new Object();
        properties0.put(object0, "");
        // Undeclared exception!
        try {
            defaultParser0.parse(options0, stringArray0, properties0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // java.lang.Object cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        // Undeclared exception!
        try {
            defaultParser0.handleConcatenatedOptions("SHr_$7");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = new String[7];
        Properties properties0 = new Properties();
        // Undeclared exception!
        try {
            defaultParser0.parse(options0, stringArray0, properties0, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[10];
        stringArray0[0] = "-d-[L:X4b";
        CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = new String[22];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "--";
        optionGroup1.setRequired(true);
        defaultParser0.parse(options1, stringArray0, (Properties) null);
        try {
            defaultParser0.handleConcatenatedOptions("--org.apache.commons.cli.DefaultParser");
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: --org.apache.commons.cli.DefaultParser
        }
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = new String[22];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "--";
        option0.setRequired(true);
        defaultParser0.parse(options1, stringArray0, (Properties) null);
        try {
            defaultParser0.handleConcatenatedOptions("--org.apache.commons.cli.DefaultParser");
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: --org.apache.commons.cli.DefaultParser
        }
    }

    @Test(timeout = 4000)
    public void test1210() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[5];
        stringArray0[0] = "";
        stringArray0[1] = "-";
        stringArray0[2] = "-";
        stringArray0[3] = "-";
        stringArray0[4] = "-/]{5&0*=yap^`FCTQms";
        try {
            defaultParser0.parse(options0, stringArray0, properties0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: -/]{5&0*=yap^`FCTQms
        }
    }

    @Test(timeout = 4000)
    public void test1311() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "-d-[L:X4b";
        try {
            defaultParser0.parse(options0, stringArray0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: -d-[L:X4b
        }
    }

    @Test(timeout = 4000)
    public void test1412() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "ob;stJh0CXN.!D$5*O[";
        stringArray0[1] = "-[";
        Properties properties0 = new Properties();
        try {
            defaultParser0.parse(options0, stringArray0, properties0, false);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: -[
        }
    }

    @Test(timeout = 4000)
    public void test1513() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "or";
        stringArray0[1] = "e";
        stringArray0[2] = "/]{5&0*=yap^`FCTQms";
        stringArray0[3] = "--8_)Xx=T#WIew%";
        try {
            defaultParser0.parse(options0, stringArray0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: --8_)Xx=T#WIew%
        }
    }

    @Test(timeout = 4000)
    public void test1614() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "-";
        Properties properties0 = new Properties();
        // Undeclared exception!
        try {
            defaultParser0.parse(options0, stringArray0, properties0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1715() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "-n=M_{JMP0vY=K;";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test1916() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("", "");
        option0.setArgs(431);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        String[] stringArray0 = new String[7];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "--";
        defaultParser0.parse(options1, stringArray0, (Properties) null);
        defaultParser0.handleConcatenatedOptions("--org.apache.commons.cli.DefaultParser");
        try {
            defaultParser0.handleConcatenatedOptions("--");
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing argument for option:
        }
    }

    @Test(timeout = 4000)
    public void test2017() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[1];
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        options0.addOptionGroup(optionGroup0);
        stringArray0[0] = "o";
        try {
            defaultParser0.parse(options0, stringArray0, false);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing required option: []
        }
    }

    @Test(timeout = 4000)
    public void test2118() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        StringReader stringReader0 = new StringReader("--d-[L:X4b");
        properties0.load((Reader) stringReader0);
        // Undeclared exception!
        try {
            defaultParser0.parse(options0, (String[]) null, properties0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2219() throws Throwable {
        DefaultParser defaultParser0 = new DefaultParser();
        String[] stringArray0 = new String[5];
        // Undeclared exception!
        try {
            defaultParser0.parse((Options) null, stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
