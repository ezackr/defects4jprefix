/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 21:44:55 GMT 2023
 */
package org.apache.commons.cli2.commandline;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.validation.NumberValidator;
import org.junit.runner.RunWith;

public class WriteableCommandLineImplTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        String string0 = writeableCommandLineImpl0.getProperty("-D");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        Set set0 = writeableCommandLineImpl0.getOptionTriggers();
        assertTrue(set0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty("-D", "Passes properties and values to the application");
        String string0 = writeableCommandLineImpl0.getProperty("-D");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty("-D", "Passes properties and values to the application");
        String string0 = writeableCommandLineImpl0.getProperty("-D");
        assertEquals("Passes properties and values to the application", string0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Set set0 = writeableCommandLineImpl0.getProperties();
        assertTrue(set0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getNormalised();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList linkedList1 = (LinkedList) writeableCommandLineImpl0.getValue("-D", (Object) linkedList0);
        assertEquals(0, linkedList1.size());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addOption(propertyOption0);
        List list0 = writeableCommandLineImpl0.getOptions();
        writeableCommandLineImpl0.addValue(propertyOption0, propertyOption0);
        List list1 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) list0);
        assertEquals(1, list1.size());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        propertyOption0.setParent(propertyOption0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        assertFalse(propertyOption0.isRequired());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addValue(propertyOption0, propertyOption0);
        writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
        assertEquals(68, propertyOption0.getId());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Passes properties and values to the application", "-D", 0, 0, '>', '>', numberValidator0, "-D", linkedList0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
        writeableCommandLineImpl0.addValue(argumentImpl0, linkedList0);
        assertEquals(0, argumentImpl0.getId());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        // Undeclared exception!
        try {
            writeableCommandLineImpl0.addSwitch(propertyOption0, true);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Switch already set.
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, false);
        assertEquals(68, propertyOption0.getId());
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        boolean boolean0 = writeableCommandLineImpl0.hasOption((Option) propertyOption0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addOption(propertyOption0);
        boolean boolean0 = writeableCommandLineImpl0.hasOption("-D");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) null);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addValue(propertyOption0, writeableCommandLineImpl0);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        Boolean boolean0 = new Boolean(true);
        Boolean boolean1 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, boolean0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        Boolean boolean0 = new Boolean(true);
        Boolean boolean1 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, boolean0);
        assertNotNull(boolean1);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Boolean boolean0 = Boolean.TRUE;
        Boolean boolean1 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, boolean0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Boolean boolean0 = writeableCommandLineImpl0.getSwitch("-D");
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty("-D", "Passes properties and values to the application");
        Set set0 = writeableCommandLineImpl0.getProperties();
        assertEquals(1, set0.size());
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("Passes properties and values to the application");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("-D");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<String> linkedList0 = new LinkedList<String>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        linkedList0.add("Passes properties and values to the application");
        String string0 = writeableCommandLineImpl0.toString();
        assertEquals("\"Passes properties and values to the application\"", string0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<String> linkedList0 = new LinkedList<String>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        linkedList0.offerLast("-D");
        linkedList0.add("-D");
        String string0 = writeableCommandLineImpl0.toString();
        assertEquals("-D -D", string0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
        assertEquals(68, propertyOption0.getId());
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        Boolean boolean0 = Boolean.valueOf(true);
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
        assertEquals("-D", propertyOption0.getPreferredName());
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, (Boolean) null);
        assertEquals("-D", propertyOption0.getPreferredName());
    }
}
