/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:13:13 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Properties;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.junit.runner.RunWith;

public class PosixParserTest {

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        // Undeclared exception!
        try {
            posixParser0.burstToken("_?pID9k@[EV-SwopsG", true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        options0.addOption("s", false, "s");
        stringArray0[0] = "s";
        stringArray0[1] = "s";
        stringArray0[2] = "s";
        stringArray0[3] = "s";
        stringArray0[4] = "-,";
        stringArray0[5] = "--v}/-_o\"~ _#";
        stringArray0[6] = "-sM]dvUAPJ@oV~o_b,";
        String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
        String[] stringArray2 = posixParser0.flatten(options0, stringArray1, false);
        assertEquals(8, stringArray2.length);
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        options0.addOption("s", false, "s");
        stringArray0[0] = "s";
        stringArray0[1] = "s";
        stringArray0[2] = "s";
        stringArray0[3] = "s";
        stringArray0[4] = "-,";
        stringArray0[5] = "--v}/-_o\"~ _#";
        stringArray0[6] = "-sM]dvUAPJ@oV~o_b,";
        String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
        String[] stringArray2 = posixParser0.flatten(options0, stringArray1, false);
        assertEquals(7, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test63() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "-";
        stringArray0[1] = "-";
        stringArray0[2] = ",";
        String[] stringArray1 = posixParser0.flatten((Options) null, stringArray0, true);
        assertEquals(7, stringArray1.length);
    }

    @Test(timeout = 4000)
    public void test74() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "-";
        // Undeclared exception!
        try {
            posixParser0.flatten((Options) null, stringArray0, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test85() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "--OO3q=#j";
        // Undeclared exception!
        try {
            posixParser0.parse(options0, stringArray0, (Properties) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test96() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "-*";
        String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
        assertEquals(1, stringArray1.length);
    }
}
