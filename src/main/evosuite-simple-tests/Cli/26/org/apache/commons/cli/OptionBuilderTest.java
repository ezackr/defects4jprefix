/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:27:10 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionBuilder;
import org.junit.runner.RunWith;

public class OptionBuilderTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        OptionBuilder.isRequired(true);
        Option option0 = OptionBuilder.create("");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        OptionBuilder.withValueSeparator('e');
        Option option0 = OptionBuilder.create("arg");
        assertEquals('e', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        OptionBuilder.withValueSeparator('e');
        Option option0 = OptionBuilder.create("arg");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        OptionBuilder.withLongOpt("TPpq4");
        Option option0 = OptionBuilder.create("arg");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        OptionBuilder.hasOptionalArgs(1785);
        Option option0 = OptionBuilder.create((String) null);
        assertEquals(1785, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        OptionBuilder.hasOptionalArgs(1785);
        Option option0 = OptionBuilder.create((String) null);
        assertTrue(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        OptionBuilder.hasArgs(0);
        Option option0 = OptionBuilder.create("");
        assertEquals(0, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        OptionBuilder.create("");
        Option option0 = OptionBuilder.create("");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        OptionBuilder.create("");
        Option option0 = OptionBuilder.create("");
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        OptionBuilder.create("");
        Option option0 = OptionBuilder.create("");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        OptionBuilder.create("");
        Option option0 = OptionBuilder.create("");
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        OptionBuilder.create("");
        Option option0 = OptionBuilder.create("");
        assertEquals('\u0000', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        OptionBuilder.isRequired();
        Option option0 = OptionBuilder.create('f');
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        OptionBuilder.isRequired();
        Option option0 = OptionBuilder.create('f');
        assertTrue(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        OptionBuilder.isRequired();
        Option option0 = OptionBuilder.create('f');
        assertEquals(102, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        OptionBuilder.withLongOpt("qOPlTS5Lz.^");
        Option option0 = OptionBuilder.create('l');
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        OptionBuilder.withLongOpt("qOPlTS5Lz.^");
        Option option0 = OptionBuilder.create('l');
        assertEquals("l", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        OptionBuilder.withLongOpt(" [ARG]");
        OptionBuilder.create();
        Option option0 = OptionBuilder.create('R');
        assertFalse(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        OptionBuilder.withLongOpt(" [ARG]");
        OptionBuilder.create();
        Option option0 = OptionBuilder.create('R');
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        OptionBuilder.withLongOpt(" [ARG]");
        OptionBuilder.create();
        Option option0 = OptionBuilder.create('R');
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        OptionBuilder.withLongOpt(" [ARG]");
        OptionBuilder.create();
        Option option0 = OptionBuilder.create('R');
        assertEquals(82, option0.getId());
    }

    @Test(timeout = 4000)
    public void test0821() throws Throwable {
        OptionBuilder.withLongOpt(" [ARG]");
        OptionBuilder.create();
        Option option0 = OptionBuilder.create('R');
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test0822() throws Throwable {
        OptionBuilder.withLongOpt(" [ARG]");
        OptionBuilder.create();
        Option option0 = OptionBuilder.create('R');
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0923() throws Throwable {
        OptionBuilder.hasOptionalArgs(0);
        Option option0 = OptionBuilder.create('F');
        assertEquals(0, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0924() throws Throwable {
        OptionBuilder.hasOptionalArgs(0);
        Option option0 = OptionBuilder.create('F');
        assertEquals("F", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test0925() throws Throwable {
        OptionBuilder.hasOptionalArgs(0);
        Option option0 = OptionBuilder.create('F');
        assertTrue(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test1026() throws Throwable {
        OptionBuilder.hasArg(true);
        Option option0 = OptionBuilder.create('2');
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1027() throws Throwable {
        OptionBuilder.hasArg(true);
        Option option0 = OptionBuilder.create('2');
        assertEquals(50, option0.getId());
    }

    @Test(timeout = 4000)
    public void test1128() throws Throwable {
        OptionBuilder.withValueSeparator('L');
        OptionBuilder.withLongOpt("");
        Option option0 = OptionBuilder.create();
        assertEquals('L', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1129() throws Throwable {
        OptionBuilder.withValueSeparator('L');
        OptionBuilder.withLongOpt("");
        Option option0 = OptionBuilder.create();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1230() throws Throwable {
        OptionBuilder.withLongOpt("");
        OptionBuilder.hasOptionalArgs((-822));
        Option option0 = OptionBuilder.create();
        assertTrue(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test1231() throws Throwable {
        OptionBuilder.withLongOpt("");
        OptionBuilder.hasOptionalArgs((-822));
        Option option0 = OptionBuilder.create();
        assertEquals((-822), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1332() throws Throwable {
        OptionBuilder.withLongOpt("");
        OptionBuilder.withArgName("arg");
        Option option0 = OptionBuilder.create();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        OptionBuilder.withLongOpt("");
        OptionBuilder.hasArgs(0);
        Option option0 = OptionBuilder.create();
        assertEquals(0, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1534() throws Throwable {
        try {
            OptionBuilder.create('&');
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // illegal option value '&'
        }
    }

    @Test(timeout = 4000)
    public void test1635() throws Throwable {
        try {
            OptionBuilder.create("7[");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // opt contains illegal character value '['
        }
    }

    @Test(timeout = 4000)
    public void test1736() throws Throwable {
        try {
            OptionBuilder.create();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must specify longopt
        }
    }

    @Test(timeout = 4000)
    public void test1837() throws Throwable {
        OptionBuilder.hasArg(true);
        OptionBuilder.withLongOpt(" [ARG]");
        Option option0 = OptionBuilder.create();
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1938() throws Throwable {
        OptionBuilder optionBuilder0 = OptionBuilder.hasArg(false);
        assertNotNull(optionBuilder0);
    }

    @Test(timeout = 4000)
    public void test2039() throws Throwable {
        OptionBuilder optionBuilder0 = OptionBuilder.withDescription("Cannot odd val\"e, l$st full.");
        assertNotNull(optionBuilder0);
    }

    @Test(timeout = 4000)
    public void test2140() throws Throwable {
        OptionBuilder.hasOptionalArgs();
        Option option0 = OptionBuilder.create('');
        assertEquals((-2), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2141() throws Throwable {
        OptionBuilder.hasOptionalArgs();
        Option option0 = OptionBuilder.create('');
        assertEquals(127, option0.getId());
    }

    @Test(timeout = 4000)
    public void test2142() throws Throwable {
        OptionBuilder.hasOptionalArgs();
        Option option0 = OptionBuilder.create('');
        assertTrue(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test2243() throws Throwable {
        OptionBuilder.hasArgs();
        OptionBuilder.withLongOpt("Cannot odd val\"e, l$st full.");
        Option option0 = OptionBuilder.create();
        assertEquals((-2), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2344() throws Throwable {
        OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArg();
        assertNotNull(optionBuilder0);
    }

    @Test(timeout = 4000)
    public void test2445() throws Throwable {
        OptionBuilder.withValueSeparator();
        Option option0 = OptionBuilder.create('2');
        assertEquals('=', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test2446() throws Throwable {
        OptionBuilder.withValueSeparator();
        Option option0 = OptionBuilder.create('2');
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2447() throws Throwable {
        OptionBuilder.withValueSeparator();
        Option option0 = OptionBuilder.create('2');
        assertEquals("2", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test2548() throws Throwable {
        OptionBuilder.hasArg();
        Option option0 = OptionBuilder.create("arg");
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2649() throws Throwable {
        OptionBuilder.isRequired();
        OptionBuilder.withLongOpt("Cannot odd val\"e, l$st full.");
        Option option0 = OptionBuilder.create();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2650() throws Throwable {
        OptionBuilder.isRequired();
        OptionBuilder.withLongOpt("Cannot odd val\"e, l$st full.");
        Option option0 = OptionBuilder.create();
        assertTrue(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test2751() throws Throwable {
        OptionBuilder optionBuilder0 = OptionBuilder.withType("7[");
        assertNotNull(optionBuilder0);
    }
}
