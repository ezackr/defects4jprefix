/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 15 00:12:49 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.junit.runner.RunWith;

public class OptionsTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Options options0 = new Options();
        // Undeclared exception!
        try {
            options0.addOption("j;", true, "=\"wF?Y");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The option 'j;' contains an illegal character : ';'
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Options options0 = new Options();
        Options options1 = options0.addOption("", "");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Options options0 = new Options();
        Collection<Option> collection0 = options0.getOptions();
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Options options0 = new Options();
        List list0 = options0.getRequiredOptions();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Options options0 = new Options();
        String string0 = options0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Options options0 = new Options();
        // Undeclared exception!
        try {
            options0.getOptionGroup((Option) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Options options0 = new Options();
        Collection<OptionGroup> collection0 = options0.getOptionGroups();
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("Vw", "org.apache.commons.cli.Options", false, "OJ,R!zRP");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("Vw", "org.apache.commons.cli.Options", false, "OJ,R!zRP");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        boolean boolean0 = options0.hasOption("Vw");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("u", "?B&B~");
        option0.setRequired(true);
        options0.addOption(option0);
        Options options1 = options0.addOption(option0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Options options0 = new Options();
        Option option0 = options0.getOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        assertNull(option0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("", "");
        Options options1 = options0.addOption(option0);
        Option option1 = options1.getOption("");
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Options options0 = new Options();
        Options options1 = options0.addOption("", "i9Jw42+:oi(", false, "");
        List<String> list0 = options1.getMatchingOptions("");
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        Options options0 = new Options();
        Options options1 = options0.addOption("", "i9Jw42+:oi(", false, "");
        List<String> list0 = options1.getMatchingOptions("");
        assertFalse(list0.contains(""));
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Options options0 = new Options();
        options0.addOption("", "9BlR(W$", false, "[]");
        List<String> list0 = options0.getMatchingOptions("' was specified but an option from this group ");
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("org.apache.commons.cli.Options");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("Vw", "org.apache.commons.cli.Options", false, "OJ,R!zRP");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("Vw", "org.apache.commons.cli.Options", false, "OJ,R!zRP");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup1);
        boolean boolean0 = options0.hasOption("org.apache.commons.cli.Options");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("7");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Options options0 = new Options();
        options0.addOption("dI", "", true, (String) null);
        boolean boolean0 = options0.hasLongOption("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasShortOption("OV{8Rx'de");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("", (String) null);
        Options options1 = options0.addOption(option0);
        boolean boolean0 = options1.hasShortOption("");
        assertTrue(boolean0);
    }
}
