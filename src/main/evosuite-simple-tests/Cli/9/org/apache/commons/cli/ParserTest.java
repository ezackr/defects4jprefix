/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 19:48:59 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.junit.runner.RunWith;

public class ParserTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        gnuParser0.processProperties(properties0);
        assertTrue(properties0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        List list0 = gnuParser0.getRequiredOptions();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "";
        gnuParser0.parse(options0, stringArray0, true);
        List list0 = gnuParser0.getRequiredOptions();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        StringReader stringReader0 = new StringReader("~D~");
        properties0.load((Reader) stringReader0);
        // Undeclared exception!
        try {
            gnuParser0.processProperties(properties0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Properties properties0 = new Properties();
        properties0.put(posixParser0, posixParser0);
        // Undeclared exception!
        try {
            posixParser0.processProperties(properties0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.cli.PosixParser cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Option option0 = new Option("", "", true, "{q6");
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn((Object) null).when(listIterator0).next();
        // Undeclared exception!
        try {
            posixParser0.processArgs(option0, listIterator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Option option0 = new Option("", "", true, "{q6");
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn(option0).when(listIterator0).next();
        // Undeclared exception!
        try {
            posixParser0.processArgs(option0, listIterator0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.cli.Option cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "-#k";
        try {
            basicParser0.parse(options0, stringArray0, false);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: -#k
        }
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "~%hs0YI{&S&w\"";
        stringArray0[1] = "YGb0TD";
        stringArray0[2] = "YGb0TD";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0);
        properties0.put(options0, commandLine0);
        // Undeclared exception!
        try {
            gnuParser0.parse(options0, stringArray0, properties0, true);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.cli.Options cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Missing argument for option:";
        stringArray0[1] = "";
        stringArray0[2] = "0lTood$MO[):";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "'";
        stringArray0[6] = "--#k";
        stringArray0[7] = "-";
        stringArray0[8] = "";
        Properties properties0 = new Properties();
        try {
            gnuParser0.parse(options0, stringArray0, properties0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: --#k
        }
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Missing argument for option:";
        stringArray0[1] = "";
        stringArray0[2] = "0lTood$MO[):";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "'";
        stringArray0[6] = "org.apache.commons.cli.BasicParser";
        stringArray0[7] = "-";
        stringArray0[8] = "";
        Properties properties0 = new Properties();
        PipedInputStream pipedInputStream0 = new PipedInputStream(416);
        properties0.put(options0, pipedInputStream0);
        // Undeclared exception!
        try {
            gnuParser0.parse(options0, stringArray0, properties0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.cli.Options cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        // Undeclared exception!
        try {
            gnuParser0.checkRequiredOptions();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "~%hs0YI{&S&w\"";
        stringArray0[1] = "YGb0TD";
        stringArray0[2] = "YGb0TD";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "7djkp!>{uGdQ/a_>9&";
        stringArray0[1] = "Unrecognized option: ";
        stringArray0[2] = "org.apache.commons.cli.Options";
        stringArray0[3] = "--#k";
        stringArray0[4] = "uEKhf0b*zg.3w";
        stringArray0[5] = "6";
        stringArray0[6] = "--";
        stringArray0[7] = "q?ib`&w_5rTV3/eDP";
        stringArray0[8] = "\"8,<B^R`w:lPIV:}Ja";
        Properties properties0 = new Properties();
        try {
            posixParser0.parse(options0, stringArray0, properties0, false);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: --#k
        }
    }

    @Test(timeout = 4000)
    public void test1514() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Missing argument for option:";
        stringArray0[1] = "";
        stringArray0[2] = "0lTood$MO[):";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "'";
        stringArray0[6] = "org.apache.commons.cli.BasicParser";
        stringArray0[7] = "-";
        stringArray0[8] = "";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, false);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test1615() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "-";
        stringArray0[1] = "-";
        stringArray0[2] = "Missing argument for option:";
        stringArray0[3] = "'";
        stringArray0[4] = "";
        stringArray0[5] = "org.apache.commons.cli.BasicParser";
        stringArray0[6] = "";
        stringArray0[7] = "";
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test1716() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, (String) null);
        optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup0);
        String[] stringArray0 = new String[2];
        Properties properties0 = new Properties();
        // Undeclared exception!
        try {
            basicParser0.parse(options1, stringArray0, properties0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1817() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        Options options1 = options0.addOption("", "", true, "%s:dSe.[_)1;/X");
        basicParser0.setOptions(options1);
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        try {
            basicParser0.processOption("", listIterator0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing argument for option:
        }
    }

    @Test(timeout = 4000)
    public void test1918() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        gnuParser0.setOptions(options0);
        options0.addOption("NO_ARGS_ALLOWED", false, "[ARG...]");
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            gnuParser0.processOption("NO_ARGS_ALLOWED", listIterator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2019() throws Throwable {
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "--";
        stringArray0[1] = "";
        PosixParser posixParser0 = new PosixParser();
        Properties properties0 = new Properties();
        posixParser0.parse(options0, stringArray0, properties0, true);
        Option option0 = new Option("", "", true, "--");
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn((Object) null).when(listIterator0).next();
        doReturn("6n+:").when(listIterator0).previous();
        try {
            posixParser0.processArgs(option0, listIterator0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing argument for option:
        }
    }

    @Test(timeout = 4000)
    public void test2120() throws Throwable {
        Options options0 = new Options();
        PosixParser posixParser0 = new PosixParser();
        Option option0 = new Option("", "{q6", true, "{q6");
        posixParser0.setOptions(options0);
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false).when(listIterator0).hasNext();
        doReturn("y+?Js#").when(listIterator0).next();
        posixParser0.processArgs(option0, listIterator0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test2221() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        options0.addOptionGroup(optionGroup0);
        stringArray0[0] = "-#k";
        Properties properties0 = new Properties();
        try {
            basicParser0.parse(options0, stringArray0, properties0, true);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing required option: []
        }
    }

    @Test(timeout = 4000)
    public void test2322() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Missing argument for option:";
        stringArray0[1] = "";
        stringArray0[2] = "0lTood$MO[):";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "'";
        stringArray0[6] = "org.apache.commons.cli.BasicParser";
        stringArray0[7] = "-";
        stringArray0[8] = "";
        Properties properties0 = new Properties();
        Object object0 = new Object();
        properties0.put("0lTood$MO[):", object0);
        // Undeclared exception!
        try {
            gnuParser0.parse(options0, stringArray0, properties0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2423() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "{q6";
        basicParser0.parse(options0, stringArray0, true);
        Options options1 = basicParser0.getOptions();
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test2524() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "-#k";
        try {
            basicParser0.parse(options0, stringArray0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: -#k
        }
    }

    @Test(timeout = 4000)
    public void test2725() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, (String[]) null, properties0, true);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test2826() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[2];
        stringArray0[0] = ".y_v8zH 77&&CCIYIa";
        stringArray0[1] = "1";
        CommandLine commandLine0 = basicParser0.parse(options0, stringArray0);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test2927() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[2];
        // Undeclared exception!
        try {
            basicParser0.parse(options0, stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3028() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        // Undeclared exception!
        try {
            gnuParser0.setOptions((Options) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3129() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = gnuParser0.getOptions();
        assertNull(options0);
    }

    @Test(timeout = 4000)
    public void test3230() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        // Undeclared exception!
        try {
            basicParser0.parse(options0, stringArray0, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }
}
