/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 19:50:16 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.InputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.junit.runner.RunWith;

public class ParserTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Properties properties0 = new Properties();
        posixParser0.processProperties(properties0);
        assertTrue(properties0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        List list0 = basicParser0.getRequiredOptions();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        gnuParser0.parse(options0, (String[]) null, properties0);
        List list0 = gnuParser0.getRequiredOptions();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        Options options1 = options0.addOptionGroup(optionGroup0);
        gnuParser0.setOptions(options1);
        List list0 = gnuParser0.getRequiredOptions();
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "{q6";
        basicParser0.parse(options0, stringArray0, true);
        Options options1 = basicParser0.getOptions();
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Properties properties0 = new Properties();
        StringReader stringReader0 = new StringReader("~D~");
        properties0.load((Reader) stringReader0);
        // Undeclared exception!
        try {
            gnuParser0.processProperties(properties0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Properties properties0 = new Properties();
        properties0.put(posixParser0, posixParser0);
        // Undeclared exception!
        try {
            posixParser0.processProperties(properties0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.cli.PosixParser cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        basicParser0.setOptions(options0);
        ListIterator<Option> listIterator0 = (ListIterator<Option>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        try {
            basicParser0.processOption("", listIterator0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option:
        }
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "~%hs0YI{&S&w\"";
        stringArray0[1] = "YGb0TD";
        stringArray0[2] = "YGb0TD";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0);
        properties0.put(options0, commandLine0);
        // Undeclared exception!
        try {
            gnuParser0.parse(options0, stringArray0, properties0, true);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.cli.Options cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Unrecognized option: ";
        stringArray0[1] = "";
        stringArray0[2] = "0lTood$MO[):";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "'";
        stringArray0[6] = "org.apache.commons.cli.BasicParser";
        stringArray0[7] = "-_g>FO).$J";
        stringArray0[8] = "";
        Properties properties0 = new Properties();
        try {
            gnuParser0.parse(options0, stringArray0, properties0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: -_g>FO).$J
        }
    }

    @Test(timeout = 4000)
    public void test1210() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "u3|2|";
        Properties properties0 = new Properties();
        properties0.put(posixParser0, "u3|2|");
        // Undeclared exception!
        try {
            posixParser0.parse(options0, stringArray0, properties0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.cli.PosixParser cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test1311() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        Options options1 = options0.addOptionGroup(optionGroup0);
        gnuParser0.setOptions(options1);
        try {
            gnuParser0.checkRequiredOptions();
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing required option: []
        }
    }

    @Test(timeout = 4000)
    public void test1412() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        // Undeclared exception!
        try {
            basicParser0.checkRequiredOptions();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1513() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Option option0 = new Option("s", "8yUVY:bN]QE@orO", true, "s");
        option0.addValueForProcessing("8yUVY:bN]QE@orO");
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        posixParser0.processArgs(option0, listIterator0);
        assertEquals((-2), Option.UNLIMITED_VALUES);
    }

    @Test(timeout = 4000)
    public void test1614() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        stringArray0[1] = "org.apache.commons.cli.Options";
        stringArray0[2] = "PH1xAr8tMBcT8h=(q";
        stringArray0[3] = "-0lTood$MO[):";
        Properties properties0 = new Properties();
        try {
            basicParser0.parse(options0, stringArray0, properties0, false);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: -0lTood$MO[):
        }
    }

    @Test(timeout = 4000)
    public void test1715() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Unrecognized option: ";
        stringArray0[1] = "";
        stringArray0[2] = "0lTood$MO[):";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "";
        stringArray0[6] = "org.apache.commons.cli.BasicParser";
        stringArray0[7] = "-";
        stringArray0[8] = "";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, false);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test1816() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        Properties properties0 = new Properties();
        CommandLine commandLine0 = basicParser0.parse(options0, (String[]) null, properties0, false);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test1917() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option((String) null, (String) null);
        optionGroup0.addOption(option0);
        options0.addOptionGroup(optionGroup0);
        String[] stringArray0 = new String[2];
        Properties properties0 = new Properties();
        // Undeclared exception!
        try {
            basicParser0.parse(options0, stringArray0, properties0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test2018() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Option option0 = new Option("l", true, "yes");
        OptionGroup optionGroup0 = new OptionGroup();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        optionGroup0.setRequired(true);
        Options options1 = options0.addOptionGroup(optionGroup1);
        gnuParser0.setOptions(options1);
        ListIterator<Option> listIterator0 = (ListIterator<Option>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn(option0).when(listIterator0).next();
        // Undeclared exception!
        try {
            gnuParser0.processOption("l", listIterator0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.cli.Option cannot be cast to java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test2119() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Option option0 = new Option("", false, "yes");
        OptionGroup optionGroup0 = new OptionGroup();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        gnuParser0.setOptions(options1);
        ListIterator<Option> listIterator0 = (ListIterator<Option>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            gnuParser0.processOption("", listIterator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2220() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Option option0 = new Option("g7P3w", "g7P3w", false, "(mp");
        option0.setOptionalArg(true);
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        basicParser0.processArgs(option0, listIterator0);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test2321() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        gnuParser0.setOptions(options0);
        PosixParser posixParser0 = new PosixParser();
        Option option0 = new Option("D8k", "NO_ARGS_ALLOWED");
        options0.addOption(option0);
        options0.addOption("NO_ARGS_ALLOWED", true, "[ARG...]");
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, true).when(listIterator0).hasNext();
        doReturn("D8k", "tru'").when(listIterator0).next();
        doReturn(posixParser0).when(listIterator0).previous();
        // Undeclared exception!
        try {
            gnuParser0.processOption("NO_ARGS_ALLOWED", listIterator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2422() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Unrecognized option: ";
        stringArray0[1] = "";
        stringArray0[2] = "0lTood$MO[):";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "'";
        stringArray0[6] = "org.apache.commons.cli.BasicParser";
        stringArray0[7] = "-";
        stringArray0[8] = "";
        Properties properties0 = new Properties();
        gnuParser0.parse(options0, stringArray0, properties0);
        Option option0 = new Option("5", "0q~hI");
        ListIterator<InputStream> listIterator0 = (ListIterator<InputStream>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn((Object) null).when(listIterator0).next();
        doReturn((Object) null).when(listIterator0).previous();
        try {
            gnuParser0.processArgs(option0, listIterator0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing argument for option:5
        }
    }

    @Test(timeout = 4000)
    public void test2523() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Option option0 = new Option("5", "0q~hI");
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ListIterator<InputStream> listIterator0 = (ListIterator<InputStream>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn((Object) null).when(listIterator0).next();
        // Undeclared exception!
        try {
            gnuParser0.processArgs(option0, listIterator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2624() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        Option option0 = options0.getOption("--");
        ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        // Undeclared exception!
        try {
            posixParser0.processArgs(option0, listIterator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2725() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        options0.addOptionGroup(optionGroup0);
        String[] stringArray0 = new String[1];
        options0.addOptionGroup(optionGroup0);
        stringArray0[0] = "yes";
        try {
            gnuParser0.parse(options0, stringArray0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing required options: [], []
        }
    }

    @Test(timeout = 4000)
    public void test2826() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[9];
        stringArray0[0] = "Unrecognized option: ";
        stringArray0[1] = "";
        stringArray0[2] = "0lTood$MO[):";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "'";
        stringArray0[6] = "org.apache.commons.cli.BasicParser";
        stringArray0[7] = "-";
        stringArray0[8] = "";
        Properties properties0 = new Properties();
        Option option0 = new Option("", "Unrecognized option: ", true, "Unrecognized option: ");
        properties0.put("0lTood$MO[):", option0);
        // Undeclared exception!
        try {
            gnuParser0.parse(options0, stringArray0, properties0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2927() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Properties properties0 = new Properties();
        Options options0 = new Options();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "-PH1xAr8tMBcT8h=(q";
        CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, true);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test3028() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "-'";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test3129() throws Throwable {
        PosixParser posixParser0 = new PosixParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "-PH1xAr8tMBcT8h=(q";
        stringArray0[1] = "k";
        stringArray0[2] = "1/d,~m:y@4";
        stringArray0[3] = "tuQn^";
        stringArray0[4] = "tuQn^";
        stringArray0[5] = "Unrecognized option: ";
        stringArray0[6] = "imtn";
        stringArray0[7] = "org.apache.commons.cli.OptionValidator";
        try {
            posixParser0.parse(options0, stringArray0, false);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unrecognized option: -PH1xAr8tMBcT8h=(q
        }
    }

    @Test(timeout = 4000)
    public void test3230() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "-";
        Properties properties0 = new Properties();
        CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
        assertNotNull(commandLine0);
    }

    @Test(timeout = 4000)
    public void test3331() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = new Options();
        Option option0 = new Option("", false, "yes");
        Options options1 = options0.addOption(option0);
        String[] stringArray0 = new String[1];
        // Undeclared exception!
        try {
            gnuParser0.parse(options1, stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3432() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        // Undeclared exception!
        try {
            gnuParser0.setOptions((Options) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3533() throws Throwable {
        GnuParser gnuParser0 = new GnuParser();
        Options options0 = gnuParser0.getOptions();
        assertNull(options0);
    }

    @Test(timeout = 4000)
    public void test3634() throws Throwable {
        BasicParser basicParser0 = new BasicParser();
        Options options0 = new Options();
        String[] stringArray0 = new String[7];
        // Undeclared exception!
        try {
            basicParser0.parse(options0, stringArray0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }
}
