/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:04:17 GMT 2023
 */
package org.apache.commons.cli2;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.EnumValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.Validator;
import org.junit.runner.RunWith;

public class OptionTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Switch.no.disabledPrefix", "c\"nYD|Y[*vu", 0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        groupImpl0.validate(writeableCommandLineImpl0);
        assertEquals(0, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", (String) null, (-3454), (-3454));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        DateValidator dateValidator0 = DateValidator.getTimeInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "zw.m/F", (-3454), (-1585), 'M', 'M', dateValidator0, (String) null, linkedList0, (-3454));
        ListIterator<Object> listIterator0 = linkedList0.listIterator();
        argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals('\u0000', ArgumentImpl.DEFAULT_INITIAL_SEPARATOR);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-1), 969);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        ListIterator<Object> listIterator0 = linkedList0.listIterator();
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (ListIterator) listIterator0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        StringBuffer stringBuffer0 = new StringBuffer(2);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        propertyOption0.appendUsage(stringBuffer0, linkedHashSet0, comparator0);
        assertEquals("Passes properties and values to the application", propertyOption0.getDescription());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "WKrie-U~!:hrc`gL", "WKrie-U~!:hrc`gL", 0, 3085);
        boolean boolean0 = groupImpl0.isRequired();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Locale locale0 = Locale.CANADA;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        EnumValidator enumValidator0 = new EnumValidator(set0);
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'r', 'r', enumValidator0, "", linkedList0, (-2188));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = sourceDestArgument0.helpLines(0, set0, comparator0);
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("H\"S`x.p*", "org.apache.commons.cli2.validation.ClassValidator", (-10), (-10), 'g', 'p', numberValidator0, "*?fJ>F", linkedList0, (-327));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'p', 'g', "", linkedList0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "H\"S`x.p*", (-327), (-488));
        Command command0 = new Command("org.apache.commons.cli2.validation.ClassValidator", "30|3j7~&8=NB7", linkedHashSet0, false, sourceDestArgument0, groupImpl0, 1);
        Set set0 = command0.getTriggers();
        assertEquals(1, set0.size());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption("*sVi&Kx`)w&4Qfj%S", "*sVi&Kx`)w&4Qfj%S", (-738));
        Set set0 = propertyOption0.getPrefixes();
        assertFalse(set0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        String string0 = propertyOption0.getPreferredName();
        assertEquals("-D", string0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption("", "s<Sc4sP/Z[`'f/?a/", 281);
        int int0 = propertyOption0.getId();
        assertEquals(281, int0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        String string0 = propertyOption0.getDescription();
        assertEquals("Passes properties and values to the application", string0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Locale locale0 = Locale.CANADA;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        EnumValidator enumValidator0 = new EnumValidator(set0);
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'r', 'r', enumValidator0, "", linkedList0, (-2188));
        Option option0 = argumentImpl0.findOption("+l");
        assertNull(option0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption("8OF@u/#e", "org.apache.commons.cli2.validation.ClassValidator", 2049);
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        propertyOption0.defaults(writeableCommandLineImpl0);
        assertFalse(propertyOption0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = propertyOption0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Option.missing.required");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "CjY3mZ!-QI }(r", "CjY3mZ!-QI }(r", 1, 1);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        try {
            groupImpl0.validate(writeableCommandLineImpl0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing option CjY3mZ!-QI }(r
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ListIterator<Object> listIterator0 = linkedList0.listIterator();
        // Undeclared exception!
        try {
            propertyOption0.process((WriteableCommandLine) null, listIterator0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("%nq", "p{qhE85/|ja*FBr5q", 0, 0, 'V', 'V', (Validator) null, "gvC5v44SF]z]", linkedList0, 0);
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
        // Undeclared exception!
        try {
            argumentImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (ListIterator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "6QHcdUMz", (-2206), 0, 'q', 'q', numberValidator0, "OV{8Rx'de", linkedList0, (-2206));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "6QHcdUMz");
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            argumentImpl0.appendUsage(stringBuffer0, (Set) null, comparator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
