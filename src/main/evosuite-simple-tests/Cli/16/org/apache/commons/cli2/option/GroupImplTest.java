/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 21:39:37 GMT 2023
 */
package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.junit.runner.RunWith;

public class GroupImplTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "6fH~_%MC", "6fH~_%MC", 3, 3);
        int int0 = groupImpl0.getMaximum();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "6fH~_%MC", "6fH~_%MC", 3, 3);
        int int0 = groupImpl0.getMaximum();
        assertEquals(3, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "3S-TqUp'", "3S-TqUp'", (-386), (-386));
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addOption(groupImpl0);
        try {
            groupImpl0.validate(writeableCommandLineImpl0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unexpected 3S-TqUp' while processing 3S-TqUp'
        }
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        UrlValidator urlValidator0 = new UrlValidator("");
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 217, 217, '~', '~', urlValidator0, (String) null, linkedList0, (-1515));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        linkedList0.add((Object) sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Efj7Wu|", "--", 217, (-39));
        groupImpl0.toString();
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        UrlValidator urlValidator0 = new UrlValidator("");
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 217, 217, '~', '~', urlValidator0, (String) null, linkedList0, (-1515));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        linkedList0.add((Object) sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Efj7Wu|", "--", 217, (-39));
        groupImpl0.toString();
        assertEquals(217, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.SourceDestArgument", "org.apache.commons.cli2.option.SourceDestArgument", 0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.SourceDestArgument", "org.apache.commons.cli2.option.SourceDestArgument", 0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        assertEquals(0, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.SourceDestArgument", "org.apache.commons.cli2.option.SourceDestArgument", 0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        assertEquals(0, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", (-784), (-784));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertEquals(1, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", (-784), (-784));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
        assertEquals(1, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "", 2676);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Ry`}", "gj/~LY[M]ntf13Q>B4", 2676, 2676);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertEquals(1, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "", 2676);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Ry`}", "gj/~LY[M]ntf13Q>B4", 2676, 2676);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", (String) null, (-283), (-283));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", (String) null, (-283), (-283));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertEquals((-283), groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", (String) null, (-283), (-283));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertEquals((-283), groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("x:zZJ-", "x:zZJ-", 61, 61, '7', '7', fileValidator0, "x:zZJ-", linkedList0, 61);
        LinkedList<DefaultOption> linkedList1 = new LinkedList<DefaultOption>();
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'j', 'j', "--", linkedList1);
        linkedList0.add(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "x:zZJ-", "x:zZJ-", 1471, 1471);
        LinkedList<GroupImpl> linkedList2 = new LinkedList<GroupImpl>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList2);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "--");
        assertFalse(linkedList0.contains(sourceDestArgument0));
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("x:zZJ-", "x:zZJ-", 61, 61, '7', '7', fileValidator0, "x:zZJ-", linkedList0, 61);
        LinkedList<DefaultOption> linkedList1 = new LinkedList<DefaultOption>();
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'j', 'j', "--", linkedList1);
        linkedList0.add(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "x:zZJ-", "x:zZJ-", 1471, 1471);
        LinkedList<GroupImpl> linkedList2 = new LinkedList<GroupImpl>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList2);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "--");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0919() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "", 1929);
        linkedList0.add(propertyOption0);
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        LinkedList<String> linkedList1 = new LinkedList<String>(set0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "guB!OH/wUf", (String) null, 6, (-2823));
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertFalse(listIterator0.hasNext());
    }

    @Test(timeout = 4000)
    public void test0920() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "", 1929);
        linkedList0.add(propertyOption0);
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        LinkedList<String> linkedList1 = new LinkedList<String>(set0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "guB!OH/wUf", (String) null, 6, (-2823));
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals(6, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test1021() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", 2676, 2676);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Passes properties and values to the application").when(listIterator0).next();
        doReturn("-D").when(listIterator0).previous();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals(2676, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", 2676, 2676);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Passes properties and values to the application").when(listIterator0).next();
        doReturn("-D").when(listIterator0).previous();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals("", groupImpl0.getPreferredName());
    }

    @Test(timeout = 4000)
    public void test1023() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", 2676, 2676);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Passes properties and values to the application").when(listIterator0).next();
        doReturn("-D").when(listIterator0).previous();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals(2676, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1024() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", 2676, 2676);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Passes properties and values to the application").when(listIterator0).next();
        doReturn("-D").when(listIterator0).previous();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals("-D", groupImpl0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        PropertyOption propertyOption1 = new PropertyOption("", "", 2676);
        linkedList0.add(propertyOption1);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", 2676, 2676);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, true, true).when(listIterator0).hasNext();
        doReturn("Passes properties and values to the application", "-D", "", "Passes properties and values to the application", "-D").when(listIterator0).next();
        doReturn("-D", "Passes properties and values to the application", "Passes properties and values to the application").when(listIterator0).previous();
        try {
            groupImpl0.process(writeableCommandLineImpl0, listIterator0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unexpected -D while processing
        }
    }

    @Test(timeout = 4000)
    public void test1226() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", (-2343), (-2343));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("-D");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals("Passes properties and values to the application", groupImpl0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1227() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", (-2343), (-2343));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("-D");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals("-D", groupImpl0.getPreferredName());
    }

    @Test(timeout = 4000)
    public void test1228() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", (-2343), (-2343));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("-D");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals((-2343), groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", (-2343), (-2343));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("-D");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals((-2343), groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test1230() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", (-2343), (-2343));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("-D");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertTrue(listIterator0.hasNext());
    }

    @Test(timeout = 4000)
    public void test1331() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.offerLast(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "eAP^/,L}F1laI:", "eAP^/,L}F1laI:", 0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        assertEquals(0, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test1332() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.offerLast(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "eAP^/,L}F1laI:", "eAP^/,L}F1laI:", 0, 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        assertEquals(0, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1533() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "DISPLAY_SWITCH_ENABLED", 60, (-441));
        try {
            groupImpl0.validate((WriteableCommandLine) null);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing option
        }
    }

    @Test(timeout = 4000)
    public void test1634() throws Throwable {
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("so", "so", (-1), (-1), 'f', 'f', numberValidator0, "cdl/0m\"T4T}e|y)x0", linkedList0, (-1));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        linkedList0.add(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "so", "|", (-1), (-1));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        // Undeclared exception!
        try {
            groupImpl0.validate(writeableCommandLineImpl0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1735() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        assertEquals(0, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1736() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        assertEquals(0, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test1837() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.offerLast(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Ix", "Ix", 0, 0);
        String string0 = groupImpl0.toString();
        assertEquals(0, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1838() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.offerLast(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Ix", "Ix", 0, 0);
        String string0 = groupImpl0.toString();
        assertEquals("[Ix (-D<property>=<value>|-D<property>=<value>)]", string0);
    }

    @Test(timeout = 4000)
    public void test1939() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "guB!OH/wUf", (String) null, 6, (-2823));
        List list0 = groupImpl0.helpLines(1929, set0, (Comparator) null);
        assertEquals((-2823), groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1940() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "guB!OH/wUf", (String) null, 6, (-2823));
        List list0 = groupImpl0.helpLines(1929, set0, (Comparator) null);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1941() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "guB!OH/wUf", (String) null, 6, (-2823));
        List list0 = groupImpl0.helpLines(1929, set0, (Comparator) null);
        assertEquals(6, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2042() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "_n*C7lf", "_n*C7lf", (-8), (-8));
        List list0 = groupImpl0.helpLines((-8), displaySetting0.ALL, (Comparator) null);
        assertEquals((-8), groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2043() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "_n*C7lf", "_n*C7lf", (-8), (-8));
        List list0 = groupImpl0.helpLines((-8), displaySetting0.ALL, (Comparator) null);
        assertEquals((-8), groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2044() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "_n*C7lf", "_n*C7lf", (-8), (-8));
        List list0 = groupImpl0.helpLines((-8), displaySetting0.ALL, (Comparator) null);
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2145() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 1325, 1325);
        List list0 = groupImpl0.helpLines(1325, displaySetting0.ALL, comparator0);
        assertEquals(1325, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2146() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 1325, 1325);
        List list0 = groupImpl0.helpLines(1325, displaySetting0.ALL, comparator0);
        assertEquals(1325, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2147() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 1325, 1325);
        List list0 = groupImpl0.helpLines(1325, displaySetting0.ALL, comparator0);
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2248() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "\"p", "\"p", (-1929), (-1929));
        Integer integer0 = new Integer((-1929));
        linkedList0.add(integer0);
        Comparator<GroupImpl> comparator0 = (Comparator<GroupImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            groupImpl0.helpLines((-1929), displaySetting0.ALL, comparator0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // java.lang.Integer cannot be cast to org.apache.commons.cli2.Option
        }
    }

    @Test(timeout = 4000)
    public void test2349() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
        groupImpl0.findOption("");
        assertEquals(0, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2350() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
        groupImpl0.findOption("");
        assertEquals(0, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2451() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "}alyNR~pSi", "}alyNR~pSi", 0, 0);
        Option option0 = groupImpl0.findOption("-D");
        assertEquals(0, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2452() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "}alyNR~pSi", "}alyNR~pSi", 0, 0);
        Option option0 = groupImpl0.findOption("-D");
        assertEquals(0, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2453() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "}alyNR~pSi", "}alyNR~pSi", 0, 0);
        Option option0 = groupImpl0.findOption("-D");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test2554() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "", 1929);
        linkedList0.add(propertyOption0);
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        LinkedList<String> linkedList1 = new LinkedList<String>(set0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "guB!OH/wUf", (String) null, 6, (-2823));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        groupImpl0.defaults(writeableCommandLineImpl0);
        assertEquals(6, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2555() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "", 1929);
        linkedList0.add(propertyOption0);
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        LinkedList<String> linkedList1 = new LinkedList<String>(set0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "guB!OH/wUf", (String) null, 6, (-2823));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        groupImpl0.defaults(writeableCommandLineImpl0);
        assertEquals((-2823), groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2656() throws Throwable {
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("x:zZJ-", "x:zZJ-", 61, 61, '7', 'G', fileValidator0, "joE%RX$7", linkedList0, 61);
        LinkedList<DefaultOption> linkedList1 = new LinkedList<DefaultOption>();
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'j', 'j', "--", linkedList1);
        linkedList0.add(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "\"1ez(U #n_t", "\"1ez(U #n_t", '\u0000', '\u0000');
        LinkedList<GroupImpl> linkedList2 = new LinkedList<GroupImpl>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList2);
        groupImpl0.defaults(writeableCommandLineImpl0);
        assertFalse(linkedList0.contains(sourceDestArgument0));
    }

    @Test(timeout = 4000)
    public void test2657() throws Throwable {
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("x:zZJ-", "x:zZJ-", 61, 61, '7', 'G', fileValidator0, "joE%RX$7", linkedList0, 61);
        LinkedList<DefaultOption> linkedList1 = new LinkedList<DefaultOption>();
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'j', 'j', "--", linkedList1);
        linkedList0.add(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "\"1ez(U #n_t", "\"1ez(U #n_t", '\u0000', '\u0000');
        LinkedList<GroupImpl> linkedList2 = new LinkedList<GroupImpl>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList2);
        groupImpl0.defaults(writeableCommandLineImpl0);
        assertEquals(0, groupImpl0.getMaximum());
    }
}
