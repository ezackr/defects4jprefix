/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 19:42:12 GMT 2023
 */
package org.apache.commons.cli2.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.builder.ArgumentBuilder;
import org.apache.commons.cli2.builder.DefaultOptionBuilder;
import org.apache.commons.cli2.builder.GroupBuilder;
import org.apache.commons.cli2.builder.PatternBuilder;
import org.junit.runner.RunWith;

public class PatternBuilderTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        // Undeclared exception!
        try {
            patternBuilder0.withPattern((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DefaultOptionBuilder defaultOptionBuilder0 = new DefaultOptionBuilder();
        ArgumentBuilder argumentBuilder0 = new ArgumentBuilder();
        PatternBuilder patternBuilder0 = new PatternBuilder((GroupBuilder) null, defaultOptionBuilder0, argumentBuilder0);
        // Undeclared exception!
        try {
            patternBuilder0.create();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        // Undeclared exception!
        try {
            patternBuilder0.withPattern("/'#M`F,I8DsAw:njUj#");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot use null as a validator.
        }
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        patternBuilder0.withPattern("Z\"xiJ&`M[0Y_* ");
        Option option0 = patternBuilder0.create();
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        patternBuilder0.withPattern("J");
        Option option0 = patternBuilder0.create();
        assertEquals("-J", option0.getPreferredName());
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        patternBuilder0.withPattern("J");
        Option option0 = patternBuilder0.create();
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        PatternBuilder patternBuilder1 = patternBuilder0.reset();
        assertSame(patternBuilder1, patternBuilder0);
    }
}
