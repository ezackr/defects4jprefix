/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 14 22:49:56 GMT 2023
 */
package org.apache.commons.cli2.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.builder.PatternBuilder;
import org.apache.commons.cli2.option.GroupImpl;
import org.junit.runner.RunWith;

public class PatternBuilderTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        patternBuilder0.withPattern("_");
        Option option0 = patternBuilder0.create();
        assertEquals("-_", option0.getPreferredName());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        patternBuilder0.withPattern("_");
        Option option0 = patternBuilder0.create();
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        patternBuilder0.withPattern("u+B54O&?sj$}");
        GroupImpl groupImpl0 = (GroupImpl) patternBuilder0.create();
        assertEquals(0, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        PatternBuilder patternBuilder0 = new PatternBuilder();
        // Undeclared exception!
        try {
            patternBuilder0.withPattern("WX!E*''e:7l8 /%S'");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Cannot use null as a validator.
        }
    }
}
