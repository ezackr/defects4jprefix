/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:58:07 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.cli.Option;
import org.junit.runner.RunWith;

public class OptionTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        option0.setArgs((-2040));
        boolean boolean0 = option0.requiresArg();
        assertEquals((-2040), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        option0.setArgs((-2040));
        boolean boolean0 = option0.requiresArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Option option0 = new Option("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Option option0 = new Option("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        option0.setArgs(0);
        option0.setOptionalArg(true);
        option0.addValueForProcessing("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        assertEquals(0, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Option option0 = new Option("t", "t", true, "%8+~$W-j&`;+'ks");
        option0.hashCode();
        assertEquals("t", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Option option0 = new Option("t", "t", true, "%8+~$W-j&`;+'ks");
        option0.hashCode();
        assertEquals("%8+~$W-j&`;+'ks", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Option option0 = new Option("t", "t", true, "%8+~$W-j&`;+'ks");
        option0.hashCode();
        assertEquals("t", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        option0.setValueSeparator('N');
        // Undeclared exception!
        try {
            option0.addValueForProcessing("}m3N}!6t[O*@)F");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot add value, list full.
        }
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Option option0 = new Option("", "G[rcn");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Option option0 = new Option("", "G[rcn");
        option0.setArgs(0);
        boolean boolean0 = option0.acceptsArg();
        assertEquals(0, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        Option option0 = new Option("", "G[rcn");
        option0.setArgs(0);
        boolean boolean0 = option0.acceptsArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        Option option0 = new Option("", true, "");
        option0.setRequired(true);
        boolean boolean0 = option0.isRequired();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.setOptionalArg(true);
        boolean boolean0 = option0.hasOptionalArg();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        Option option0 = new Option("", "");
        option0.setValueSeparator('7');
        char char0 = option0.getValueSeparator();
        assertEquals('7', char0);
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        Option option0 = new Option((String) null, true, "ZQx$Ym<>zOO'.");
        option0.setValueSeparator('Z');
        char char0 = option0.getValueSeparator();
        assertEquals('Z', char0);
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        Option option0 = new Option("", "", true, "%8+~$W-j&`;+'ks");
        option0.getValue((String) null);
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        Option option0 = new Option("", "", true, "%8+~$W-j&`;+'ks");
        option0.getValue((String) null);
        assertEquals("%8+~$W-j&`;+'ks", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test0917() throws Throwable {
        Option option0 = new Option("", "", true, "%8+~$W-j&`;+'ks");
        option0.getValue((String) null);
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getValue("");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getValue("");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1020() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getValue("");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("Fcf:K");
        String string0 = option0.getValue(0);
        assertEquals("kRz", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test1122() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("Fcf:K");
        String string0 = option0.getValue(0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("Fcf:K");
        String string0 = option0.getValue(0);
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("Fcf:K");
        String string0 = option0.getValue(0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("Fcf:K");
        String string0 = option0.getValue(0);
        assertEquals("Fcf:K", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1226() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue(0);
        assertEquals("Fcf:K", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1227() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue(0);
        assertEquals("kRz", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test1228() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue(0);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue(0);
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test1230() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue(0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1331() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("~JIwDGvF)zKmbB");
        String string0 = option0.getValue();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1332() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("~JIwDGvF)zKmbB");
        String string0 = option0.getValue();
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        Option option0 = new Option("", "");
        Class<Option> class0 = Option.class;
        option0.setType(class0);
        option0.getType();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        Option option0 = new Option("", "");
        Class<Option> class0 = Option.class;
        option0.setType(class0);
        option0.getType();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1535() throws Throwable {
        Option option0 = new Option((String) null, true, "");
        String string0 = option0.getOpt();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1536() throws Throwable {
        Option option0 = new Option((String) null, true, "");
        String string0 = option0.getOpt();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1637() throws Throwable {
        Option option0 = new Option("Vu", "Cannot add value, list full.", false, "Vu");
        String string0 = option0.getOpt();
        assertEquals("Vu", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1638() throws Throwable {
        Option option0 = new Option("Vu", "Cannot add value, list full.", false, "Vu");
        String string0 = option0.getOpt();
        assertEquals("Cannot add value, list full.", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test1639() throws Throwable {
        Option option0 = new Option("Vu", "Cannot add value, list full.", false, "Vu");
        String string0 = option0.getOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1640() throws Throwable {
        Option option0 = new Option("Vu", "Cannot add value, list full.", false, "Vu");
        String string0 = option0.getOpt();
        assertEquals("Vu", string0);
    }

    @Test(timeout = 4000)
    public void test1741() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getLongOpt();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1742() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getLongOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1843() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        String string0 = option0.getLongOpt();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test1844() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        String string0 = option0.getLongOpt();
        assertEquals("4ek@Ie`RGqSu", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test1845() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        String string0 = option0.getLongOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1846() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        String string0 = option0.getLongOpt();
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test1947() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.getKey();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2048() throws Throwable {
        Option option0 = new Option("_", "_", false, "qq/|,I(O`@");
        String string0 = option0.getKey();
        assertEquals("_", string0);
    }

    @Test(timeout = 4000)
    public void test2049() throws Throwable {
        Option option0 = new Option("_", "_", false, "qq/|,I(O`@");
        String string0 = option0.getKey();
        assertEquals("qq/|,I(O`@", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test2050() throws Throwable {
        Option option0 = new Option("_", "_", false, "qq/|,I(O`@");
        String string0 = option0.getKey();
        assertEquals("_", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test2051() throws Throwable {
        Option option0 = new Option("_", "_", false, "qq/|,I(O`@");
        String string0 = option0.getKey();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2152() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getKey();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2153() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getKey();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2154() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getKey();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test2255() throws Throwable {
        Option option0 = new Option("", false, "");
        option0.setDescription((String) null);
        option0.getDescription();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2256() throws Throwable {
        Option option0 = new Option("", false, "");
        option0.setDescription((String) null);
        option0.getDescription();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test2357() throws Throwable {
        Option option0 = new Option((String) null, "?mXq[jk3", true, "?mXq[jk3");
        String string0 = option0.getDescription();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2358() throws Throwable {
        Option option0 = new Option((String) null, "?mXq[jk3", true, "?mXq[jk3");
        String string0 = option0.getDescription();
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test2459() throws Throwable {
        Option option0 = new Option("", "");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2460() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgs(0);
        int int0 = option0.getArgs();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2561() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        int int0 = option0.getArgs();
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test2562() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        int int0 = option0.getArgs();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test2563() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        int int0 = option0.getArgs();
        assertEquals("4ek@Ie`RGqSu", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test2564() throws Throwable {
        Option option0 = new Option("", "", false, "4ek@Ie`RGqSu");
        int int0 = option0.getArgs();
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test2665() throws Throwable {
        Option option0 = new Option((String) null, true, "ZQx$Ym<>zOO'.");
        option0.setArgName("AI-o'u91%9~:ny|Nc&S");
        option0.getArgName();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test2766() throws Throwable {
        Option option0 = new Option("", "", true, "W8%Q&dA}l\"6)L}yU1}(");
        option0.setArgName("");
        option0.getArgName();
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test2767() throws Throwable {
        Option option0 = new Option("", "", true, "W8%Q&dA}l\"6)L}yU1}(");
        option0.setArgName("");
        option0.getArgName();
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test2768() throws Throwable {
        Option option0 = new Option("", "", true, "W8%Q&dA}l\"6)L}yU1}(");
        option0.setArgName("");
        option0.getArgName();
        assertEquals("W8%Q&dA}l\"6)L}yU1}(", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test2869() throws Throwable {
        Option option0 = new Option("", "", true, "");
        boolean boolean0 = option0.acceptsArg();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2970() throws Throwable {
        Option option0 = new Option("kRz", "", true, "' contains an illegal character : '");
        option0.addValueForProcessing("");
        try {
            option0.getValue(40);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 40, Size: 1
        }
    }

    @Test(timeout = 4000)
    public void test3071() throws Throwable {
        Option option0 = new Option("", "' contains an illegal character : '", true, "' contains an illegal character : '");
        // Undeclared exception!
        try {
            option0.getId();
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test3172() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.setArgs((-1448));
        option0.setValueSeparator('W');
        // Undeclared exception!
        try {
            option0.addValueForProcessing((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test3273() throws Throwable {
        Option option0 = null;
        try {
            option0 = new Option("_'*','d", false, "n");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The option '_'*','d' contains an illegal character : '''
        }
    }

    @Test(timeout = 4000)
    public void test3374() throws Throwable {
        Option option0 = null;
        try {
            option0 = new Option("d4]V2X(M", "x<(wwxMQxd~k}&_nZ", false, (String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The option 'd4]V2X(M' contains an illegal character : ']'
        }
    }

    @Test(timeout = 4000)
    public void test3475() throws Throwable {
        Option option0 = null;
        try {
            option0 = new Option("ZH#U", "ZH#U");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The option 'ZH#U' contains an illegal character : '#'
        }
    }

    @Test(timeout = 4000)
    public void test3576() throws Throwable {
        Option option0 = new Option("", true, "");
        option0.setValueSeparator(']');
        boolean boolean0 = option0.hasValueSeparator();
        assertEquals(']', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test3577() throws Throwable {
        Option option0 = new Option("", true, "");
        option0.setValueSeparator(']');
        boolean boolean0 = option0.hasValueSeparator();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3678() throws Throwable {
        Option option0 = new Option("", "", true, "");
        boolean boolean0 = option0.hasValueSeparator();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3779() throws Throwable {
        Option option0 = new Option("", true, "");
        boolean boolean0 = option0.hasArgs();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3780() throws Throwable {
        Option option0 = new Option("", true, "");
        boolean boolean0 = option0.hasArgs();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3881() throws Throwable {
        Option option0 = new Option("", "");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test3882() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgs((-2));
        boolean boolean0 = option0.hasArgs();
        assertEquals((-2), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3883() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgs((-2));
        boolean boolean0 = option0.hasArgs();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3984() throws Throwable {
        Option option0 = new Option((String) null, true, "");
        option0.setArgs(1024);
        boolean boolean0 = option0.hasArgs();
        assertEquals(1024, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3985() throws Throwable {
        Option option0 = new Option((String) null, true, "");
        option0.setArgs(1024);
        boolean boolean0 = option0.hasArgs();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4086() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.setArgs((-1148));
        boolean boolean0 = option0.hasArg();
        assertEquals((-1148), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test4087() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.setArgs((-1148));
        boolean boolean0 = option0.hasArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4188() throws Throwable {
        Option option0 = new Option("", "", true, "org.apache.commons.cli.Option");
        option0.hasArg();
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test4189() throws Throwable {
        Option option0 = new Option("", "", true, "org.apache.commons.cli.Option");
        option0.hasArg();
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test4190() throws Throwable {
        Option option0 = new Option("", "", true, "org.apache.commons.cli.Option");
        option0.hasArg();
        assertEquals("org.apache.commons.cli.Option", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test4291() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        boolean boolean0 = option0.hasOptionalArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4392() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("~JIwDGvF)zKmbB");
        option0.setArgs((-2));
        boolean boolean0 = option0.requiresArg();
        assertEquals((-2), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test4393() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("~JIwDGvF)zKmbB");
        option0.setArgs((-2));
        boolean boolean0 = option0.requiresArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4494() throws Throwable {
        Option option0 = new Option("", "", true, "%8+~$W-j&`;+'ks");
        option0.setArgs((-2));
        boolean boolean0 = option0.requiresArg();
        assertTrue(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test4495() throws Throwable {
        Option option0 = new Option("", "", true, "%8+~$W-j&`;+'ks");
        option0.setArgs((-2));
        boolean boolean0 = option0.requiresArg();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4596() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        option0.setOptionalArg(true);
        boolean boolean0 = option0.requiresArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4697() throws Throwable {
        Option option0 = new Option("", "", true, "%8+~$W-j&`;+'ks");
        boolean boolean0 = option0.requiresArg();
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test4698() throws Throwable {
        Option option0 = new Option("", "", true, "%8+~$W-j&`;+'ks");
        boolean boolean0 = option0.requiresArg();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4699() throws Throwable {
        Option option0 = new Option("", "", true, "%8+~$W-j&`;+'ks");
        boolean boolean0 = option0.requiresArg();
        assertEquals("%8+~$W-j&`;+'ks", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test46100() throws Throwable {
        Option option0 = new Option("", "", true, "%8+~$W-j&`;+'ks");
        boolean boolean0 = option0.requiresArg();
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test47101() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        option0.setArgs((-1148));
        option0.setOptionalArg(true);
        option0.addValueForProcessing("");
        assertEquals((-1148), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test48102() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.hashCode();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test49103() throws Throwable {
        Option option0 = new Option("", false, "");
        Option option1 = new Option("", "", false, "");
        boolean boolean0 = option0.equals(option1);
        assertEquals((-1), option1.getArgs());
    }

    @Test(timeout = 4000)
    public void test49104() throws Throwable {
        Option option0 = new Option("", false, "");
        Option option1 = new Option("", "", false, "");
        boolean boolean0 = option0.equals(option1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test50105() throws Throwable {
        Option option0 = new Option("", true, "");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test50106() throws Throwable {
        Option option0 = new Option("", true, "");
        option0.setLongOpt("");
        Object object0 = option0.clone();
        boolean boolean0 = option0.equals(object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test51107() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        Option option1 = new Option("", true, " nse/<z7\tPR']");
        boolean boolean0 = option0.equals(option1);
        assertEquals(" nse/<z7\tPR']", option1.getDescription());
    }

    @Test(timeout = 4000)
    public void test51108() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        Option option1 = new Option("", true, " nse/<z7\tPR']");
        boolean boolean0 = option0.equals(option1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test51109() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        Option option1 = new Option("", true, " nse/<z7\tPR']");
        boolean boolean0 = option0.equals(option1);
        assertEquals("", option1.getOpt());
    }

    @Test(timeout = 4000)
    public void test51110() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        Option option1 = new Option("", true, " nse/<z7\tPR']");
        boolean boolean0 = option0.equals(option1);
        assertFalse(option1.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test52111() throws Throwable {
        Option option0 = new Option("k", "k");
        Option option1 = new Option("r", false, "}");
        boolean boolean0 = option0.equals(option1);
        assertFalse(option1.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test52112() throws Throwable {
        Option option0 = new Option("k", "k");
        Option option1 = new Option("r", false, "}");
        boolean boolean0 = option0.equals(option1);
        assertEquals("}", option1.getDescription());
    }

    @Test(timeout = 4000)
    public void test52113() throws Throwable {
        Option option0 = new Option("k", "k");
        Option option1 = new Option("r", false, "}");
        boolean boolean0 = option0.equals(option1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test52114() throws Throwable {
        Option option0 = new Option("k", "k");
        Option option1 = new Option("r", false, "}");
        boolean boolean0 = option0.equals(option1);
        assertEquals((-1), option1.getArgs());
    }

    @Test(timeout = 4000)
    public void test52115() throws Throwable {
        Option option0 = new Option("k", "k");
        Option option1 = new Option("r", false, "}");
        boolean boolean0 = option0.equals(option1);
        assertEquals("r", option1.getOpt());
    }

    @Test(timeout = 4000)
    public void test53116() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        Object object0 = option0.clone();
        boolean boolean0 = option0.equals(object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test53117() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        Object object0 = option0.clone();
        boolean boolean0 = option0.equals(object0);
        assertNotSame(object0, option0);
    }

    @Test(timeout = 4000)
    public void test54118() throws Throwable {
        Option option0 = new Option("", "", true, "");
        boolean boolean0 = option0.equals("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test55119() throws Throwable {
        Option option0 = new Option("", true, "");
        boolean boolean0 = option0.equals((Object) null);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test55120() throws Throwable {
        Option option0 = new Option("", true, "");
        boolean boolean0 = option0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test56121() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.equals(option0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test56122() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.equals(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test56123() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.equals(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test57124() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        Class<String> class0 = String.class;
        option0.setType(class0);
        String string0 = option0.toString();
        assertEquals("[ option: kRz   [ARG] :: Fcf:K :: class java.lang.String ]", string0);
    }

    @Test(timeout = 4000)
    public void test58125() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.setArgs((-316));
        option0.toString();
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test59126() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        String[] stringArray0 = option0.getValues();
        assertEquals("kRz", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test59127() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        String[] stringArray0 = option0.getValues();
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test59128() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        String[] stringArray0 = option0.getValues();
        assertEquals("Fcf:K", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test59129() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        String[] stringArray0 = option0.getValues();
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test60130() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("~JIwDGvF)zKmbB");
        String[] stringArray0 = option0.getValues();
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test60131() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("~JIwDGvF)zKmbB");
        String[] stringArray0 = option0.getValues();
        assertNotNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test61132() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("~JIwDGvF)zKmbB");
        String string0 = option0.getValue("");
        assertEquals("~JIwDGvF)zKmbB", string0);
    }

    @Test(timeout = 4000)
    public void test61133() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("~JIwDGvF)zKmbB");
        String string0 = option0.getValue("");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test62134() throws Throwable {
        Option option0 = new Option("", "", true, "wOv1HIM3;");
        option0.getValue((-102));
        assertEquals("wOv1HIM3;", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test62135() throws Throwable {
        Option option0 = new Option("", "", true, "wOv1HIM3;");
        option0.getValue((-102));
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test62136() throws Throwable {
        Option option0 = new Option("", "", true, "wOv1HIM3;");
        option0.getValue((-102));
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test63137() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        try {
            option0.getValue((-316));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test64138() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        String string0 = option0.getValue();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test65139() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue();
        assertEquals("kRz", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test65140() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue();
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test65141() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue();
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test65142() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test65143() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.addValueForProcessing("");
        String string0 = option0.getValue();
        assertEquals("Fcf:K", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test66144() throws Throwable {
        Option option0 = new Option("xJL", true, "xJL");
        option0.setArgs('&');
        option0.setValueSeparator('h');
        option0.addValueForProcessing("' contains an illegal character : '");
        assertEquals(38, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test67145() throws Throwable {
        Option option0 = new Option("xJL", true, "xJL");
        option0.setValueSeparator('h');
        option0.addValueForProcessing("' contains an illegal character : '");
        assertEquals('h', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test68146() throws Throwable {
        Option option0 = new Option("", "", false, "");
        // Undeclared exception!
        try {
            option0.addValueForProcessing("");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // NO_ARGS_ALLOWED
        }
    }

    @Test(timeout = 4000)
    public void test69147() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.setArgs((-2));
        option0.toString();
        assertEquals((-2), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test70148() throws Throwable {
        Option option0 = new Option("S", "S", true, "S");
        option0.setArgName("S");
        boolean boolean0 = option0.hasArgName();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test71149() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgName("");
        boolean boolean0 = option0.hasArgName();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test71150() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgName("");
        boolean boolean0 = option0.hasArgName();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test71151() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgName("");
        boolean boolean0 = option0.hasArgName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test72152() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        boolean boolean0 = option0.hasArgName();
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test72153() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        boolean boolean0 = option0.hasArgName();
        assertEquals("kRz", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test72154() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        boolean boolean0 = option0.hasArgName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test72155() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        boolean boolean0 = option0.hasArgName();
        assertEquals("Fcf:K", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test73156() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.setArgs((-2));
        boolean boolean0 = option0.hasArg();
        assertTrue(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test73157() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.setArgs((-2));
        boolean boolean0 = option0.hasArg();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test74158() throws Throwable {
        Option option0 = new Option("", "", true, "");
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test74159() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing(" ");
        option0.getValuesList();
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test75160() throws Throwable {
        Option option0 = new Option("", "", true, "");
        boolean boolean0 = option0.hasLongOpt();
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test75161() throws Throwable {
        Option option0 = new Option("", "", true, "");
        boolean boolean0 = option0.hasLongOpt();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test76162() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.hasLongOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test76163() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.hasLongOpt();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test77164() throws Throwable {
        Option option0 = new Option((String) null, true, "");
        // Undeclared exception!
        try {
            option0.getId();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test78165() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        option0.clearValues();
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test79166() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        int int0 = option0.getArgs();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test80167() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        option0.setLongOpt("P#J");
        Option option1 = (Option) option0.clone();
        option1.setLongOpt("P");
        boolean boolean0 = option0.equals(option1);
        assertEquals("P#J", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test80168() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        option0.setLongOpt("P#J");
        Option option1 = (Option) option0.clone();
        option1.setLongOpt("P");
        boolean boolean0 = option0.equals(option1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test81169() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.getValueSeparator();
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test82170() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.getOpt();
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test83171() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.getType();
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test84172() throws Throwable {
        Option option0 = new Option("", "", true, "");
        // Undeclared exception!
        try {
            option0.addValue("Tsz,WMx}CI%oE,}");
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.
        }
    }

    @Test(timeout = 4000)
    public void test85173() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        option0.getId();
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test86174() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        option0.getLongOpt();
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test87175() throws Throwable {
        Option option0 = new Option("P", "P", true, "P");
        option0.getValuesList();
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test88176() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.isRequired();
        assertEquals(1, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test88177() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.isRequired();
        assertEquals("Fcf:K", option0.getDescription());
    }

    @Test(timeout = 4000)
    public void test88178() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.isRequired();
        assertEquals("", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test88179() throws Throwable {
        Option option0 = new Option("kRz", "", true, "Fcf:K");
        option0.isRequired();
        assertEquals("kRz", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test89180() throws Throwable {
        Option option0 = new Option("xJL", true, "xJL");
        option0.setArgs('&');
        option0.toString();
        assertEquals(38, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test90181() throws Throwable {
        Option option0 = new Option("", "");
        option0.getArgName();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test90182() throws Throwable {
        Option option0 = new Option("", "");
        option0.getArgName();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test91183() throws Throwable {
        Option option0 = new Option("", "'h>", true, "");
        String string0 = option0.getDescription();
        assertEquals("", option0.getOpt());
    }

    @Test(timeout = 4000)
    public void test91184() throws Throwable {
        Option option0 = new Option("", "'h>", true, "");
        String string0 = option0.getDescription();
        assertEquals("'h>", option0.getLongOpt());
    }

    @Test(timeout = 4000)
    public void test91185() throws Throwable {
        Option option0 = new Option("", "'h>", true, "");
        String string0 = option0.getDescription();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test91186() throws Throwable {
        Option option0 = new Option("", "'h>", true, "");
        String string0 = option0.getDescription();
        assertEquals(1, option0.getArgs());
    }
}
