/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 21:53:19 GMT 2023
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.junit.runner.RunWith;

public class OptionsTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Options options0 = new Options();
        Options options1 = options0.addOption("", true, "");
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Options options0 = new Options();
        options0.addOption("", "");
        Option option0 = options0.getOption("");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Options options0 = new Options();
        options0.addOption("", "");
        Option option0 = options0.getOption("");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Options options0 = new Options();
        options0.addOption("", "");
        Option option0 = options0.getOption("");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Options options0 = new Options();
        Collection<Option> collection0 = options0.getOptions();
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Options options0 = new Options();
        List list0 = options0.getRequiredOptions();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Options options0 = new Options();
        String string0 = options0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("", false, "");
        OptionGroup optionGroup0 = options0.getOptionGroup(option0);
        assertNull(optionGroup0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Options options0 = new Options();
        Collection<OptionGroup> collection0 = options0.getOptionGroups();
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertSame(options0, options1);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("4", "oi8UJ'BQWHc3s*q;-W");
        optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup0);
        assertSame(options1, options0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Options options0 = new Options();
        options0.addOption("3", "'", true, "org.apache.commons.cli.AlreadySelectedException");
        boolean boolean0 = options0.hasOption("'");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("4", "oi8UJ'BQWHc3s*q;-W");
        option0.setRequired(true);
        Options options1 = options0.addOption(option0);
        Options options2 = options0.addOption(option0);
        assertSame(options2, options1);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        Options options0 = new Options();
        Option option0 = options0.getOption((String) null);
        assertNull(option0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        Options options0 = new Options();
        options0.addOption("", "", true, "");
        List<String> list0 = options0.getMatchingOptions("");
        assertTrue(list0.contains(""));
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Options options0 = new Options();
        Options options1 = options0.addOption("", "qivQG~Ob6?oc:QQ{,", true, "oi8UJ'BQWHc3s*q;-W");
        List<String> list0 = options1.getMatchingOptions("");
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        Options options0 = new Options();
        Options options1 = options0.addOption("", "qivQG~Ob6?oc:QQ{,", true, "oi8UJ'BQWHc3s*q;-W");
        List<String> list0 = options1.getMatchingOptions("");
        assertFalse(list0.contains(""));
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        Options options0 = new Options();
        Options options1 = options0.addOption("", "qivQG~Ob6?oc:QQ{,", true, "oi8UJ'BQWHc3s*q;-W");
        List<String> list0 = options1.getMatchingOptions("*bzu");
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasOption("KARG...]");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Options options0 = new Options();
        options0.addOption("", "");
        boolean boolean0 = options0.hasOption("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasLongOption("[/");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Options options0 = new Options();
        Options options1 = options0.addOption("", "", true, "");
        boolean boolean0 = options1.hasLongOption("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        Options options0 = new Options();
        boolean boolean0 = options0.hasShortOption(" ]");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        Options options0 = new Options();
        Option option0 = new Option("4", "oi8UJ'BQWHc3s*q;-W");
        options0.addOption(option0);
        boolean boolean0 = options0.hasShortOption("4");
        assertTrue(boolean0);
    }
}
