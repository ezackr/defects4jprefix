/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:04:49 GMT 2023
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.junit.runner.RunWith;

public class FastDateFormatTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        assertEquals("en_GB", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        assertEquals("GBR", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        assertEquals("GB", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0010() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-764), locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal style: -764
        }
    }

    @Test(timeout = 4000)
    public void test0111() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0112() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0113() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0114() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0115() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0116() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0117() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0118() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0119() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0120() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0121() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0122() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0123() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0124() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0125() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0126() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0127() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0128() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0129() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0130() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0131() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0132() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test0133() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0134() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0135() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0136() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals(3193, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0137() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0138() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test0139() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertNotNull(date0);
    }

    @Test(timeout = 4000)
    public void test0140() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0141() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0142() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0143() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals(3193, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0144() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0145() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0146() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0147() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=24,MILLISECOND=513,ZONE_OFFSET=3193,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0148() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0149() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
    }

    @Test(timeout = 4000)
    public void test0150() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0151() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        assertEquals(15, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0152() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        assertEquals("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0153() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0154() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0155() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0156() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0157() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0158() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0159() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0160() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0161() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0162() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0163() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0164() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0165() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0166() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0167() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0168() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0169() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0170() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0171() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0172() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(3193, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0173() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0174() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0175() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0176() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=24,MILLISECOND=513,ZONE_OFFSET=3193,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0177() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0178() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
    }

    @Test(timeout = 4000)
    public void test0179() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(32, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0180() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C1582\uB144 10\uC6D4 15\uC77C \uAE08\uC694\uC77C", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0181() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(32, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0182() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C1582\uB144 10\uC6D4 15\uC77C \uAE08\uC694\uC77C", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0283() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0284() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0285() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0286() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0287() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0288() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0289() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0290() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0291() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0292() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0293() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0294() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0295() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0296() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0297() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0398() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0399() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test03100() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test03101() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test03102() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test03103() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test03104() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test03105() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test03106() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test03107() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test03108() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test03109() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test03110() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(6, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test03111() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test03112() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test03113() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals("'#", string0);
    }

    @Test(timeout = 4000)
    public void test03114() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test03115() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test03116() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test04117() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test04118() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test04119() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test04120() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test04121() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test04122() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test04123() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test04124() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test04125() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test04126() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test04127() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test04128() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test04129() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test04130() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test04131() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test04132() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test04133() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test04134() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test04135() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test04136() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test04137() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test04138() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test04139() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test04140() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test04143() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test04144() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test04146() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test04148() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test04149() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test04150() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test04151() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test04152() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test04153() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test04154() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test04155() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test04156() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test04157() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test04158() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test05159() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test05160() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test05161() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test05162() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test05163() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test05164() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test05165() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test05166() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test05167() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test05168() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test05169() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test05170() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test05171() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test05172() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test05173() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test05174() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test05175() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test05176() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(11, list0.size());
    }

    @Test(timeout = 4000)
    public void test06177() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test06178() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test06179() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test06180() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test06181() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test06182() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test06183() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test06184() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test06185() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test06186() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test06187() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test06188() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test06189() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test06190() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test06191() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test06192() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test06193() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test06194() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test06195() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test06196() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test06197() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test06198() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test06199() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test06200() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test06201() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test06202() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test06203() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test06204() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test06205() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test06206() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06207() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test06208() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test06209() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test06210() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test06211() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test06212() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test06213() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test06214() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test06215() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test06216() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test07217() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test07218() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test07219() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("GMT-18:00", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test07220() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test07221() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test07222() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test07223() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test07224() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test07225() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test07226() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test07227() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test07228() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("GMT-18:00", string0);
    }

    @Test(timeout = 4000)
    public void test07229() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("GMT-18:00", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test07230() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test07231() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test07232() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test07233() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test07234() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test07235() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test08236() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test08237() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test08238() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test08239() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertEquals(2596, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test08240() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertEquals("0\"ED.Cahr1Cm/{Vt", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test08241() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test08242() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test08243() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test08244() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test08245() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test08246() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test08247() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test08248() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test08249() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(2596, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test08250() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("0\"ED.Cahr1Cm/{Vt", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test08251() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test08252() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test08253() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test08254() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test08255() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test08256() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test08257() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test08258() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test08259() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertSame(simpleTimeZone0, timeZone0);
    }

    @Test(timeout = 4000)
    public void test08260() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertSame(timeZone0, simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test08261() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test08262() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test08263() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test08264() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(2596, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test08265() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("0\"ED.Cahr1Cm/{Vt", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test08266() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test08267() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test08268() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test08269() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test08270() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, timeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test08271() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertFalse(timeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test08272() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("0\"ED.Cahr1Cm/{Vt", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test08273() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(2596, timeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test08274() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test09275() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test09276() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test09277() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test09278() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test09279() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test09280() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test09281() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test09282() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test09283() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test09284() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test09285() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test09286() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test09287() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test09288() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test09289() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test09290() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test09291() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test09293() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test09294() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test09295() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test09296() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test09297() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test09298() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertSame(simpleTimeZone0, timeZone0);
    }

    @Test(timeout = 4000)
    public void test09299() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertSame(timeZone0, simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test09300() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test09301() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test09302() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test09303() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test09304() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test09305() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test09306() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test09307() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test09308() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test09309() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("IH2", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test09310() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, timeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test09311() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, timeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test09312() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test09313() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertFalse(timeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test10314() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test10315() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test10316() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test10317() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test10318() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test10319() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test10320() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test10321() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test10322() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test10323() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test10324() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test10325() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test10326() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test10327() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test10328() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test10329() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test10330() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test10331() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test10332() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test10333() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test10334() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test10335() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test10336() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test10337() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test10338() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test10339() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test10340() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test10341() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test10342() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test10343() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test10344() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test10345() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test10346() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test10347() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test10348() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test10349() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test11350() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test11351() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test11352() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test11353() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test11354() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test11355() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test11356() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test11357() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test11358() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test11359() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test11360() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test11361() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test11362() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test11363() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test11364() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test11365() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test11366() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test11367() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test11368() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test11369() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test11370() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test11371() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test11372() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test11373() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test11374() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test11375() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test11376() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test11377() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test11378() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test11379() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test11380() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test11381() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test11382() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test11383() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test11384() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test12385() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test12386() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test12387() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test12388() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test12389() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test12390() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test12391() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test12392() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test12393() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test12394() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals(3193, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test12395() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test12396() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test12397() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test12398() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test12399() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test12400() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test12401() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test12402() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test12403() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test12404() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test12405() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test12406() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test12407() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test12408() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test12409() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test12410() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3193, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test12411() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test12412() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test12413() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test12414() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(46, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test12415() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test12416() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test13417() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test13418() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test13419() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test13420() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test13421() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test13422() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test13423() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test13424() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test14425() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test14426() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test14427() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test14428() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test14429() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test14430() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test14431() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test14432() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test14433() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test14434() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test14435() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test14436() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test14437() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test14438() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test14439() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test14440() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test14441() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test14442() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test14443() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test14444() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("'XETJC", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test14445() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test15446() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test15447() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test15448() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test15449() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test15450() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test15451() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test15452() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals("sa", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test15453() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test16454() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test16455() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test16456() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test16457() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test16458() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test16459() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test16460() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test16461() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test17462() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test17463() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test17464() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test17465() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test17466() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test17467() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test17468() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test17469() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test17470() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test17471() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test17472() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test17473() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test17474() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test17475() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test17476() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test17477() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test17478() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test17479() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test17480() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test17481() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test17482() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test17483() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test17484() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test17485() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test17486() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test17487() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test17488() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test17489() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test17490() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test17491() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test17492() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test17493() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test17494() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test17495() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test17496() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test17497() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test17498() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test18499() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test18500() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test18501() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test18502() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test18503() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test18504() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test18505() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test18506() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test18507() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test18508() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test18509() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test18510() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test18511() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test18512() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test18513() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test18514() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test18515() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test18516() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test18517() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test18518() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test18519() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test18520() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test18521() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test18522() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test18523() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test18524() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test18525() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test18526() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test18527() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test18528() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test18529() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test18530() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test18531() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test18532() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test18533() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test18534() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test18535() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test18536() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test19537() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test19538() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test19539() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test19540() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test19541() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-1,startTime=-1,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=4682,endTime=-2182,endTimeMode=-2182]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test19542() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test19543() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test19544() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test19545() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test19546() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test19547() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test19548() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test19549() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test19550() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test19551() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-1,startTime=-1,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=4682,endTime=-2182,endTimeMode=-2182]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test19552() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test19553() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test19554() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test19555() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test19556() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test19557() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test19558() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test19559() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test19560() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test19561() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test19562() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test19563() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test19564() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test19565() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test19566() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test19567() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test19568() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test19569() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test19570() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test19571() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test19572() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test19573() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test19574() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test19575() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test19576() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test19577() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-1,startTime=-1,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=4682,endTime=-2182,endTimeMode=-2182]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test19578() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test19579() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test19580() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test19581() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test19582() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test19583() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test19584() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test19585() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test19586() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test19587() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test19588() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test19589() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test19590() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test19591() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test19592() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test19593() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test19594() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test19595() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test20596() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test20597() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test20598() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test20599() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test20600() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test20601() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test20602() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test20603() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test20604() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test20605() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test20606() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test20607() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test20608() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test20609() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test20610() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test20611() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test20612() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test20613() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test20614() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test20615() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test20616() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test20617() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test20618() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test20619() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test20620() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test20621() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test20622() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test20623() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test20624() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test20625() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test20626() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test20627() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test20628() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test21629() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test21630() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("FR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test21631() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test21632() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test21633() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("fr_FR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test21634() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test21635() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("FRA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test21636() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test21637() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test21638() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test21639() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test21640() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test21641() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("FR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test21642() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test21643() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test21644() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("fr_FR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test21645() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test21646() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("FRA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test21647() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test21648() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test21649() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test21650() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test21651() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test21652() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test21653() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test21654() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test21655() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test21656() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("FR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test21657() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test21658() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test21659() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("fr_FR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test21660() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test21661() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("FRA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test21662() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test21663() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test21664() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test22665() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test22666() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test22667() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test22668() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test22669() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test22670() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test22671() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test22672() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test22673() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test22674() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test22675() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test22676() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test22677() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test22678() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test22679() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test22680() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test22681() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test22682() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test22683() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test22684() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test22685() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test22686() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        int[] intArray0 = new int[3];
        // Undeclared exception!
        try {
            fastDateFormat0.parseToken("", intArray0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test23687() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test23688() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test23689() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test23690() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test23691() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test23692() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test23693() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test23694() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test23695() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        // Undeclared exception!
        try {
            fastDateFormat0.parseToken("", (int[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test24696() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test24697() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test24698() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test24699() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test24700() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test24701() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test24702() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test24703() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test25704() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test25705() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test25706() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test25707() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test25708() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test25709() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test25710() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test25711() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test25712() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test25713() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(2623, timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 2623
        }
    }

    @Test(timeout = 4000)
    public void test26714() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test26715() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test26716() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test26717() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test26718() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test26719() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test26720() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 15
        }
    }

    @Test(timeout = 4000)
    public void test27721() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test27722() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test27723() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test27724() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test27725() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test27726() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test27727() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test27728() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(739, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 739
        }
    }

    @Test(timeout = 4000)
    public void test28729() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(100);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 100
        }
    }

    @Test(timeout = 4000)
    public void test29730() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test29731() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test29732() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance((-339), (-339), timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -339
        }
    }

    @Test(timeout = 4000)
    public void test30733() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(13, 31);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 31
        }
    }

    @Test(timeout = 4000)
    public void test31734() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test31735() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test31736() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test31737() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        assertEquals("java.util.SimpleTimeZone[id=`{,s8u`5e* '8 v,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test31738() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        assertEquals("`{,s8u`5e* '8 v", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test31739() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        assertEquals(6, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test31740() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(6, (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 6
        }
    }

    @Test(timeout = 4000)
    public void test32741() throws Throwable {
        Locale locale0 = new Locale("");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test32742() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test32743() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test32744() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test32745() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test32746() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test32747() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test32748() throws Throwable {
        Locale locale0 = new Locale("");
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance((-1), locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -1
        }
    }

    @Test(timeout = 4000)
    public void test33749() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance((-2289));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -2289
        }
    }

    @Test(timeout = 4000)
    public void test34750() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test34751() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test34752() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test34753() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test34754() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test34755() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test34756() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test34757() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test34758() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(10, 835, 0);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test34759() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(10, 835, 0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test35760() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test35761() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test35762() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test35763() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test35764() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test35765() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test35766() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test35767() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test35768() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.format((Date) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test36769() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test36770() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test36771() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test36772() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test36773() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test36774() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test36775() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test36776() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test36777() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        // Undeclared exception!
        try {
            fastDateFormat0.format(0L, (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test37778() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test37779() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test37780() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test37781() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test37782() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test37783() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test37784() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test37785() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test37786() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test37787() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test37788() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test37789() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test37790() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test37791() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test37792() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test37793() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test37794() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test37795() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test37796() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test37797() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test37798() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test37799() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test37800() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test37801() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test37802() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        // Undeclared exception!
        try {
            fastDateFormat0.format(0L);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test38803() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test38804() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test38805() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test38806() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test38807() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test38808() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test38809() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test38810() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test38811() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test38812() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        assertEquals(33, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test38813() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        assertEquals("No date time pattern for locale: ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test38814() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        // Undeclared exception!
        try {
            fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test39815() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test39816() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test39817() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test39818() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test39819() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39820() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test39821() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39822() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39823() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39824() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39825() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test39826() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test39827() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test39828() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test39829() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39830() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test39831() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39832() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39833() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test39834() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test39835() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test39836() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test39837() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test39838() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test39839() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test39840() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test39841() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test39842() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test39843() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39844() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39845() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39846() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39847() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test39848() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("8:21:21 PM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test39849() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test39850() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test39851() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test39852() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39853() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test39854() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39855() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39856() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test39857() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test39858() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test39859() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test39860() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test39861() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test39862() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test39863() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test40864() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test40865() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test40866() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test40867() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test40868() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test40869() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test40870() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test40871() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test40872() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test40873() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test40874() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test40875() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test40876() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test40877() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test40878() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test41879() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test41880() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test41881() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test41882() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test41883() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test41884() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test41885() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test41886() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test41887() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test41888() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("en_US", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test41889() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test41890() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test41891() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("US", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test41892() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("USA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test41893() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test41894() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test41895() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test42896() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance((-1105), 0, (TimeZone) null, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -1105
        }
    }

    @Test(timeout = 4000)
    public void test43897() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test43898() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test43899() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test43900() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test43901() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("KR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test43902() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("ko_KR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test43903() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test43904() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test43905() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("KOR", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test43906() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test43907() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test43908() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test43909() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test43910() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test43911() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test43912() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test43913() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("KR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test43914() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("ko_KR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test43915() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test43916() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test43917() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("KOR", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test43918() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test43919() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test43920() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h:mm:ss", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test44921() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test44922() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test44923() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test44924() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test44925() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test44926() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test44927() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test44928() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test44929() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test44930() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test44931() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test44932() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test44933() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test44934() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test44935() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test44936() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test44937() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test44938() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test44939() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test44940() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test44941() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test45942() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test45943() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test45944() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test45945() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test45946() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test45947() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test45948() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test45949() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test45950() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test45951() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test45952() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test45953() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test45954() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=118,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=7,startTime=2,startTimeMode=3,endMode=0,endMonth=-424,endDay=0,endDayOfWeek=3,endTime=1102,endTimeMode=7]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test45955() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test45956() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test45957() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test45958() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test45959() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test45960() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test45961() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test45962() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test45963() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test45964() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test45965() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test45966() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test45967() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test45968() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test45969() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test45970() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=118,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=7,startTime=2,startTimeMode=3,endMode=0,endMonth=-424,endDay=0,endDayOfWeek=3,endTime=1102,endTimeMode=7]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test45971() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test45972() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test45973() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test46974() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(103, (TimeZone) null, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 103
        }
    }

    @Test(timeout = 4000)
    public void test47975() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test47976() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test47977() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test47978() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test47979() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test47980() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test47981() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test47982() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test47983() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test47984() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test47985() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        assertEquals("A:=", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test47986() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test47987() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test47988() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test47989() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test47990() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test47991() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test47992() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test47993() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test47994() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test47995() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test47996() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test47997() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("Thu Aug 09 23:59:00 GMT 1906", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test47998() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(18, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test47999() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("A:=8/9/06 11:59 PM", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test471000() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("A:=8/9/06 11:59 PM", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test471001() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(18, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test481002() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test481003() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test481004() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test481005() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test481006() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test481007() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test481008() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test481009() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test481010() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test481011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test481012() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test481013() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test481014() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test481015() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test481016() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("1/1/70 12:00 AM", string0);
    }

    @Test(timeout = 4000)
    public void test481017() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test481018() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test481019() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test481020() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test491021() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test491022() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test491023() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test491024() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test491025() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test491026() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test491027() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test491028() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test491029() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test491030() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test491031() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test491032() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test491033() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test491034() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test491035() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("Friday, February 28, 0122 11:59:00 PM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test491036() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test491037() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test491038() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test491039() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test491040() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test491041() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test491042() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58312224060000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=122,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test501043() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501044() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501045() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501046() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501047() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501048() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test501049() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501050() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501051() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test501052() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501053() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501054() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501055() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501056() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test501057() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test501058() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501059() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501060() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test511061() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test511062() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test511063() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test511064() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test511065() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test511066() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test511067() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test511068() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test511069() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test511070() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test511071() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test511072() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test511073() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test511074() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test511075() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test511076() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test511077() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test511078() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test511079() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test511080() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test511081() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test511082() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test511083() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test511084() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test511085() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test511086() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test511087() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test511088() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test511089() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test511090() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test511091() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test511092() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test511093() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test511094() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test511095() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test511096() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test511097() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test511098() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test511099() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test511100() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test511101() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test511102() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test511103() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test511104() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test511105() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        assertEquals(21, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test511106() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        assertEquals("\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test511107() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test511108() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test511109() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test511110() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test511111() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test511112() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test511113() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test511114() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test511115() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test511116() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test511117() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test511118() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test511119() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test511120() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test511121() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test511122() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test511123() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test511124() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test511125() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test511126() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test511127() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test511128() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test511129() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test511130() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test511131() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test511132() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00\u4E0B\u534808\u65F621\u520621\u79D2 GMT+00:00", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test511133() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(42, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test511134() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(42, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test511135() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00\u4E0B\u534808\u65F621\u520621\u79D2 GMT+00:00", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test521136() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test521137() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test521138() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test521139() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test521140() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test521141() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test521142() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test521143() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test521144() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        assertNotNull(long0);
    }

    @Test(timeout = 4000)
    public void test521145() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        assertEquals((-1211L), (long) long0);
    }

    @Test(timeout = 4000)
    public void test521146() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test521147() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test521148() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test521149() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test521150() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertNotNull(attributedCharacterIterator0);
    }

    @Test(timeout = 4000)
    public void test521151() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test521152() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test521153() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test521154() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(17, attributedCharacterIterator0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test521155() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(17, attributedCharacterIterator0.getRunLimit());
    }

    @Test(timeout = 4000)
    public void test521156() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(0, attributedCharacterIterator0.getIndex());
    }

    @Test(timeout = 4000)
    public void test521157() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(0, attributedCharacterIterator0.getRunStart());
    }

    @Test(timeout = 4000)
    public void test521158() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(0, attributedCharacterIterator0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test531159() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test531160() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test531161() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test531162() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test531163() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test531164() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test531165() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test531166() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test531167() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test531168() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test531169() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test531170() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test531171() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test531172() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test531173() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test531174() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test531175() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test531176() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test531177() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test531178() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test531179() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test531180() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test531181() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test531182() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test531183() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test531184() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test531185() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test531186() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test531187() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test531188() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test531189() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test531190() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test531191() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test531192() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test531193() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test531194() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test531195() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test531196() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test531197() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test531198() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test531199() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test531200() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test531201() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test531202() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test531203() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test531204() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test531205() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test531206() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61614000000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test531207() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test531208() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("0017\uB144 7\uC6D4 15\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test531209() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(35, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test531210() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test531211() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test531212() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test531213() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("0017\uB144 7\uC6D4 15\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test531214() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(35, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test541215() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test541216() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test541217() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test541218() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test541219() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test541220() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test541221() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test541222() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test541223() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test541224() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test541225() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test541226() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test541227() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test541228() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test541229() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test541230() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test541231() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test541232() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test541233() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test541234() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test541235() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test541236() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test541237() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test541238() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test541239() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test541240() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test541241() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test541242() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test541243() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test541244() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test541245() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test541246() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test541247() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test541248() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        assertEquals(21, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test541249() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        assertEquals("\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test541250() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test541251() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test541252() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test541253() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test541254() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) "", stringBuffer0, fieldPosition0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: java.lang.String
        }
    }

    @Test(timeout = 4000)
    public void test551255() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("HmEwv:<G%uK-&");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
        }
    }

    @Test(timeout = 4000)
    public void test561256() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("|~#+%|r<");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: r
        }
    }

    @Test(timeout = 4000)
    public void test571257() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(".hp7jH`/1_94X/S#");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: p
        }
    }

    @Test(timeout = 4000)
    public void test581258() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test581259() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test581260() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test581261() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test581262() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertEquals("org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test581263() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test581264() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField", (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
        }
    }

    @Test(timeout = 4000)
    public void test591265() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("<null>");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: n
        }
    }

    @Test(timeout = 4000)
    public void test601266() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("F|&l");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: l
        }
    }

    @Test(timeout = 4000)
    public void test611267() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("*y%[}sjm@y", (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: j
        }
    }

    @Test(timeout = 4000)
    public void test621268() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("$h]hz[im+[", (TimeZone) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: i
        }
    }

    @Test(timeout = 4000)
    public void test631269() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test631270() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test631271() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(".y^g%D]]q!ZT", timeZone0, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: g
        }
    }

    @Test(timeout = 4000)
    public void test641272() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("*#m(F_fi<WsDs3");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: f
        }
    }

    @Test(timeout = 4000)
    public void test651273() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test651274() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test651275() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test651276() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test651277() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test651278() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test651279() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test651280() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("&c+c", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: c
        }
    }

    @Test(timeout = 4000)
    public void test661281() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        assertNotNull(zoneId0);
    }

    @Test(timeout = 4000)
    public void test661282() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test661283() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test661284() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test661285() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test661286() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        assertEquals("4YAAV@[SWC8|", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test661287() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test661288() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test661289() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        assertEquals("_4YAAV@[SWC8|", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test661290() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("4Yaav@[swc8|", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Y
        }
    }

    @Test(timeout = 4000)
    public void test671291() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test671292() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        assertNotNull(zoneId0);
    }

    @Test(timeout = 4000)
    public void test671293() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test671294() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("GMT-18:00", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test671295() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test671296() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test671297() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test671298() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test671299() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test671300() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals("GMT-18:00", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test671301() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals("W9", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test671302() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test671303() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test681304() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test681305() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test681306() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test681307() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test681308() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test681309() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test681310() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test681311() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test681312() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test681313() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test681314() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test681315() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test681316() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test681317() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Unknown class: ", (TimeZone) simpleTimeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: U
        }
    }

    @Test(timeout = 4000)
    public void test691318() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test691319() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertEquals("no date time pattern for locale: ", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test691320() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertEquals("no date time pattern for locale: _S<QO?Y0", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test691321() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test691322() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertEquals("S<QO?Y0", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test691323() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("S<qo?y0", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: q
        }
    }

    @Test(timeout = 4000)
    public void test701324() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test701325() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test701326() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("{363RHP)", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
        }
    }

    @Test(timeout = 4000)
    public void test711327() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("L");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: L
        }
    }

    @Test(timeout = 4000)
    public void test721328() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test721329() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("KR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test721330() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("ko_KR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test721331() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test721332() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test721333() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("KOR", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test721334() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test721335() throws Throwable {
        Locale locale0 = Locale.KOREA;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(" 9JtTd.$cJi'MXwGE", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: J
        }
    }

    @Test(timeout = 4000)
    public void test731336() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("IWw|");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: I
        }
    }

    @Test(timeout = 4000)
    public void test741337() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: T
        }
    }

    @Test(timeout = 4000)
    public void test751338() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test751339() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=-2446,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test751340() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test751341() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertEquals((-2446), simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test751342() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test751343() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test751344() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]", (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: t
        }
    }

    @Test(timeout = 4000)
    public void test761345() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("C/");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: C
        }
    }

    @Test(timeout = 4000)
    public void test771346() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test771347() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test771348() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test771349() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test771350() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test771351() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test771352() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test771353() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("%!6BqT/ 2.y", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: B
        }
    }

    @Test(timeout = 4000)
    public void test781354() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test781355() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test781356() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test781357() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test781358() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test781359() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test781360() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test781361() throws Throwable {
        Locale locale0 = Locale.CHINA;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("@AwdO6>Z*", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: A
        }
    }

    @Test(timeout = 4000)
    public void test791362() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test791363() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test791364() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test791365() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test791366() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test791367() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test791368() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test791369() throws Throwable {
        Locale locale0 = Locale.CHINA;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance((String) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The pattern must not be null
        }
    }

    @Test(timeout = 4000)
    public void test801370() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test801371() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test801372() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test811373() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        ZoneId.getAvailableZoneIds();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        zoneOffset0.getRules();
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        StringBuffer stringBuffer1 = decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
        fastDateFormat0.format((long) 0, stringBuffer1);
        assertEquals("sa112:00:00 AM UTC", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test811374() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        ZoneId.getAvailableZoneIds();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        zoneOffset0.getRules();
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        StringBuffer stringBuffer1 = decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
        fastDateFormat0.format((long) 0, stringBuffer1);
        assertEquals(18, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test821375() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test831376() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        ZoneId.getAvailableZoneIds();
        timeZone0.setID("sa");
        zoneOffset0.getRules();
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test841377() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        Locale locale0 = new Locale("4|<9 ,H| Do&/", "IUgG1T[MPmf6/yGLlvX", "km\"=7X{|rJ");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("km\"=7X{|rJ", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: X
        }
    }

    @Test(timeout = 4000)
    public void test851378() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", string0);
    }

    @Test(timeout = 4000)
    public void test861379() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test861380() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getLocale();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test871381() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(1);
        fastDateFormat0.parseObject("", parsePosition0);
        assertEquals(0, parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test871382() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(1);
        fastDateFormat0.parseObject("", parsePosition0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test881383() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Calendar) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test891384() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals("M/d/yy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test901385() throws Throwable {
        FastDateFormat.getTimeInstance(0);
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test911386() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        String string0 = fastDateFormat0.format((long) 0);
        assertEquals("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", string0);
    }

    @Test(timeout = 4000)
    public void test921387() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test931388() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(1960, 0, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 1960
        }
    }

    @Test(timeout = 4000)
    public void test941389() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        String string0 = fastDateFormat0.toString();
        assertEquals("FastDateFormat[h:mm:ss a z]", string0);
    }

    @Test(timeout = 4000)
    public void test951390() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(17, int0);
    }

    @Test(timeout = 4000)
    public void test961391() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
        // Undeclared exception!
        try {
            fastDateFormat0.parseObject("\u683C\u6797\u5A01\u6CBB\u65F6\u95F4", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test971392() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 3, 3, 337);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
        assertEquals(8, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test971393() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 3, 3, 337);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167188180000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=37,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }
}
