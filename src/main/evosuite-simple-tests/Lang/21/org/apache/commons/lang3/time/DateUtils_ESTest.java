/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:34:12 GMT 2023
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling((Object) date0, 0);
        boolean boolean0 = DateUtils.truncatedEquals(date0, date1, 0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3124), 870, 0, 0, (-3124), 870);
        // Undeclared exception!
        try {
            DateUtils.round((Calendar) mockGregorianCalendar0, (-3124));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field -3124 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        mockGregorianCalendar0.setTimeInMillis(451L);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        boolean boolean0 = DateUtils.isSameInstant(calendar0, (Calendar) mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-86399549,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=451,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        mockGregorianCalendar0.setTimeInMillis(451L);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        boolean boolean0 = DateUtils.isSameInstant(calendar0, (Calendar) mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling((Object) date0, 0);
        boolean boolean0 = DateUtils.isSameInstant(date0, date1);
        assertEquals("Sat Jan 01 00:00:00 GMT 1", date1.toString());
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling((Object) date0, 0);
        boolean boolean0 = DateUtils.isSameInstant(date0, date1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling(date0, 2);
        boolean boolean0 = DateUtils.isSameDay(date0, date1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling(date0, 2);
        boolean boolean0 = DateUtils.isSameDay(date0, date1);
        assertEquals("Sat Feb 01 00:00:00 GMT 2014", date1.toString());
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling((Object) date0, 0);
        boolean boolean0 = DateUtils.isSameDay(date0, date1);
        assertEquals("Sat Jan 01 00:00:00 GMT 1", date1.toString());
    }

    @Test(timeout = 4000)
    public void test0059() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling((Object) date0, 0);
        boolean boolean0 = DateUtils.isSameDay(date0, date1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test00610() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        dateUtils_DateIterator0.hasNext();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167564800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test00711() throws Throwable {
        MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
        Date date0 = DateUtils.addWeeks(mockDate0, 828);
        mockDate0.setTime(1);
        int int0 = DateUtils.truncatedCompareTo((Date) mockDate0, date0, 1);
        assertEquals("Fri Dec 01 19:01:00 GMT 366", date0.toString());
    }

    @Test(timeout = 4000)
    public void test00712() throws Throwable {
        MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
        Date date0 = DateUtils.addWeeks(mockDate0, 828);
        mockDate0.setTime(1);
        int int0 = DateUtils.truncatedCompareTo((Date) mockDate0, date0, 1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test00813() throws Throwable {
        MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
        Date date0 = DateUtils.addWeeks(mockDate0, 828);
        int int0 = DateUtils.truncatedCompareTo((Date) mockDate0, date0, 1);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test00814() throws Throwable {
        MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
        Date date0 = DateUtils.addWeeks(mockDate0, 828);
        int int0 = DateUtils.truncatedCompareTo((Date) mockDate0, date0, 1);
        assertEquals("Fri Dec 01 19:01:00 GMT 366", date0.toString());
    }

    @Test(timeout = 4000)
    public void test00915() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2, (-250), (-1835));
        int int0 = DateUtils.truncatedCompareTo((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1, 12);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test01016() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        Date date0 = DateUtils.truncate((Object) calendar0, 1);
        assertEquals("Sat Feb 01 00:00:00 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test01117() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        mockGregorianCalendar0.setLenient(false);
        mockGregorianCalendar0.setTimeInMillis(451L);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test01218() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        mockGregorianCalendar0.setMinimalDaysInFirstWeek((-816));
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-816,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test01319() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        mockGregorianCalendar0.setFirstDayOfWeek((-239));
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-239,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test01420() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 1);
        Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 0);
        assertEquals("Thu Jan 01 00:00:00 GMT 1", date0.toString());
    }

    @Test(timeout = 4000)
    public void test01521() throws Throwable {
        String[] stringArray0 = new String[7];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDate("", stringArray0);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test01622() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 12, 12);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        long long0 = DateUtils.getFragmentInSeconds(date0, 12);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test01723() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        long long0 = DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, 14);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test01824() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3486, 1, 1618, 1618, (-1826), 2260);
        long long0 = DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, 1);
        assertEquals(366011L, long0);
    }

    @Test(timeout = 4000)
    public void test01925() throws Throwable {
        MockDate mockDate0 = new MockDate(6, 6, 6);
        long long0 = DateUtils.getFragmentInMilliseconds((Date) mockDate0, 6);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test02026() throws Throwable {
        MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
        long long0 = DateUtils.getFragmentInMilliseconds((Date) mockDate0, 1);
        assertEquals(1623660000L, long0);
    }

    @Test(timeout = 4000)
    public void test02127() throws Throwable {
        MockDate mockDate0 = new MockDate();
        long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 13);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test02228() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 1);
        long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 1);
        assertEquals(32L, long0);
    }

    @Test(timeout = 4000)
    public void test02329() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(1L);
        Date date0 = Date.from(instant0);
        Date date1 = DateUtils.addMonths(date0, 0);
        assertNotSame(date0, date1);
    }

    @Test(timeout = 4000)
    public void test02430() throws Throwable {
        MockDate mockDate0 = new MockDate(1, 1, 0, 2940, (-2659));
        // Undeclared exception!
        try {
            DateUtils.truncatedCompareTo((Date) mockDate0, (Date) null, (-15));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field -15 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02531() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        // Undeclared exception!
        try {
            DateUtils.truncatedCompareTo((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0, (-1170));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field -1170 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02632() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
        ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        Date date0 = gregorianCalendar0.getGregorianChange();
        // Undeclared exception!
        try {
            DateUtils.truncate(date0, 3);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Calendar value too large for accurate calculations
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02733() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.toCalendar((Date) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02834() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.setYears((Date) null, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test02935() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.setSeconds((Date) null, 1215);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03036() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.setMonths((Date) null, 673);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03137() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.setMinutes((Date) null, (-2516));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03238() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.setHours((Date) null, 30);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03339() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.setDays((Date) null, (-1429));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03440() throws Throwable {
        MockDate mockDate0 = new MockDate(280000000, 2, 280000000, 3, 1810, 1138);
        // Undeclared exception!
        try {
            DateUtils.round((Date) mockDate0, 1810);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Calendar value too large for accurate calculations
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03541() throws Throwable {
        String[] stringArray0 = new String[0];
        try {
            DateUtils.parseDateStrictly("8", stringArray0);
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Unable to parse the date: 8
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03642() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "QO%s&W+ZZ";
        // Undeclared exception!
        try {
            DateUtils.parseDateStrictly("QO%s&W+ZZ", stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern character 'Q'
            //
            verifyException("java.text.SimpleDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test03743() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "Could not iterate based on ";
        // Undeclared exception!
        try {
            DateUtils.parseDate("Could not iterate based on ", stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern character 'C'
            //
            verifyException("java.text.SimpleDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test03844() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMinutes((Date) null, 10);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test03945() throws Throwable {
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar0, 4);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 4 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04046() throws Throwable {
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            DateUtils.getFragmentInDays((Date) mockDate0, (-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment -1 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addYears((Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04248() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addWeeks((Date) null, 2485);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04349() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addSeconds((Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04450() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addMinutes((Date) null, 1584);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04551() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addMilliseconds((Date) null, (-1239));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04652() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addHours((Date) null, 5352);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04753() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addDays((Date) null, (-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04854() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
        // Undeclared exception!
        try {
            DateUtils.iterator((Calendar) mockGregorianCalendar0, 1001);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style 1001 is not valid.
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test04955() throws Throwable {
        MockDate mockDate0 = new MockDate(1448L);
        boolean boolean0 = DateUtils.truncatedEquals((Date) mockDate0, (Date) mockDate0, 9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05056() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Calendar) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05157() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, (long) 0);
        Date date0 = Date.from(instant0);
        Date date1 = DateUtils.truncate(date0, 12);
        assertEquals("Thu Jan 01 00:00:00 GMT 1970", date1.toString());
    }

    @Test(timeout = 4000)
    public void test05258() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test05359() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        boolean boolean0 = DateUtils.isSameDay(calendar0, calendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05460() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(280000000, 1, 1, 1, (-1));
        int int0 = DateUtils.truncatedCompareTo((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0, 5);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test05561() throws Throwable {
        MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
        int int0 = DateUtils.truncatedCompareTo((Date) mockDate0, (Date) mockDate0, 1);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test05662() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        // Undeclared exception!
        try {
            dateUtils_DateIterator0.next();
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test05763() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) zoneInfo0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, calendar0);
        assertFalse(calendar0.equals((Object) mockGregorianCalendar0));
    }

    @Test(timeout = 4000)
    public void test05764() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) zoneInfo0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, calendar0);
        dateUtils_DateIterator0.next();
        assertTrue(mockGregorianCalendar0.equals((Object) calendar0));
    }

    @Test(timeout = 4000)
    public void test05865() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 1, 1, (-1), 1001);
        Date date0 = DateUtils.ceiling((Date) mockDate0, 2);
        boolean boolean0 = DateUtils.truncatedEquals(date0, (Date) mockDate0, 5);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05866() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 1, 1, (-1), 1001);
        Date date0 = DateUtils.ceiling((Date) mockDate0, 2);
        boolean boolean0 = DateUtils.truncatedEquals(date0, (Date) mockDate0, 5);
        assertEquals("Thu Feb 01 00:00:00 GMT 1900", date0.toString());
    }

    @Test(timeout = 4000)
    public void test05967() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        boolean boolean0 = DateUtils.truncatedEquals(calendar0, calendar0, 0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06068() throws Throwable {
        Locale locale0 = new Locale("", "");
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        Calendar calendar1 = DateUtils.ceiling(calendar0, 0);
        boolean boolean0 = DateUtils.truncatedEquals(calendar1, calendar0, 14);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06069() throws Throwable {
        Locale locale0 = new Locale("", "");
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        Calendar calendar1 = DateUtils.ceiling(calendar0, 0);
        boolean boolean0 = DateUtils.truncatedEquals(calendar1, calendar0, 14);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
    }

    @Test(timeout = 4000)
    public void test06170() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        long long0 = DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, 14);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test06271() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
        long long0 = DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 13);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test06372() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        long long0 = DateUtils.getFragmentInMinutes(date0, 12);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test06473() throws Throwable {
        MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMilliseconds((Date) mockDate0, 10);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 10 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06574() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        // Undeclared exception!
        try {
            DateUtils.getFragmentInSeconds(calendar0, 9);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 9 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06675() throws Throwable {
        MockDate mockDate0 = new MockDate();
        long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 5);
        assertEquals(20L, long0);
    }

    @Test(timeout = 4000)
    public void test06776() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, 4);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 4 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06877() throws Throwable {
        MockDate mockDate0 = new MockDate(403L);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInSeconds((Date) mockDate0, 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 3 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test06978() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMinutes((Calendar) null, 1229);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07079() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.getFragmentInHours((Date) null, (-1166));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07180() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            DateUtils.iterator(object0, 0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not iterate based on java.lang.Object@3659b77
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07281() throws Throwable {
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) mockDate0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style 0 is not valid.
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07382() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) null, (-4149));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07483() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) mockGregorianCalendar0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style 0 is not valid.
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test07584() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, 0);
        Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 4);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test07685() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 5);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test07786() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 4);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test07887() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 3);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test07988() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        DateUtils.iterator(calendar0, 2);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test08089() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
        Iterator<Calendar> iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 1);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test08190() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Calendar) null, 12);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08291() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08392() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        Calendar calendar1 = DateUtils.round(calendar0, 9);
        Calendar calendar2 = DateUtils.ceiling(calendar1, 9);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392422400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
    }

    @Test(timeout = 4000)
    public void test08393() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        Calendar calendar1 = DateUtils.round(calendar0, 9);
        Calendar calendar2 = DateUtils.ceiling(calendar1, 9);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392465600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar2.toString());
    }

    @Test(timeout = 4000)
    public void test08494() throws Throwable {
        MockDate mockDate0 = new MockDate(1, (-76), (-76), 1, 0, (-76));
        Date date0 = DateUtils.ceiling((Object) mockDate0, 1001);
        assertEquals("Fri Jun 01 00:00:00 GMT 1894", date0.toString());
    }

    @Test(timeout = 4000)
    public void test08595() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        Calendar calendar1 = DateUtils.truncate(calendar0, 13);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
    }

    @Test(timeout = 4000)
    public void test08696() throws Throwable {
        MockDate mockDate0 = new MockDate(1, (-76), (-76), 0, 0, (-76));
        Date date0 = DateUtils.addMilliseconds(mockDate0, (-3412));
        Date date1 = DateUtils.ceiling((Object) date0, 1001);
        assertEquals("Sat Jun 16 00:00:00 GMT 1894", date1.toString());
    }

    @Test(timeout = 4000)
    public void test08697() throws Throwable {
        MockDate mockDate0 = new MockDate(1, (-76), (-76), 0, 0, (-76));
        Date date0 = DateUtils.addMilliseconds(mockDate0, (-3412));
        Date date1 = DateUtils.ceiling((Object) date0, 1001);
        assertEquals("Fri Jun 15 23:58:40 GMT 1894", date0.toString());
    }

    @Test(timeout = 4000)
    public void test08798() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
        ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        Date date0 = gregorianCalendar0.getGregorianChange();
        // Undeclared exception!
        try {
            DateUtils.ceiling(date0, (-608));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Calendar value too large for accurate calculations
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test08899() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        // Undeclared exception!
        try {
            DateUtils.ceiling((Object) mockGregorianCalendar0, 8);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 8 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test089100() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            DateUtils.ceiling(object0, 0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not find ceiling of for type: class java.lang.Object
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test090101() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.ceiling((Object) null, 763);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test091102() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.ceiling((Calendar) null, 4119);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test092103() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.ceiling((Date) null, 723);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test093104() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) "Could not find ceiling of for type: ", 8);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not truncate Could not find ceiling of for type:
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test094105() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1824, 1824, 1824, 1824, 1824);
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) mockGregorianCalendar0, 1824);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 1824 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test095106() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) null, 3598);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test096107() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, (-1698), 0, 280000000);
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) mockDate0, 30);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 30 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test097108() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncatedEquals((Date) null, (Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test098109() throws Throwable {
        Object object0 = new Object();
        // Undeclared exception!
        try {
            DateUtils.round(object0, 111);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not round java.lang.Object@9249ea
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test099110() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.round((Object) mockGregorianCalendar0, 1581);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 1581 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test100111() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Object) null, 10);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test101112() throws Throwable {
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            DateUtils.round((Object) mockDate0, 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 3 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test102113() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Calendar) null, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test103114() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167392000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test103115() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameDay(calendar0, (Calendar) mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test104116() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Date) null, (-2836));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test105117() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.round((Date) mockDate0, 5);
        long long0 = DateUtils.getFragmentInHours(date0, 5);
        assertEquals("Sat Feb 15 00:00:00 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test105118() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.round((Date) mockDate0, 5);
        long long0 = DateUtils.getFragmentInHours(date0, 5);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test106119() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.setMilliseconds((Date) null, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test107120() throws Throwable {
        String[] stringArray0 = new String[9];
        stringArray0[0] = "";
        // Undeclared exception!
        try {
            DateUtils.parseDate("$9-u,a2M&{ w8H].w", stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test108121() throws Throwable {
        String[] stringArray0 = new String[8];
        stringArray0[0] = "ZZ";
        stringArray0[1] = "ZZ";
        stringArray0[2] = "ZZ";
        stringArray0[3] = "ZZ";
        stringArray0[4] = "ZZ";
        stringArray0[5] = "ZZ";
        stringArray0[6] = "ZZ";
        stringArray0[7] = "ZZ";
        try {
            DateUtils.parseDate("ZZ", stringArray0);
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Unable to parse the date: ZZ
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test109122() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.parseDate("", (String[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Date and Patterns must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test110123() throws Throwable {
        String[] stringArray0 = new String[6];
        // Undeclared exception!
        try {
            DateUtils.parseDateStrictly((String) null, stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Date and Patterns must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test111124() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, (-3412), 1);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112125() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test113126() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test114127() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 12);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409320000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=22,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test114128() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 12);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test115129() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        // Undeclared exception!
        try {
            DateUtils.isSameInstant(calendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test116130() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        boolean boolean0 = DateUtils.isSameInstant(calendar0, calendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test117131() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test118132() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling((Object) date0, 0);
        boolean boolean0 = DateUtils.isSameInstant(date1, date0);
        assertEquals("Sat Jan 01 00:00:00 GMT 1", date1.toString());
    }

    @Test(timeout = 4000)
    public void test118133() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling((Object) date0, 0);
        boolean boolean0 = DateUtils.isSameInstant(date1, date0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test119134() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        boolean boolean0 = DateUtils.isSameInstant(date0, date0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test120135() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Date) null, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test121136() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling((Object) date0, 1001);
        boolean boolean0 = DateUtils.isSameDay(date0, date1);
        assertEquals("Sun Feb 16 00:00:00 GMT 2014", date1.toString());
    }

    @Test(timeout = 4000)
    public void test121137() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.ceiling((Object) date0, 1001);
        boolean boolean0 = DateUtils.isSameDay(date0, date1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test122138() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, (-3412), 1);
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test123139() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test124140() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test125141() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        boolean boolean0 = DateUtils.isSameDay(date0, date0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test126142() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Date) null, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test127143() throws Throwable {
        MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
        Date date0 = DateUtils.setYears(mockDate0, (-1));
        assertEquals("Fri Jan 18 19:01:00 GMT 351", date0.toString());
    }

    @Test(timeout = 4000)
    public void test128144() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.setMilliseconds(mockDate0, 519);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test129145() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, 1090, (-1), 1090, 597);
        Calendar calendar0 = DateUtils.toCalendar(mockDate0);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMinutes(calendar0, (-1443));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment -1443 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test130146() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
        long long0 = DateUtils.getFragmentInHours((Calendar) mockGregorianCalendar0, 2);
        assertEquals(356L, long0);
    }

    @Test(timeout = 4000)
    public void test131147() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDateStrictly("", stringArray0);
        Date date1 = DateUtils.setSeconds(date0, 0);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
    }

    @Test(timeout = 4000)
    public void test132148() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Calendar calendar0 = MockCalendar.getInstance(dateUtils0.UTC_TIME_ZONE);
        // Undeclared exception!
        try {
            DateUtils.truncatedEquals((Calendar) null, calendar0, 44);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test133149() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addSeconds(mockDate0, 1582);
        assertEquals("Fri Feb 14 20:47:43 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test134150() throws Throwable {
        MockDate mockDate0 = new MockDate((-1756), 2482, 1, 1891, 1);
        Date date0 = DateUtils.addDays(mockDate0, 2482);
        assertEquals("Tue Nov 04 19:01:00 GMT 357", date0.toString());
    }

    @Test(timeout = 4000)
    public void test135151() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.setDays(mockDate0, 1);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test136152() throws Throwable {
        MockDate mockDate0 = new MockDate();
        long long0 = DateUtils.getFragmentInMinutes((Date) mockDate0, 1);
        assertEquals(66021L, long0);
    }

    @Test(timeout = 4000)
    public void test137153() throws Throwable {
        MockDate mockDate0 = new MockDate(931, (-9), 931, 931, 9);
        Date date0 = DateUtils.addYears(mockDate0, (-4));
        assertEquals("Wed Nov 24 19:09:00 GMT 2832", date0.toString());
    }

    @Test(timeout = 4000)
    public void test138154() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addMonths((Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test139155() throws Throwable {
        MockDate mockDate0 = new MockDate();
        long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 2);
        assertEquals(14L, long0);
    }

    @Test(timeout = 4000)
    public void test140156() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1868), (-1868), 2140793667, (-2338), 0);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInDays((Calendar) mockGregorianCalendar0, 2950);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 2950 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test141157() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.setMinutes(mockDate0, 3);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test142158() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(dateUtils0.UTC_TIME_ZONE);
        long long0 = DateUtils.getFragmentInMilliseconds((Calendar) mockGregorianCalendar0, 6);
        assertEquals(73281320L, long0);
    }

    @Test(timeout = 4000)
    public void test143159() throws Throwable {
        MockDate mockDate0 = new MockDate();
        long long0 = DateUtils.getFragmentInSeconds((Date) mockDate0, 1);
        assertEquals(3961281L, long0);
    }

    @Test(timeout = 4000)
    public void test144160() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addMinutes(mockDate0, 4837);
        assertEquals("Tue Feb 18 04:58:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test145161() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.setMonths(mockDate0, 1001);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test146162() throws Throwable {
        String[] stringArray0 = new String[4];
        // Undeclared exception!
        try {
            DateUtils.parseDateStrictly("", stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test147163() throws Throwable {
        MockDate mockDate0 = new MockDate(1433, 1433, (-155), 7, 0, 0);
        // Undeclared exception!
        try {
            DateUtils.getFragmentInMilliseconds((Date) mockDate0, 7);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The fragment 7 is not supported
            //
            verifyException("org.apache.commons.lang3.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test148164() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        long long0 = DateUtils.getFragmentInSeconds(calendar0, 11);
        assertEquals(1281L, long0);
    }

    @Test(timeout = 4000)
    public void test149165() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addHours(mockDate0, 2);
        assertEquals("Fri Feb 14 22:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test150166() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.setHours(mockDate0, 2321);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test151167() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
        // Undeclared exception!
        try {
            dateUtils_DateIterator0.remove();
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang3.time.DateUtils$DateIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test152168() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        Calendar calendar0 = MockCalendar.getInstance(dateUtils0.UTC_TIME_ZONE);
        DateUtils.iterator(calendar0, 6);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }
}
