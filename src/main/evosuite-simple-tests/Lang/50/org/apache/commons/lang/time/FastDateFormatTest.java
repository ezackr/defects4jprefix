/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 03:54:28 GMT 2023
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.junit.runner.RunWith;

public class FastDateFormatTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0006() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0007() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0008() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0009() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test00010() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test00011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test00012() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test00013() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test00014() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test00115() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test00116() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test00117() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test00118() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test00119() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test00120() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test00121() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test00122() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test00123() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals("'#", string0);
    }

    @Test(timeout = 4000)
    public void test00124() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test00125() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test00126() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test00127() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test00128() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test00129() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test00130() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test00131() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test00132() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test00133() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        assertEquals(6, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test00234() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test00235() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test00236() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test00237() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test00238() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test00239() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test00240() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test00241() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test00242() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test00243() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test00244() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test00245() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test00246() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test00247() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test00248() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test00249() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test00250() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test00251() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test00252() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test00253() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test00254() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test00255() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test00256() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test00257() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test00258() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test00259() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test00260() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test00261() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test00262() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test00263() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test00264() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test00265() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test00266() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test00267() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test00268() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test00269() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test00270() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test00271() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test00272() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test00273() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test00274() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test00275() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test00376() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test00377() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test00378() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test00379() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test00380() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test00381() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test00382() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test00383() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test00384() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test00385() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test00386() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test00387() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test00388() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test00389() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test00390() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test00391() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test00392() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test00393() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test00394() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test00395() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test00396() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test00397() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test00398() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test00399() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test003100() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test003101() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test003102() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test003103() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test003104() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test003105() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test003106() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test003107() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test003108() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test003109() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test003110() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test003111() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test003112() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test003113() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test003114() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test003115() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test004116() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test004117() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test004118() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("GMT-18:00", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test004119() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test004120() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test004121() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test004122() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test004123() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test004124() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test004125() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test004126() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("GMT-18:00", string0);
    }

    @Test(timeout = 4000)
    public void test004127() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test004128() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("GMT-18:00", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test004129() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test004130() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test004131() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test004132() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test004133() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test004134() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test005135() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test005136() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test005137() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertEquals("0\"ED.Cahr1Cm/{Vt", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test005138() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertEquals(2596, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test005139() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test005140() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test005141() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test005142() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test005143() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test005144() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test005145() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test005146() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test005147() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("0\"ED.Cahr1Cm/{Vt", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test005148() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(2596, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test005149() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test005150() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test005151() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test005152() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test005153() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test005154() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test005155() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test005156() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test005157() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test005158() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test005159() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test005160() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("0\"ED.Cahr1Cm/{Vt", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test005161() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(2596, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test005162() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test005163() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test005164() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test005165() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test005166() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test005167() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("0\"ED.Cahr1Cm/{Vt", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test005168() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(2596, timeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test005169() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("java.util.SimpleTimeZone[id=0\"ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test005170() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, timeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test005171() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertFalse(timeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test005172() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertSame(simpleTimeZone0, timeZone0);
    }

    @Test(timeout = 4000)
    public void test005173() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertSame(timeZone0, simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test006174() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test006175() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test006176() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test006177() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test006178() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test006179() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test006180() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test006181() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test006182() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test006183() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test006184() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test006185() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test006186() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test006187() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test006188() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test006189() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test006190() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test006191() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test006192() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test006193() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test006194() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test006195() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test006196() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test006197() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test006198() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test006199() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test006200() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test006201() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test006202() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test006203() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test006204() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test006205() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test006206() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, timeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test006207() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("IH2", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test006208() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals(0, timeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test006209() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test006210() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertFalse(timeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test006211() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertSame(simpleTimeZone0, timeZone0);
    }

    @Test(timeout = 4000)
    public void test006212() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        assertSame(timeZone0, simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test007213() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test007214() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test007215() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test007216() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test007217() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test007218() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test007219() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test007220() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test007221() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test007222() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test007223() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test007224() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test007225() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test007226() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test007227() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test007228() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test007229() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test007230() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test007231() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test007232() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test007233() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test007234() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test007235() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test007236() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test007237() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test007238() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test007239() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test007240() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test007241() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test007242() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test007243() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test007244() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test007245() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test007246() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test007247() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test007248() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test008249() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test008250() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test008251() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test008252() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test008253() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test008254() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test008255() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test008256() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test008257() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test008258() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test008259() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test008260() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test008261() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test008262() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test008263() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test008264() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test008265() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test008266() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test008267() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test008268() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test008269() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test008270() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test008271() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test008272() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test008273() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test008274() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test008275() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test008276() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test008277() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test008278() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test008279() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test008280() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test008281() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test008282() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test008283() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test009284() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test009285() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test009286() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test009287() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test009288() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test009289() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test009290() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test009291() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test009292() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals(3193, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test009293() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test009294() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test009295() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test009296() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test009297() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test009298() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test009299() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test009300() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test009301() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test009302() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test009303() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test009304() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test009305() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test009306() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test009307() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test009308() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3193, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test009309() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test009310() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test009311() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test009312() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test009313() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals(46, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test009314() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test009315() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test010316() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test010317() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test010318() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test010319() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test010320() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test010321() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test010322() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test010323() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test011324() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test011325() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test011326() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test011327() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test011328() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test011329() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test011330() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test011331() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test011332() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test011333() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test011334() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test011335() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test011336() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test011337() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test011338() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test011339() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test011340() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test011341() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test011342() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test011343() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals("'XETJC", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test011344() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test012345() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test012346() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test012347() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test012348() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test012349() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test012350() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test012351() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test012352() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test013353() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test013354() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test013355() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test013356() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test013357() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test013358() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test013359() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test013360() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test013361() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test013362() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test013363() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test013364() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test013365() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test013366() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test013367() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test013368() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test013369() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test013370() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test013371() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test013372() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test013373() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test013374() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test013375() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test013376() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test013377() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test013378() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test013379() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test013380() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test013381() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test013382() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test013383() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test013384() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test013385() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test013386() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test013387() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test013388() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test013389() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test014390() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test014391() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test014392() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test014393() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test014394() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test014395() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test014396() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test014397() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test014398() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test014399() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test014400() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test014401() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test014402() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test014403() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test014404() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test014405() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test014406() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test014407() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test014408() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test014409() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test014410() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test014411() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test014412() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test014413() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test014414() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test014415() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test014416() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test014417() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test014418() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test014419() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test014420() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test014421() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test014422() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test014423() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test014424() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test014425() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test014426() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test014427() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test015428() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test015429() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test015430() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test015431() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test015432() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test015433() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test015434() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test015435() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test015436() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test015437() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test015438() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test015439() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test015440() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test015441() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test015442() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test015443() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        assertEquals("A:=", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test015444() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test015445() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test015446() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test015447() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test015448() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test015449() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test015450() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test015451() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test015452() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test015453() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test015454() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test015455() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test015456() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("A:=2/14/14 8:21 PM", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test015457() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(18, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test015458() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals("A:=2/14/14 8:21 PM", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test015459() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertEquals(18, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test015460() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test015461() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Calendar calendar0 = MockCalendar.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test016462() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test016463() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test016464() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test016465() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test016466() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test016467() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test016468() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test016469() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test016470() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test016471() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test016472() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test016473() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test016474() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test016475() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test016476() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test016477() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test016478() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test016479() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test016480() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test016481() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test016482() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test016483() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test016484() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test016485() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test016486() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test016487() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test016488() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test016489() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test016490() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test016491() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test016492() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test016493() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test016494() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test017495() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test017496() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("fr_FR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test017497() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test017498() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test017499() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("FRA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test017500() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("FR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test017501() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test017502() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test017503() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test017504() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test017505() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test017506() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test017507() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("fr_FR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test017508() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test017509() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test017510() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("FRA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test017511() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("FR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test017512() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test017513() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test017514() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test017515() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test017516() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test017517() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test017518() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test017519() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test017520() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test017521() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test017522() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("fr_FR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test017523() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test017524() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test017525() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("FRA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test017526() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("FR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test017527() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test017528() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test017529() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test017530() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test018531() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test018532() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test018533() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test018534() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test018535() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test018536() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test018537() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test018538() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test018539() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test018540() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test018541() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test018542() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test018543() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test018544() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test018545() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test018546() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test018547() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test018548() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test018549() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test018550() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test018551() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test018552() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        int[] intArray0 = new int[3];
        // Undeclared exception!
        try {
            fastDateFormat0.parseToken("", intArray0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test019553() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test019554() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test019555() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test019556() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test019557() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test019558() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test019559() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test019560() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test019561() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        // Undeclared exception!
        try {
            fastDateFormat0.parseToken("", (int[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test020562() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test020563() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test020564() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test020565() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test020566() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test020567() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test020568() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test020569() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test021570() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test021571() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test021572() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
        Locale locale0 = new Locale("n;P:<ffkD7dzT1_@'");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test021573() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
        Locale locale0 = new Locale("n;P:<ffkD7dzT1_@'");
        assertEquals("n;p:<ffkd7dzt1_@'", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test021574() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
        Locale locale0 = new Locale("n;P:<ffkD7dzT1_@'");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test021575() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
        Locale locale0 = new Locale("n;P:<ffkD7dzT1_@'");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test021576() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
        Locale locale0 = new Locale("n;P:<ffkD7dzT1_@'");
        assertEquals("n;p:<ffkd7dzt1_@'", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test021577() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
        Locale locale0 = new Locale("n;P:<ffkD7dzT1_@'");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test021578() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("n;P:<ffkD7dzT1_@'");
        Locale locale0 = new Locale("n;P:<ffkD7dzT1_@'");
        // Undeclared exception!
        try {
            FastDateFormat.getTimeZoneDisplay(timeZone0, false, 13, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal style: 13
        }
    }

    @Test(timeout = 4000)
    public void test022579() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test022580() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test022581() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test022582() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test022583() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test022584() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test022585() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test022586() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test022587() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test022588() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(2623, timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 2623
        }
    }

    @Test(timeout = 4000)
    public void test023589() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test023590() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test023591() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test023592() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test023593() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test023594() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test023595() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 15
        }
    }

    @Test(timeout = 4000)
    public void test024596() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test024597() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test024598() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test024599() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test024600() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test024601() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test024602() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test024603() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(739, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 739
        }
    }

    @Test(timeout = 4000)
    public void test025604() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(100);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 100
        }
    }

    @Test(timeout = 4000)
    public void test026605() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test026606() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test026607() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[");
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(16, 1668, timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 1668
        }
    }

    @Test(timeout = 4000)
    public void test027608() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(13, 31);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 31
        }
    }

    @Test(timeout = 4000)
    public void test028609() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test028610() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=-186,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test028611() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test028612() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test028613() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), "");
        assertEquals((-186), simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test028614() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test028615() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), "");
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(1667, (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 1667
        }
    }

    @Test(timeout = 4000)
    public void test029616() throws Throwable {
        Locale locale0 = new Locale("elDq# !hTb");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test029617() throws Throwable {
        Locale locale0 = new Locale("elDq# !hTb");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test029618() throws Throwable {
        Locale locale0 = new Locale("elDq# !hTb");
        assertEquals("eldq# !htb", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test029619() throws Throwable {
        Locale locale0 = new Locale("elDq# !hTb");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test029620() throws Throwable {
        Locale locale0 = new Locale("elDq# !hTb");
        assertEquals("eldq# !htb", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test029621() throws Throwable {
        Locale locale0 = new Locale("elDq# !hTb");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test029622() throws Throwable {
        Locale locale0 = new Locale("elDq# !hTb");
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(1502, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 1502
        }
    }

    @Test(timeout = 4000)
    public void test030623() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance((-2289));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -2289
        }
    }

    @Test(timeout = 4000)
    public void test031624() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test031625() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test031626() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test031627() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test031628() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test031629() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test031630() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test031631() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test031632() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(10, 835, 0);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test031633() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(10, 835, 0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test032634() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test032635() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test032636() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test032637() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test032638() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test032639() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test032640() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test032641() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test032642() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.format((Date) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test033643() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test033644() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test033645() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test033646() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test033647() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test033648() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test033649() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test033650() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test033651() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        // Undeclared exception!
        try {
            fastDateFormat0.format(0L, (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test034652() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test034653() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test034654() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test034655() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test034656() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test034657() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test034658() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test034659() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test034660() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test034661() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test034662() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test034663() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test034664() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test034665() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test034666() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test034667() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test034668() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test034669() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test034670() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test034671() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test034672() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test034673() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test034674() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test034675() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test034676() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        // Undeclared exception!
        try {
            fastDateFormat0.format(0L);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test035677() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test035678() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test035679() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test035680() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test035681() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test035682() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test035683() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test035684() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test035685() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test035686() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        assertEquals("No date time pattern for locale: ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test035687() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        assertEquals(33, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test035688() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        // Undeclared exception!
        try {
            fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test036689() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test036690() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test036691() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test036692() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test036693() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test036694() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test036695() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test036696() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test036697() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test036698() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test036699() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test036700() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test036701() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test036702() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test036703() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test037704() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test037705() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test037706() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test037707() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test037708() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test037709() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test037710() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test037711() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test037712() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test037713() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test037714() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test037715() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test037716() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test037717() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test037718() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test037719() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test037720() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test037721() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test037722() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test037723() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test038724() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test038725() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test038726() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test038727() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test038728() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test038729() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test038730() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test038731() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test038732() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test038733() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test038734() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test038735() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test038736() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test038737() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test038738() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test038739() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test038740() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test038741() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test038742() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test038743() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test038744() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test039745() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test039746() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test039747() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test039748() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-1,startTime=-1,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=4682,endTime=-2182,endTimeMode=-2182]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test039749() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test039750() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test039751() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test039752() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test039753() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test039754() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test039755() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test039756() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test039757() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test039758() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-1,startTime=-1,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=4682,endTime=-2182,endTimeMode=-2182]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test039759() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test039760() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test039761() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test039762() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test039763() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test039764() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test039765() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test039766() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test039767() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test039768() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test039769() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test039770() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test039771() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test039772() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test039773() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test039774() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test039775() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test039776() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test039777() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test039778() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test039779() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test039780() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test039781() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test039782() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-1,startTime=-1,startTimeMode=0,endMode=0,endMonth=-1,endDay=0,endDayOfWeek=4682,endTime=-2182,endTimeMode=-2182]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test039783() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test039784() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test039785() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test039786() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test039787() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test039788() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test039789() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test039790() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test039791() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test039792() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test039793() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test039794() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test039795() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test039796() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test039797() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test039798() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test039799() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test039800() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test039801() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test039802() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test039803() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test040804() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test040805() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test040806() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test040807() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test040808() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test040809() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test040810() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test040811() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test040812() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test040813() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test040814() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("US", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test040815() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("USA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test040816() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test040817() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test040818() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        assertEquals("en_US", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test040819() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test040820() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test041821() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance((-1105), 0, (TimeZone) null, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -1105
        }
    }

    @Test(timeout = 4000)
    public void test042822() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test042823() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test042824() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test042825() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("KOR", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test042826() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test042827() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("ko_KR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test042828() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test042829() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("KR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test042830() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test042831() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test042832() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test042833() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test042834() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test042835() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test042836() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test042837() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("KOR", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test042838() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test042839() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("ko_KR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test042840() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test042841() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("KR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test042842() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test042843() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h:mm:ss", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test042844() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test042845() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test043846() throws Throwable {
        Locale locale0 = new Locale("");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test043847() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test043848() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test043849() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test043850() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test043851() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test043852() throws Throwable {
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test043853() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test043854() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test043855() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test043856() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test043857() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test043858() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test043859() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test043860() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test043861() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test043862() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test043863() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test043864() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test043865() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test043866() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test044867() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test044868() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test044869() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test044870() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test044871() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test044872() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test044873() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test044874() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test044875() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test044876() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test044877() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test044878() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test044879() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test044880() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test044881() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test044882() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test044883() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test044884() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test044885() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=45,endDay=0,endDayOfWeek=45,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test044886() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test044887() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test044888() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test044889() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test044890() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test044891() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test044892() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test044893() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test044894() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test044895() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test044896() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test044897() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test044898() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test045899() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test045900() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test045901() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test045902() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test045903() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test045904() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test045905() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test045906() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test045907() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test045908() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test045909() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test045910() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test045911() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test045912() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test045913() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test045914() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test045915() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test045916() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test045917() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test045918() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test045919() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test046920() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test046921() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test046922() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test046923() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test046924() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test046925() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test046926() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test046927() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test046928() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test046929() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=118,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=7,startTime=2,startTimeMode=3,endMode=0,endMonth=-424,endDay=0,endDayOfWeek=3,endTime=1102,endTimeMode=7]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test046930() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test046931() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test046932() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test046933() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test046934() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test046935() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test046936() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test046937() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test046938() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test046939() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test046940() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test046941() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test046942() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test046943() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test046944() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test046945() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=118,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=7,startTime=2,startTimeMode=3,endMode=0,endMonth=-424,endDay=0,endDayOfWeek=3,endTime=1102,endTimeMode=7]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test046946() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test046947() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test046948() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test046949() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test046950() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test046951() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test047952() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(103, (TimeZone) null, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 103
        }
    }

    @Test(timeout = 4000)
    public void test048953() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test048954() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test048955() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test048956() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test048957() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test048958() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test048959() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test048960() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test048961() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test048962() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test048963() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test048964() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test048965() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test048966() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test048967() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test048968() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test048969() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test048970() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test048971() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test048972() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test048973() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("Tue Oct 10 00:00:00 GMT 1899", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test048974() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(17, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test048975() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("10/10/99 12:00 AM", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test048976() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(17, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test048977() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("10/10/99 12:00 AM", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test048978() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test048979() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(1, (-1), (-416));
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test049980() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test049981() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test049982() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test049983() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test049984() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test049985() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test049986() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test049987() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test049988() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test049989() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("1/1/70 12:00 AM", string0);
    }

    @Test(timeout = 4000)
    public void test049990() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test049991() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test049992() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test049993() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test049994() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test049995() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test049996() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test049997() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test049998() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test050999() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0501000() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0501001() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0501002() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0501003() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0501004() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0501005() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0501006() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0501007() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test0501008() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("Friday, February 28, 0122 11:59:00 PM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test0501009() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0501010() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0501011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0501012() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0501013() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0501014() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0501015() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0501016() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0501017() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58312224060000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=122,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0501018() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0501019() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0501020() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0511021() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test0511022() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test0511023() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0511024() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0511025() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0511026() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0511027() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0511028() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0511029() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals("sa", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0511030() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0511031() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0511032() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0511033() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0511034() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0511035() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0511036() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test0511037() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0511038() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0511039() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertEquals("sa", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test0511040() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertEquals(6, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0511041() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0511042() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test0511043() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0511044() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0511045() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0511046() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0511047() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0511048() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0511049() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0511050() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0511051() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0511052() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("UTC", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0511053() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("sa", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0511054() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0511055() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0511056() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0511057() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("sa", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test0511058() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(6, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0511059() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test0511060() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0511061() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test0511062() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("sa", timeZone0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test0521063() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0521064() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0521065() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0521066() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0521067() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0521068() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0521069() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0521070() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0521071() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0521072() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0521073() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0521074() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0521075() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0521076() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0521077() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0521078() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0521079() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0521080() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0521081() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0521082() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test0521083() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0521084() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0521085() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0521086() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0521087() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0521088() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0521089() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0521090() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0521091() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test0521092() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0521093() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test0521094() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0521095() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0521096() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0521097() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0521098() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0521099() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0521100() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0521101() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0521102() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0521103() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0521104() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0521105() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0521106() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0521107() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0521108() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0521109() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0521110() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0521111() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0521112() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0521113() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0521114() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test0521115() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test0521116() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0521117() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test0521118() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test0531119() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0531120() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0531121() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0531122() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0531123() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0531124() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0531125() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0531126() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0531127() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0531128() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0531129() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0531130() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0531131() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0531132() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0531133() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0531134() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0531135() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0531136() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0531137() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0531138() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0531139() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0531140() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0531141() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0531142() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0531143() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0531144() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0531145() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0531146() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0531147() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0531148() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0531149() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0531150() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0531151() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0531152() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0531153() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        boolean boolean0 = fastDateFormat0.equals((Object) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0541154() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test0541155() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0541156() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0541157() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0541158() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0541159() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0541160() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0541161() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0541162() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0541163() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0541164() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0541165() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0541166() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0541167() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0541168() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0541169() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0541170() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0541171() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0541172() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0541173() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0541174() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test0541175() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test0541176() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0541177() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test0541178() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0541179() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0541180() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0541181() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0541182() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("8:21:21 PM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test0541183() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0541184() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0541185() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0541186() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0541187() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0541188() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0541189() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0541190() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("IH2", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0541191() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0541192() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0541193() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0541194() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0541195() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0541196() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test0541197() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0541198() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test0541199() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0541200() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0541201() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0541202() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0551203() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0551204() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0551205() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0551206() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0551207() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0551208() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0551209() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0551210() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0551211() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0551212() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0551213() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0551214() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0551215() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0551216() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0551217() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0551218() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0551219() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0551220() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0551221() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0551222() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0551223() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0551224() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0551225() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0551226() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0551227() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0551228() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        StringBuffer stringBuffer0 = new StringBuffer("");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test0551229() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        StringBuffer stringBuffer0 = new StringBuffer("");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test0551230() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        StringBuffer stringBuffer0 = new StringBuffer("");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        assertEquals(0, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test0551231() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        StringBuffer stringBuffer0 = new StringBuffer("");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test0551232() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = fastDateFormat0.getLocale();
        StringBuffer stringBuffer0 = new StringBuffer("");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) locale0, stringBuffer0, fieldPosition0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: java.util.Locale
        }
    }

    @Test(timeout = 4000)
    public void test0561233() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0561234() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0561235() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0561236() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0561237() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0561238() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0561239() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0561240() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0561241() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        assertEquals((-1150L), (long) long0);
    }

    @Test(timeout = 4000)
    public void test0561242() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        assertNotNull(long0);
    }

    @Test(timeout = 4000)
    public void test0561243() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0561244() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0561245() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0561246() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0561247() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertNotNull(attributedCharacterIterator0);
    }

    @Test(timeout = 4000)
    public void test0561248() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0561249() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0561250() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0561251() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(0, attributedCharacterIterator0.getRunStart());
    }

    @Test(timeout = 4000)
    public void test0561252() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(0, attributedCharacterIterator0.getIndex());
    }

    @Test(timeout = 4000)
    public void test0561253() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(17, attributedCharacterIterator0.getRunLimit());
    }

    @Test(timeout = 4000)
    public void test0561254() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(17, attributedCharacterIterator0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test0561255() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1150L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        assertEquals(0, attributedCharacterIterator0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test0571256() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0571257() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0571258() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0571259() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0571260() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0571261() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0571262() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0571263() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0571264() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0571265() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0571266() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0571267() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0571268() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0571269() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0571270() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0571271() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0571272() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0571273() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0571274() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0571275() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0571276() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0571277() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test0571278() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0571279() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0571280() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0571281() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test0571282() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test0571283() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test0571284() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test0571285() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0571286() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0571287() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0571288() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0571289() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0571290() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0571291() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0571292() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0571293() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0571294() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0571295() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0571296() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0571297() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0571298() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0571299() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61614000000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0571300() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0571301() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0571302() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0571303() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(35, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0571304() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("0017\uB144 7\uC6D4 15\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0571305() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test0571306() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test0571307() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test0571308() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals("0017\uB144 7\uC6D4 15\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0571309() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertEquals(35, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0571310() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0571311() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0581312() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0581313() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0581314() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0581315() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0581316() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0581317() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0581318() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0581319() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0581320() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0581321() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0581322() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0581323() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0581324() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0581325() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0581326() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0581327() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0581328() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0581329() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0581330() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0581331() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0581332() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0581333() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0581334() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
        assertEquals("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0581335() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
        assertEquals(34, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0581336() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
        FieldPosition fieldPosition0 = new FieldPosition((-542));
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test0581337() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
        FieldPosition fieldPosition0 = new FieldPosition((-542));
        assertEquals("java.text.FieldPosition[field=-542,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
    }

    @Test(timeout = 4000)
    public void test0581338() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
        FieldPosition fieldPosition0 = new FieldPosition((-542));
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test0581339() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
        FieldPosition fieldPosition0 = new FieldPosition((-542));
        assertEquals((-542), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test0581340() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
        FieldPosition fieldPosition0 = new FieldPosition((-542));
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test0581341() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT");
        FieldPosition fieldPosition0 = new FieldPosition((-542));
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) null, stringBuffer0, fieldPosition0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: <null>
        }
    }

    @Test(timeout = 4000)
    public void test0591342() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0591343() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0591344() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0591345() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0591346() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0591347() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0591348() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0591349() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertNotNull(linkedList0);
    }

    @Test(timeout = 4000)
    public void test0591350() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test0591351() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test0591352() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0591353() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals(3193, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0591354() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0591355() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0591356() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0591357() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        assertNotNull(parsePosition0);
    }

    @Test(timeout = 4000)
    public void test0591358() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test0591359() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        assertEquals((-1), parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test0591360() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        assertEquals(1, parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test0591361() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0591362() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0591363() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0591364() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0591365() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0591366() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0591367() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0591368() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0591369() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0591370() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0591371() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0591372() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0591373() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3193, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0591374() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0591375() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=3193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0591376() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0591377() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0591378() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0591379() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        ParsePosition parsePosition0 = new ParsePosition(1);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0601380() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("HmEwv:<G%uK-&");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
        }
    }

    @Test(timeout = 4000)
    public void test0611381() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("kv");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
        }
    }

    @Test(timeout = 4000)
    public void test0621382() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("|~#+%|r<");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: r
        }
    }

    @Test(timeout = 4000)
    public void test0631383() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(".hp7jH`/1_94X/S#");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: p
        }
    }

    @Test(timeout = 4000)
    public void test0641384() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test0641385() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertEquals("org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0641386() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0641387() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0641388() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0641389() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0641390() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField", (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
        }
    }

    @Test(timeout = 4000)
    public void test0651391() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("<null>");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: n
        }
    }

    @Test(timeout = 4000)
    public void test0661392() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("F|&l");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: l
        }
    }

    @Test(timeout = 4000)
    public void test0671393() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("*y%[}sjm@y", (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: j
        }
    }

    @Test(timeout = 4000)
    public void test0681394() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("$h]hz[im+[", (TimeZone) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: i
        }
    }

    @Test(timeout = 4000)
    public void test0691395() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test0691396() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0691397() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(".y^g%D]]q!ZT", timeZone0, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: g
        }
    }

    @Test(timeout = 4000)
    public void test0701398() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("@ye");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: e
        }
    }

    @Test(timeout = 4000)
    public void test0711399() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0711400() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0711401() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0711402() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0711403() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0711404() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0711405() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0711406() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("&c+c", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: c
        }
    }

    @Test(timeout = 4000)
    public void test0721407() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test0721408() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0721409() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        Locale locale0 = new Locale("4|<9 ,H| Do&/", "IUgG1T[MPmf6/yGLlvX", "km\"=7X{|rJ");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0721410() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        Locale locale0 = new Locale("4|<9 ,H| Do&/", "IUgG1T[MPmf6/yGLlvX", "km\"=7X{|rJ");
        assertEquals("IUGG1T[MPMF6/YGLLVX", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0721411() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        Locale locale0 = new Locale("4|<9 ,H| Do&/", "IUgG1T[MPmf6/yGLlvX", "km\"=7X{|rJ");
        assertEquals("km\"=7X{|rJ", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0721412() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        Locale locale0 = new Locale("4|<9 ,H| Do&/", "IUgG1T[MPmf6/yGLlvX", "km\"=7X{|rJ");
        assertEquals("4|<9 ,h| do&/_IUGG1T[MPMF6/YGLLVX_km\"=7X{|rJ", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0721413() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        Locale locale0 = new Locale("4|<9 ,H| Do&/", "IUgG1T[MPmf6/yGLlvX", "km\"=7X{|rJ");
        assertEquals("4|<9 ,h| do&/", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0721414() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        Locale locale0 = new Locale("4|<9 ,H| Do&/", "IUgG1T[MPmf6/yGLlvX", "km\"=7X{|rJ");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("km\"=7X{|rJ", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: X
        }
    }

    @Test(timeout = 4000)
    public void test0731415() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        assertNotNull(zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test0731416() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        assertNotNull(zoneId0);
    }

    @Test(timeout = 4000)
    public void test0731417() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test0731418() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        assertEquals("GMT-18:00", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0731419() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0731420() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0731421() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0731422() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0731423() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0731424() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals("GMT-18:00", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0731425() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0731426() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0731427() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        assertEquals("W9", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0741428() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(")?V4+K`M;J xIF");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: V
        }
    }

    @Test(timeout = 4000)
    public void test0751429() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0751430() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0751431() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0751432() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0751433() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0751434() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0751435() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0751436() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("-kU[P", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: U
        }
    }

    @Test(timeout = 4000)
    public void test0761437() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0761438() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0761439() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertEquals("no date time pattern for locale: _S<QO?Y0", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0761440() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertEquals("S<QO?Y0", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0761441() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        assertEquals("no date time pattern for locale: ", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0761442() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("S<qo?y0", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: q
        }
    }

    @Test(timeout = 4000)
    public void test0771443() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test0771444() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0771445() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("{363RHP)", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
        }
    }

    @Test(timeout = 4000)
    public void test0781446() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test0781447() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0781448() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        Locale locale0 = Locale.KOREA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0781449() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        Locale locale0 = Locale.KOREA;
        assertEquals("KOR", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0781450() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        Locale locale0 = Locale.KOREA;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0781451() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        Locale locale0 = Locale.KOREA;
        assertEquals("KR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0781452() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        Locale locale0 = Locale.KOREA;
        assertEquals("ko_KR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0781453() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        Locale locale0 = Locale.KOREA;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0781454() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        Locale locale0 = Locale.KOREA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0781455() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" at index: ");
        Locale locale0 = Locale.KOREA;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Q\"~ejLg;=`mCF'-$", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Q
        }
    }

    @Test(timeout = 4000)
    public void test0791456() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("L");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: L
        }
    }

    @Test(timeout = 4000)
    public void test0801457() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0801458() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("KR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0801459() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("ko_KR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0801460() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0801461() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0801462() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("KOR", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0801463() throws Throwable {
        Locale locale0 = Locale.KOREA;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0801464() throws Throwable {
        Locale locale0 = Locale.KOREA;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(" 9JtTd.$cJi'MXwGE", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: J
        }
    }

    @Test(timeout = 4000)
    public void test0811465() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("@I5wyU}+$", (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: I
        }
    }

    @Test(timeout = 4000)
    public void test0821466() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: T
        }
    }

    @Test(timeout = 4000)
    public void test0831467() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test0831468() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test0831469() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertEquals((-2446), simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test0831470() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=-2446,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test0831471() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0831472() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test0831473() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]", (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: t
        }
    }

    @Test(timeout = 4000)
    public void test0841474() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("C/");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: C
        }
    }

    @Test(timeout = 4000)
    public void test0851475() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("B67F8w -");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: B
        }
    }

    @Test(timeout = 4000)
    public void test0861476() throws Throwable {
        Locale locale0 = Locale.CHINA;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance((String) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The pattern must not be null
        }
    }

    @Test(timeout = 4000)
    public void test0871477() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        assertEquals(17, list0.size());
    }

    @Test(timeout = 4000)
    public void test0871478() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test0871479() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getPattern();
        ParsePosition parsePosition0 = new ParsePosition(1);
        fastDateFormat1.parseObject("", parsePosition0);
        fastDateFormat0.format((long) 0);
        String string0 = fastDateFormat0.format((long) 1);
        assertEquals("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT", string0);
    }

    @Test(timeout = 4000)
    public void test0871480() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getPattern();
        ParsePosition parsePosition0 = new ParsePosition(1);
        fastDateFormat1.parseObject("", parsePosition0);
        fastDateFormat0.format((long) 0);
        String string0 = fastDateFormat0.format((long) 1);
        fastDateFormat1.getPattern();
        assertEquals(34, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0881481() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        ZoneId.getAvailableZoneIds();
        timeZone0.setID("sa");
        zoneOffset0.getRules();
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0891482() throws Throwable {
        FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        locale0.getUnicodeLocaleAttributes();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test0891483() throws Throwable {
        FastDateFormat.getTimeInstance(0);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        locale0.getUnicodeLocaleAttributes();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
        assertEquals("MMM d, yyyy", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test0901484() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("`k>PoY=[]c2", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: P
        }
    }

    @Test(timeout = 4000)
    public void test0911485() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0911486() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0921487() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Calendar) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0931488() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        fastDateFormat0.format((long) 0, stringBuffer0);
        assertEquals(17, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0931489() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        fastDateFormat0.format((long) 0, stringBuffer0);
        assertEquals("sa12:00:00 AM UTC", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0941490() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0951491() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(1960, 0, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 1960
        }
    }

    @Test(timeout = 4000)
    public void test0961492() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        String string0 = fastDateFormat0.toString();
        assertEquals("FastDateFormat[h:mm:ss a z]", string0);
    }

    @Test(timeout = 4000)
    public void test0971493() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(17, int0);
    }

    @Test(timeout = 4000)
    public void test0981494() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
        // Undeclared exception!
        try {
            fastDateFormat0.parseObject("\u683C\u6797\u5A01\u6CBB\u65F6\u95F4", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0991495() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        ZoneId.getAvailableZoneIds();
        timeZone0.setID("sa");
        zoneOffset0.getRules();
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
        assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test1001496() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(10, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test1001497() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals("sa14/02/14", stringBuffer0.toString());
    }
}
