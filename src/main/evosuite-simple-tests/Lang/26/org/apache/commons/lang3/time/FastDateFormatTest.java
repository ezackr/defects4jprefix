/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:43:53 GMT 2023
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import java.math.RoundingMode;
import java.nio.CharBuffer;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.MonthDay;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.junit.runner.RunWith;

public class FastDateFormatTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-1745), locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal style: -1745
        }
    }

    @Test(timeout = 4000)
    public void test0110() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0111() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0112() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0113() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0114() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0115() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0116() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0117() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0118() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0119() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0120() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0121() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0122() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0123() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0124() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0125() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0126() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0127() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0128() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0129() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0130() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0131() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0132() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0133() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0134() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0135() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0136() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0137() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0138() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0139() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0140() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0141() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0142() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0143() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0244() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0245() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0246() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0247() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0248() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0249() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0250() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0251() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0252() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0253() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0254() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0255() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0256() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0257() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0258() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0259() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test0260() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(7, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test0261() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals("U", string0);
    }

    @Test(timeout = 4000)
    public void test0262() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0363() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0364() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0365() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0366() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0367() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0368() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0369() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0370() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0371() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0372() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0373() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0374() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0375() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0376() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0377() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0378() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0379() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0380() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0381() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0382() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0383() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0384() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0385() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0386() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0387() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0388() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0389() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0390() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0391() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0392() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0393() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0394() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0395() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0396() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0397() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0498() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test0499() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test04100() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test04101() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test04102() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test04103() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test04104() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test04105() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test04106() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test04107() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test04108() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test04109() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test04110() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test04111() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test04112() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test04113() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test04114() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("Heure de Greenwich", string0);
    }

    @Test(timeout = 4000)
    public void test04115() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test05116() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test05117() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test05118() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test05119() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test05120() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test05121() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test05122() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test05123() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test05124() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test05125() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test05126() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test05127() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test05128() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test05129() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test05130() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test05131() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test05132() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test05133() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test05134() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test05135() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test05136() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test06137() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test06138() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test06139() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test06140() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test06141() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test06142() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test06143() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test06144() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test06145() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test06146() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test06147() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test06148() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test06149() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test06150() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test06151() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test06152() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test06153() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test06154() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test06155() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test06156() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test06157() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test06158() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test06159() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test06160() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test06162() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test06163() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test06164() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test06165() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test06166() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test06167() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test06168() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test06169() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test06170() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test06171() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test06172() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test06173() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test06174() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test06175() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(14, int0);
    }

    @Test(timeout = 4000)
    public void test07176() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test07177() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("USA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test07178() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("US", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test07179() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("en_US", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test07180() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test07181() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test07182() throws Throwable {
        Locale locale0 = Locale.US;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test07183() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test07184() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test07185() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test07186() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test07187() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test07188() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("USA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test07189() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("US", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test07190() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("en_US", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test07191() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test07192() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test07193() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test07194() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test07195() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test07196() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test08197() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test08198() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test08199() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test08200() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test08201() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test08202() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test08203() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test08204() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test08205() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test08206() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test08207() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test08208() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test08209() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test08210() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test08211() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test08212() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test08213() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test08214() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test08215() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test08216() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test08217() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test08218() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test08219() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertEquals("6/1/10", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test08220() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6/1/10", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test09221() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test09222() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test09223() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test09224() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test09225() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test09226() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test09227() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test09228() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test10229() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
    }

    @Test(timeout = 4000)
    public void test10230() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        assertNotNull(dateFormatSymbols0);
    }

    @Test(timeout = 4000)
    public void test10231() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test10232() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
    }

    @Test(timeout = 4000)
    public void test10233() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("@,0", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test10234() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("@,0", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test10235() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test10236() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test10237() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test10238() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test10239() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test10240() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test10241() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test10242() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
    }

    @Test(timeout = 4000)
    public void test10243() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals("@,0", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test10244() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals("@,0", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test10245() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test10246() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test10247() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test10248() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals("@,0", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test10249() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test10250() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("@,0", dateFormatSymbols0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("@,0", timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test11251() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test11252() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test11253() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test11254() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test11255() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test11256() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test11257() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test11258() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test12259() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test12260() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test12261() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test12262() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test12263() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test12264() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test12265() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test12266() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test12267() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test12268() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test12269() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test12270() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test12271() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test12272() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test12273() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test12274() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test12275() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test12276() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test12277() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test12278() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test12279() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test12280() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test12281() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test12282() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("Wed Jun 01 14:48:00 GMT 1910", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test12283() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test12284() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test12285() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test12286() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test12287() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test12288() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test12289() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test13290() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test13291() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test13292() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test13293() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test13294() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test13295() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test13296() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test13297() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test13298() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test13299() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test13300() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test13301() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test13302() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test13303() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test13304() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test13305() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test13306() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test13307() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test13308() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test13309() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test13310() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test13311() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test13312() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test13313() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test13314() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test13315() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test13316() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test13317() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test13318() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test13319() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test13320() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test13321() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test13322() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test13323() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test13324() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test13325() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test13326() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test13327() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test13328() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test13329() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("Mon Aug 04 09:06:56 GMT 949", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test13330() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test13331() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test14332() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test14333() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test14334() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test14335() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test14336() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test14337() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test14338() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test14339() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test14340() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test14341() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test14342() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test14343() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test14344() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test14345() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test14346() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test14347() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals("", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test14348() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test14349() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test14350() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test14351() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test14352() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test14353() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test14354() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test14355() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test14356() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test14357() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test14358() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test14359() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test14360() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test14361() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test14362() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test14363() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test14364() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test14365() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test14366() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test14367() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test14368() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test14369() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test14370() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test14371() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test15372() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test15373() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test15374() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test15375() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test15376() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test15377() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test15378() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test15379() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test15380() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        int[] intArray0 = new int[5];
        // Undeclared exception!
        try {
            fastDateFormat0.parseToken("", intArray0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test16381() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test16382() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test16383() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test16384() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test16385() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test16386() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test16387() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test16388() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test16389() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
        int[] intArray0 = new int[4];
        // Undeclared exception!
        try {
            fastDateFormat0.parseToken((String) null, intArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test17390() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test17391() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test17392() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertEquals(3, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test17393() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test17394() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test17395() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test17396() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test17397() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test17398() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test17399() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test17400() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test17401() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test17402() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test17403() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test17404() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test17405() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test17406() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test17407() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test17408() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test17409() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(3, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test17410() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test17411() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test17412() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test17413() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test17414() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test17415() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test17416() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test17417() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test17418() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test17419() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test17420() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test17421() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test17422() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        // Undeclared exception!
        try {
            fastDateFormat0.parseObject("2;Og@Nt", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test18423() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=3673,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test18424() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test18425() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertEquals(3673, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test18426() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test18427() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test18428() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test18429() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        // Undeclared exception!
        try {
            FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 3673, (Locale) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test19430() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test19431() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test19432() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(1390, timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 1390
        }
    }

    @Test(timeout = 4000)
    public void test20433() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(518, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 518
        }
    }

    @Test(timeout = 4000)
    public void test21434() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance((-438));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -438
        }
    }

    @Test(timeout = 4000)
    public void test22435() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(276, 276, (TimeZone) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 276
        }
    }

    @Test(timeout = 4000)
    public void test23436() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test23437() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test23438() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test23439() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test23440() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test23441() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test23442() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test23443() throws Throwable {
        Locale locale0 = Locale.CANADA;
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance((-750), (-750), locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -750
        }
    }

    @Test(timeout = 4000)
    public void test24444() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(11, 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 11
        }
    }

    @Test(timeout = 4000)
    public void test25445() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test25446() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test25447() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test25448() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("zh", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test25449() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test25450() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test25451() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test25452() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(122, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 122
        }
    }

    @Test(timeout = 4000)
    public void test26453() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(1559);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 1559
        }
    }

    @Test(timeout = 4000)
    public void test27454() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test27455() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test27456() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test27457() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test27458() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test27459() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test27460() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test27461() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test27462() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        // Undeclared exception!
        try {
            fastDateFormat0.format((Date) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test28463() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test28464() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test28465() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test28466() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test28467() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test28468() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test28469() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test28470() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test28471() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test28472() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test28473() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test28474() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test28475() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test28476() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test28477() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test28478() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test28479() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test28480() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test28481() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("9]Y~%Db~VyH", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test28482() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test28483() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test28484() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0, 0, 3);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test28485() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0, 0, 3);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test29486() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test29487() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test29488() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test29489() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test29490() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test29491() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test29492() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test29493() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test29494() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2571), 1713, 1604, 1, (-1));
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test29495() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2571), 1713, 1604, 1, (-1));
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test29496() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2571), 1713, 1604, 1, (-1));
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test29497() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2571), 1713, 1604, 1, (-1));
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test29498() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2571), 1713, 1604, 1, (-1));
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test29499() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2571), 1713, 1604, 1, (-1));
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test30500() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test30501() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test30502() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test30503() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test30504() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test30505() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test30506() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test30507() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test30508() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        // Undeclared exception!
        try {
            fastDateFormat0.format(1L, (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test31509() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test31510() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test31511() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test31512() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test31513() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test31514() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test31515() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test31516() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test31517() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test31518() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test31519() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test31520() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test31521() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test31522() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test31523() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test31524() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test31525() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test31526() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test31527() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test31528() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test31529() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test31530() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test31531() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test31532() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test31533() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        // Undeclared exception!
        try {
            fastDateFormat0.format(0L);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test32534() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test32535() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test32536() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test32537() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test32538() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test32539() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test32540() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test32541() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test32542() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.hashCode();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test32543() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.hashCode();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test32544() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.hashCode();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test32545() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.hashCode();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test32546() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.hashCode();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test32547() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.hashCode();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test32548() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.hashCode();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test33549() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test33550() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test33551() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test33552() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test33553() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test33554() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test33555() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test33556() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test33557() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        fastDateFormat0.hashCode();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test33558() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        fastDateFormat0.hashCode();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test33559() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        fastDateFormat0.hashCode();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test33560() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        fastDateFormat0.hashCode();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test33561() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        fastDateFormat0.hashCode();
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test33562() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        fastDateFormat0.hashCode();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test33563() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        fastDateFormat0.hashCode();
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test34564() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test34565() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test34566() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test34567() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test34568() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test34569() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test34570() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test34571() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test34572() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test34573() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test34574() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test34575() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test34576() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test34577() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test34578() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test34579() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test35580() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test35581() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test35582() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test35583() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test35584() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test35585() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test35586() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test35587() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test35588() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test35589() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertFalse(charBuffer0.isReadOnly());
    }

    @Test(timeout = 4000)
    public void test35590() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(0, charBuffer0.arrayOffset());
    }

    @Test(timeout = 4000)
    public void test35591() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charBuffer0.remaining());
    }

    @Test(timeout = 4000)
    public void test35592() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charBuffer0.capacity());
    }

    @Test(timeout = 4000)
    public void test35593() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test35594() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertFalse(charBuffer0.isDirect());
    }

    @Test(timeout = 4000)
    public void test35595() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(0, charBuffer0.position());
    }

    @Test(timeout = 4000)
    public void test35596() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test35597() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertTrue(charBuffer0.hasRemaining());
    }

    @Test(timeout = 4000)
    public void test35598() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertTrue(charBuffer0.hasArray());
    }

    @Test(timeout = 4000)
    public void test35599() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charBuffer0.limit());
    }

    @Test(timeout = 4000)
    public void test35600() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test35601() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test35602() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertNotNull(charBuffer0);
    }

    @Test(timeout = 4000)
    public void test35603() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertFalse(charBuffer0.isReadOnly());
    }

    @Test(timeout = 4000)
    public void test35604() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(0, charBuffer0.arrayOffset());
    }

    @Test(timeout = 4000)
    public void test35605() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charBuffer0.remaining());
    }

    @Test(timeout = 4000)
    public void test35606() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charBuffer0.capacity());
    }

    @Test(timeout = 4000)
    public void test35607() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test35608() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertFalse(charBuffer0.isDirect());
    }

    @Test(timeout = 4000)
    public void test35609() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(0, charBuffer0.position());
    }

    @Test(timeout = 4000)
    public void test35610() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test35611() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertTrue(charBuffer0.hasRemaining());
    }

    @Test(timeout = 4000)
    public void test35612() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertTrue(charBuffer0.hasArray());
    }

    @Test(timeout = 4000)
    public void test35613() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charBuffer0.limit());
    }

    @Test(timeout = 4000)
    public void test35614() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test35615() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test35616() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test35617() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test35618() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test35619() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test35620() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test35621() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test35622() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test35623() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test35624() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test35625() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test35626() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test35627() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test35628() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test35629() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62352892746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=7,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=54,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test35630() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertFalse(charBuffer0.isReadOnly());
    }

    @Test(timeout = 4000)
    public void test35631() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, charBuffer0.arrayOffset());
    }

    @Test(timeout = 4000)
    public void test35632() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charBuffer0.remaining());
    }

    @Test(timeout = 4000)
    public void test35633() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charBuffer0.capacity());
    }

    @Test(timeout = 4000)
    public void test35634() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test35635() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertFalse(charBuffer0.isDirect());
    }

    @Test(timeout = 4000)
    public void test35636() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, charBuffer0.position());
    }

    @Test(timeout = 4000)
    public void test35637() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test35638() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(charBuffer0.hasRemaining());
    }

    @Test(timeout = 4000)
    public void test35639() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(charBuffer0.hasArray());
    }

    @Test(timeout = 4000)
    public void test35640() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charBuffer0.limit());
    }

    @Test(timeout = 4000)
    public void test35641() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(47, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test35642() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000Saturday, February 14, 0007 12:00:54 AM GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test35643() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(47, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test35644() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000Saturday, February 14, 0007 12:00:54 AM GMT", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test35645() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test35646() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test35647() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test35648() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test35649() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test36650() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test36651() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test36652() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test36653() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36654() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36655() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36656() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36657() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36658() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36659() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test36660() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test36661() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36662() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36663() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36664() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36665() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36666() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36667() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("GMT", string0);
    }

    @Test(timeout = 4000)
    public void test36668() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test36669() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test36670() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36671() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36672() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36673() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36674() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36675() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36676() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("GMT", string1);
    }

    @Test(timeout = 4000)
    public void test36677() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test36678() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        assertEquals(1L, (long) long0);
    }

    @Test(timeout = 4000)
    public void test36679() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        assertNotNull(long0);
    }

    @Test(timeout = 4000)
    public void test36680() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test36681() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test36682() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36683() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36684() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36685() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36686() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36687() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36688() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test36689() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test36690() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test36691() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test36692() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test36693() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test36694() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test36695() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test36696() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test36697() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test36698() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test36699() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test36700() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test36701() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test36702() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test36703() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test36704() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test36705() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertNotNull(decimalFormat0);
    }

    @Test(timeout = 4000)
    public void test36706() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test36707() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        assertEquals("GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test36708() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test36709() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test36710() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test36711() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test36712() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test36713() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36714() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36715() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36716() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36717() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36718() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36719() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test36720() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test36721() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test36722() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test36723() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test36724() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test36725() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test36726() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test36727() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test36728() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test36729() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test36730() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test36731() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test36732() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test36733() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test36734() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test36735() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test36736() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("GMT0 %", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test36737() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(6, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test36738() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test36739() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test36740() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test36741() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("GMT0 %", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test36742() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(6, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test36743() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test36744() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test36745() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test36746() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertEquals("GMT0 %GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test36747() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertEquals(9, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test36748() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertEquals("GMT0 %GMT", stringBuffer2.toString());
    }

    @Test(timeout = 4000)
    public void test36749() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertEquals(9, stringBuffer2.length());
    }

    @Test(timeout = 4000)
    public void test36750() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test36751() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test36752() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertSame(stringBuffer2, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test36753() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertSame(stringBuffer2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test36754() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertNotNull(stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test36755() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36756() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36757() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36758() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36759() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36760() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36761() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test36762() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test36763() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test36764() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test36765() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test36766() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test36767() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test36768() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test36769() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test36770() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test36771() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test36772() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test36773() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test36774() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test36775() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test36776() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test36777() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test36778() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(13, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test36779() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("trueGMT0 %GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test36780() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test36781() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test36782() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test36783() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(13, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test36784() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("trueGMT0 %GMT", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test36785() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(13, stringBuffer3.length());
    }

    @Test(timeout = 4000)
    public void test36786() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("trueGMT0 %GMT", stringBuffer3.toString());
    }

    @Test(timeout = 4000)
    public void test36787() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test36788() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test36789() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test36790() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test36791() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test36792() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test36793() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer3, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test36794() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer3, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test36795() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer3, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test36796() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertNotNull(stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test36797() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test36798() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test36799() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36800() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36801() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36802() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36803() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36804() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36805() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test36806() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test36807() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test36808() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test36809() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test36810() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test36811() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test36812() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test36813() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test36814() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test36815() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test36816() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test36817() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test36818() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test36819() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test36820() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test36821() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test36822() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test36823() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(510, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test36824() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test36825() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test36826() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test36827() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(510, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test36828() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test36829() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test36830() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test36831() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test36832() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test36833() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", stringBuffer4.toString());
    }

    @Test(timeout = 4000)
    public void test36834() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(510, stringBuffer4.length());
    }

    @Test(timeout = 4000)
    public void test36835() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer0, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test36836() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test36837() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test36838() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test36839() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer1, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test36840() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test36841() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test36842() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test36843() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer4, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test36844() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer4, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test36845() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer4, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test36846() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer4, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test36847() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertNotNull(stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test36848() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test36849() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test36850() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test36851() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test36852() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("yyyy-MM-dd", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test36853() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test36854() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test36855() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test36856() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36857() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36858() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36859() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36860() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36861() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36862() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test37863() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test37864() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test37865() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test37866() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test37867() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test37868() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test37869() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(0, (-1548), (TimeZone) simpleTimeZone0, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -1548
        }
    }

    @Test(timeout = 4000)
    public void test38870() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test38871() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("zh", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test38872() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test38873() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test38874() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test38875() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test38876() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test38877() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(801, 2210, (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 2210
        }
    }

    @Test(timeout = 4000)
    public void test39878() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39879() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test39880() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance((-978), timeZone0, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -978
        }
    }

    @Test(timeout = 4000)
    public void test40881() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test40882() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test40883() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test40884() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test40885() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test40886() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test40887() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test40888() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(2883, (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 2883
        }
    }

    @Test(timeout = 4000)
    public void test41889() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test41890() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test41891() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test41892() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test41893() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test41894() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test41895() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test41896() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test41897() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test41898() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test41899() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test41900() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test41901() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test41902() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test41903() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test41904() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test41905() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test41906() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test41907() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test41908() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test41909() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test41910() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test41911() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test41912() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test42913() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(65, (TimeZone) null, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 65
        }
    }

    @Test(timeout = 4000)
    public void test43914() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test43915() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test43916() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test43917() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test43918() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test43919() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test43920() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test43921() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals("M/d/yy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test43922() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test43923() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test43924() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test43925() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test43926() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test43927() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test43928() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test43929() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test43930() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test43931() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("M/d/yy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test43932() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test43933() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test43934() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("Wed Jun 01 14:48:00 GMT 1910", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test43935() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("6/1/10", string0);
    }

    @Test(timeout = 4000)
    public void test43936() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test44937() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test44938() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test44939() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test44940() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test44941() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test44942() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test44943() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test44944() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test44945() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test44946() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test44947() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test44948() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test44949() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test44950() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test44951() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test44952() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test44953() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test44954() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test44955() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test44956() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test44957() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test45958() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test45959() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test45960() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test45961() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test45962() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test45963() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test45964() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test45965() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test45966() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test45967() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test45968() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test45969() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test45970() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test45971() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test45972() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test45973() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test45974() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test45975() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test45976() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test45977() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test45978() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test45979() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test45980() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test45981() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test45982() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test45983() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test45984() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test45985() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test45986() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test45987() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test45988() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test45989() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test45990() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test45991() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test45992() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test45993() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test45994() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test45995() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test45996() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test45997() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test45998() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test45999() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test451000() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451001() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test451002() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test451003() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test451004() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451005() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451006() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451007() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451008() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451009() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451010() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals("", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test451011() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test451012() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test451013() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test451014() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test451015() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test451016() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test451017() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test461018() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461019() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461020() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461021() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461022() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461023() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test461024() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461025() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461026() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461027() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461028() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461029() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461030() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461031() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461032() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461033() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461034() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461035() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test461036() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test461037() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test461038() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test461039() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test461040() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertEquals("java.text.ParsePosition[index=-2803,errorIndex=-1]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test461041() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertEquals((-2803), parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test461042() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertEquals((-1), parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test461043() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertNotNull(parsePosition0);
    }

    @Test(timeout = 4000)
    public void test461044() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461045() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461046() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461047() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461048() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461049() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461050() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461051() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461052() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461053() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461054() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461055() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test461056() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test461057() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test461058() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test461059() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test461060() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals("null", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test461061() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals(4, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test461062() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals("null", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test461063() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals(4, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test461064() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test461065() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test461066() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test461067() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461068() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461069() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461070() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461071() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461072() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461073() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461074() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461075() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461076() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461077() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461078() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test461079() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(29, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test461080() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("nullThursday, January 1, 1970", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test461081() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("nullThursday, January 1, 1970", stringBuffer2.toString());
    }

    @Test(timeout = 4000)
    public void test461082() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(29, stringBuffer2.length());
    }

    @Test(timeout = 4000)
    public void test461083() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test461084() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test461085() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertSame(stringBuffer2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test461086() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertSame(stringBuffer2, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test461087() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertNotNull(stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test461088() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461089() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461090() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461091() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461092() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461093() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461094() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461095() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461096() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461097() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461098() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461099() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test461100() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test461101() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test461102() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test461103() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test461104() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test461105() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test461106() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test461107() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461108() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461109() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461110() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461111() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461112() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461113() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461114() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461115() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461116() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test461117() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test461118() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test461119() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test461120() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test461121() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test461122() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461123() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461124() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("HH:mm' Uhr 'z", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test461125() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test461126() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test461127() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test461128() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test461129() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("zh_CN", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test461130() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("zho", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test461131() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("zh", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test461132() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("CHN", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test461133() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("CN", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test461134() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test461135() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test461136() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test461137() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertNotNull(locale1);
    }

    @Test(timeout = 4000)
    public void test461138() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test461139() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertNotNull(linkedList0);
    }

    @Test(timeout = 4000)
    public void test461140() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test461141() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461142() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertFalse(linkedHashSet0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461143() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertNotNull(linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test461144() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test461145() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test461146() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461147() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test461148() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461149() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertFalse(linkedHashSet0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461150() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertFalse(list0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461151() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test461152() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test461153() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test461154() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461155() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test461156() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461157() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertFalse(linkedHashSet0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461158() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertFalse(list0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461159() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertNull(locale2);
    }

    @Test(timeout = 4000)
    public void test461160() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertEquals(2, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test461161() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test461162() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test461163() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test461164() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) mockSimpleDateFormat0, stringBuffer1, fieldPosition0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
        }
    }

    @Test(timeout = 4000)
    public void test471165() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test471166() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test471167() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test471168() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test471169() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test471170() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test471171() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test471172() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test471173() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        assertEquals(1951L, (long) long0);
    }

    @Test(timeout = 4000)
    public void test471174() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        assertNotNull(long0);
    }

    @Test(timeout = 4000)
    public void test471175() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        boolean boolean0 = fastDateFormat0.equals(long0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test471176() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        boolean boolean0 = fastDateFormat0.equals(long0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test471177() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        boolean boolean0 = fastDateFormat0.equals(long0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test471178() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        boolean boolean0 = fastDateFormat0.equals(long0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test471179() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        boolean boolean0 = fastDateFormat0.equals(long0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test471180() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        boolean boolean0 = fastDateFormat0.equals(long0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test471181() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        boolean boolean0 = fastDateFormat0.equals(long0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test471182() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(1951L);
        boolean boolean0 = fastDateFormat0.equals(long0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test481183() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test481184() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test481185() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test481186() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test481187() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test481188() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test481189() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test481190() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test481191() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: <null>
        }
    }

    @Test(timeout = 4000)
    public void test491192() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test491193() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test491194() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test491195() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test491196() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test491197() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test491198() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test491199() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test491200() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test491201() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test491202() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test491203() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        assertEquals(1L, (long) long0);
    }

    @Test(timeout = 4000)
    public void test491204() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        assertNotNull(long0);
    }

    @Test(timeout = 4000)
    public void test491205() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        assertEquals("GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test491206() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test491207() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test491208() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test491209() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test491210() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test491211() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test491212() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test491213() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test491214() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test491215() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test491216() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test491217() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test491218() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test491219() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test491220() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals(28, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test491221() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals("GMTThursday, January 1, 1970", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test491222() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test491223() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test491224() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test491225() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals("GMTThursday, January 1, 1970", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test491226() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertEquals(28, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test491227() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test491228() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test491229() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test501230() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test501231() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test501232() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501233() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501234() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501235() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501236() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501237() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501238() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test501239() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501240() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501241() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501242() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501243() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501244() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501245() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501246() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501247() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501248() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501249() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501250() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501251() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertEquals("E", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test501252() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501253() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test501254() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        assertNotNull(zoneId0);
    }

    @Test(timeout = 4000)
    public void test501255() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test501256() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test501257() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501258() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501259() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501260() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501261() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertEquals("MMMM d, yyyy", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test501262() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertEquals(20, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501263() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501264() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test501265() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501266() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test501267() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test501268() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501269() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501270() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501271() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501272() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501273() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501274() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("Greenwich Mean Time", string0);
    }

    @Test(timeout = 4000)
    public void test501275() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test501276() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        assertEquals("", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501277() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        assertEquals("", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501278() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        assertEquals("", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test501279() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        assertEquals("", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test501280() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test501281() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        assertEquals("", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501282() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test501283() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test501284() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        assertNotNull(locale1);
    }

    @Test(timeout = 4000)
    public void test501285() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501286() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501287() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501288() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501289() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501290() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501291() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501292() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501293() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501294() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501295() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501296() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("dd/MM/yy h:mm:ss z a", fastDateFormat2.getPattern());
    }

    @Test(timeout = 4000)
    public void test501297() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(27, fastDateFormat2.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501298() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertFalse(locale0.equals((Object) locale1));
    }

    @Test(timeout = 4000)
    public void test501299() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test501300() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test501301() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertNotSame(locale0, locale1);
    }

    @Test(timeout = 4000)
    public void test501302() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertNotSame(fastDateFormat2, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test501303() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertNotSame(fastDateFormat2, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501304() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertNotNull(fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test501305() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501306() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501307() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501308() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501309() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501310() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501311() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501312() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501313() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501314() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501315() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501316() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501317() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("E", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test501318() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertFalse(locale0.equals((Object) locale1));
    }

    @Test(timeout = 4000)
    public void test501319() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test501320() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test501321() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test501322() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertNotSame(locale0, locale1);
    }

    @Test(timeout = 4000)
    public void test501323() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test501324() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertNotSame(fastDateFormat0, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test501325() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("E", string1);
    }

    @Test(timeout = 4000)
    public void test501326() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test501327() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501328() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501329() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501330() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501331() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501332() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501333() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501334() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501335() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501336() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501337() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501338() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501339() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("E", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test501340() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone1.getID());
    }

    @Test(timeout = 4000)
    public void test501341() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertFalse(locale0.equals((Object) locale1));
    }

    @Test(timeout = 4000)
    public void test501342() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test501343() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test501344() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertTrue(timeZone1.equals((Object) timeZone0));
    }

    @Test(timeout = 4000)
    public void test501345() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertNotSame(locale0, locale1);
    }

    @Test(timeout = 4000)
    public void test501346() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test501347() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertNotSame(fastDateFormat0, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test501348() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertNotSame(timeZone1, timeZone0);
    }

    @Test(timeout = 4000)
    public void test501349() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertNotNull(timeZone1);
    }

    @Test(timeout = 4000)
    public void test501350() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501351() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501352() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501353() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501354() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test501355() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals("M/d/yy", fastDateFormat3.getPattern());
    }

    @Test(timeout = 4000)
    public void test501356() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertTrue(fastDateFormat3.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501357() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(10, fastDateFormat3.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501358() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertTrue(timeZone0.equals((Object) timeZone1));
    }

    @Test(timeout = 4000)
    public void test501359() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test501360() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test501361() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test501362() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertNotSame(timeZone0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test501363() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertNotSame(fastDateFormat3, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501364() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertNotSame(fastDateFormat3, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test501365() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertNotSame(fastDateFormat3, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test501366() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        assertNotNull(fastDateFormat3);
    }

    @Test(timeout = 4000)
    public void test501367() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test501368() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501369() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501370() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501371() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501372() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test501373() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("M/d/yy", fastDateFormat3.getPattern());
    }

    @Test(timeout = 4000)
    public void test501374() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertTrue(fastDateFormat3.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501375() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(10, fastDateFormat3.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501376() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("Tue Dec 01 14:48:00 GMT 1908", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test501377() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertTrue(timeZone0.equals((Object) timeZone1));
    }

    @Test(timeout = 4000)
    public void test501378() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test501379() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test501380() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test501381() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(string2.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test501382() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(string2.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test501383() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertNotSame(timeZone0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test501384() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertNotSame(fastDateFormat3, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501385() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertNotSame(fastDateFormat3, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test501386() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertNotSame(fastDateFormat3, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test501387() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("12/1/08", string2);
    }

    @Test(timeout = 4000)
    public void test501388() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        assertNotNull(string2);
    }

    @Test(timeout = 4000)
    public void test501389() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        assertEquals((-888), parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test501390() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        assertEquals((-1), parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test501391() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        assertEquals("java.text.ParsePosition[index=-888,errorIndex=-1]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test501392() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        assertNotNull(parsePosition0);
    }

    @Test(timeout = 4000)
    public void test501393() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501394() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501395() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501396() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501397() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501398() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501399() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501400() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501401() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501402() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501403() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501404() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals("dd/MM/yy h:mm:ss z a", fastDateFormat2.getPattern());
    }

    @Test(timeout = 4000)
    public void test501405() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals(27, fastDateFormat2.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501406() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals(0, parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test501407() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test501408() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertEquals(0, parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test501409() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertFalse(locale0.equals((Object) locale1));
    }

    @Test(timeout = 4000)
    public void test501410() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat3));
    }

    @Test(timeout = 4000)
    public void test501411() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test501412() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test501413() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertNotSame(locale0, locale1);
    }

    @Test(timeout = 4000)
    public void test501414() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertNotSame(fastDateFormat2, fastDateFormat3);
    }

    @Test(timeout = 4000)
    public void test501415() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertNotSame(fastDateFormat2, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test501416() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertNotSame(fastDateFormat2, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501417() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test501418() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        assertFalse(mockDate1.equals((Object) mockDate0));
    }

    @Test(timeout = 4000)
    public void test501419() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        assertNotNull(mockDate1);
    }

    @Test(timeout = 4000)
    public void test501420() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(1, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test501421() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("#,##0.###", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test501422() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test501423() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test501424() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test501425() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test501426() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(3, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test501427() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test501428() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test501429() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test501430() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test501431() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test501432() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test501433() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test501434() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test501435() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test501436() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test501437() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertNotNull(decimalFormat0);
    }

    @Test(timeout = 4000)
    public void test501438() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        assertEquals("E", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test501439() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        assertEquals(1, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test501440() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test501441() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        assertEquals(2, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test501442() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        assertEquals("E0", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test501443() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        assertEquals("E0", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test501444() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        assertEquals(2, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test501445() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test501446() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test501447() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test501448() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test501449() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test501450() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        assertEquals("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
    }

    @Test(timeout = 4000)
    public void test501451() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        assertEquals(1, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test501452() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test501453() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(1, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test501454() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals("#,##0.###", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test501455() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test501456() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test501457() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test501458() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test501459() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(3, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test501460() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test501461() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test501462() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test501463() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test501464() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test501465() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals("", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test501466() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals("", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test501467() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test501468() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test501469() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test501470() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(8, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test501471() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals("E0-1,837", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test501472() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals("java.text.FieldPosition[field=1,attribute=null,beginIndex=8,endIndex=8]", fieldPosition0.toString());
    }

    @Test(timeout = 4000)
    public void test501473() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(8, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test501474() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(8, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test501475() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(1, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test501476() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals("E0-1,837", stringBuffer2.toString());
    }

    @Test(timeout = 4000)
    public void test501477() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertEquals(8, stringBuffer2.length());
    }

    @Test(timeout = 4000)
    public void test501478() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test501479() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test501480() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertSame(stringBuffer2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test501481() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertSame(stringBuffer2, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test501482() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        assertNotNull(stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test501483() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501484() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501485() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501486() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501487() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("Thu Feb 01 12:12:00 GMT 1900", mockDate1.toString());
    }

    @Test(timeout = 4000)
    public void test501488() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(1, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test501489() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("#,##0.###", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test501490() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test501491() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test501492() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test501493() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test501494() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(3, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test501495() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test501496() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test501497() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test501498() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test501499() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test501500() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test501501() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test501502() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test501503() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test501504() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test501505() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501506() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501507() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501508() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501509() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501510() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501511() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("E0-1,83701/02/00 12:12:00 GMT PM", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test501512() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(32, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test501513() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("java.text.FieldPosition[field=1,attribute=null,beginIndex=8,endIndex=8]", fieldPosition0.toString());
    }

    @Test(timeout = 4000)
    public void test501514() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(8, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test501515() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(8, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test501516() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(1, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test501517() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(32, stringBuffer2.length());
    }

    @Test(timeout = 4000)
    public void test501518() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("E0-1,83701/02/00 12:12:00 GMT PM", stringBuffer2.toString());
    }

    @Test(timeout = 4000)
    public void test501519() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("E0-1,83701/02/00 12:12:00 GMT PM", stringBuffer3.toString());
    }

    @Test(timeout = 4000)
    public void test501520() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(32, stringBuffer3.length());
    }

    @Test(timeout = 4000)
    public void test501521() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501522() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals("dd/MM/yy h:mm:ss z a", fastDateFormat2.getPattern());
    }

    @Test(timeout = 4000)
    public void test501523() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertEquals(27, fastDateFormat2.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501524() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertFalse(mockDate1.equals((Object) mockDate0));
    }

    @Test(timeout = 4000)
    public void test501525() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertFalse(locale0.equals((Object) locale1));
    }

    @Test(timeout = 4000)
    public void test501526() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat3));
    }

    @Test(timeout = 4000)
    public void test501527() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test501528() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test501529() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertNotSame(mockDate1, mockDate0);
    }

    @Test(timeout = 4000)
    public void test501530() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertNotSame(locale0, locale1);
    }

    @Test(timeout = 4000)
    public void test501531() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test501532() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test501533() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test501534() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertSame(stringBuffer2, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test501535() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertSame(stringBuffer2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test501536() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertSame(stringBuffer2, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test501537() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertSame(stringBuffer3, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test501538() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertSame(stringBuffer3, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test501539() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertSame(stringBuffer3, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test501540() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertNotSame(fastDateFormat2, fastDateFormat3);
    }

    @Test(timeout = 4000)
    public void test501541() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertNotSame(fastDateFormat2, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test501542() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertNotSame(fastDateFormat2, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501543() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        assertNotNull(stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test501544() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501545() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501546() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501547() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501548() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501549() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501550() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501551() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501552() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501553() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501554() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501555() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals("dd/MM/yy h:mm:ss z a", fastDateFormat2.getPattern());
    }

    @Test(timeout = 4000)
    public void test501556() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals(27, fastDateFormat2.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501557() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals(0, parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test501558() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test501559() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertEquals(0, parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test501560() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertFalse(locale0.equals((Object) locale1));
    }

    @Test(timeout = 4000)
    public void test501561() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat3));
    }

    @Test(timeout = 4000)
    public void test501562() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test501563() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test501564() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertNotSame(locale0, locale1);
    }

    @Test(timeout = 4000)
    public void test501565() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertNotSame(fastDateFormat2, fastDateFormat3);
    }

    @Test(timeout = 4000)
    public void test501566() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertNotSame(fastDateFormat2, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test501567() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertNotSame(fastDateFormat2, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501568() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        assertNull(object1);
    }

    @Test(timeout = 4000)
    public void test501569() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        TimeZone timeZone2 = TimeZone.getTimeZone("Greenwich Mean Time");
        assertEquals("GMT", timeZone2.getID());
    }

    @Test(timeout = 4000)
    public void test501570() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        TimeZone timeZone2 = TimeZone.getTimeZone("Greenwich Mean Time");
        assertTrue(timeZone2.equals((Object) timeZone0));
    }

    @Test(timeout = 4000)
    public void test501571() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        TimeZone timeZone2 = TimeZone.getTimeZone("Greenwich Mean Time");
        assertTrue(timeZone2.equals((Object) timeZone1));
    }

    @Test(timeout = 4000)
    public void test501572() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        TimeZone timeZone2 = TimeZone.getTimeZone("Greenwich Mean Time");
        assertNotSame(timeZone2, timeZone0);
    }

    @Test(timeout = 4000)
    public void test501573() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        TimeZone timeZone2 = TimeZone.getTimeZone("Greenwich Mean Time");
        assertNotSame(timeZone2, timeZone1);
    }

    @Test(timeout = 4000)
    public void test501574() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("E", locale0);
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
        String string0 = timeZone0.getDisplayName(locale0);
        Locale locale1 = Locale.forLanguageTag("E");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, timeZone0);
        MockDate mockDate0 = new MockDate(3, 71, 1, 4, 648);
        String string2 = fastDateFormat3.format((Date) mockDate0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat2.parseObject("", parsePosition0);
        MockDate mockDate1 = new MockDate(0, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("E");
        StringBuffer stringBuffer1 = stringBuffer0.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(1);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer3 = fastDateFormat2.format((Date) mockDate1, stringBuffer2);
        Object object1 = fastDateFormat2.parseObject("I+iH4", parsePosition0);
        TimeZone timeZone2 = TimeZone.getTimeZone("Greenwich Mean Time");
        assertNotNull(timeZone2);
    }

    @Test(timeout = 4000)
    public void test511575() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test511576() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test511577() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test511578() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test511579() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test511580() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test511581() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test511582() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test511583() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test511584() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test511585() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test511586() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test511587() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test511588() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test511589() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test511590() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test511591() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test511592() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test511593() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test511594() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test511595() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("MMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test511596() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test511597() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test511598() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test511599() throws Throwable {
        String string0 = "";
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("CjY3mZ!-QI }(r", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: C
        }
    }

    @Test(timeout = 4000)
    public void test521600() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        assertNotNull(zoneId0);
    }

    @Test(timeout = 4000)
    public void test521601() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test521602() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test521603() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("u%F=Jb{Fk6<5bi1LAQ", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: u
        }
    }

    @Test(timeout = 4000)
    public void test531604() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test531605() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test531606() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test531607() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test531608() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test531609() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test531610() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test531611() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("htC+iAsdS2#%*>BG", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: t
        }
    }

    @Test(timeout = 4000)
    public void test541612() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test541613() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test541614() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test541615() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test541616() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test541617() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test541618() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("`r`JjOw", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: r
        }
    }

    @Test(timeout = 4000)
    public void test551619() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("@H(d*8qNRb\u0001$;g;eW");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: q
        }
    }

    @Test(timeout = 4000)
    public void test561620() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test561621() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test561622() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test561623() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("US", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test561624() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test561625() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("en_US", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test561626() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("USA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test561627() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test561628() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test561629() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("<null>", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: n
        }
    }

    @Test(timeout = 4000)
    public void test571630() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test571631() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test571632() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test571633() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test571634() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test571635() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test571636() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test571637() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test571638() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test571639() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("iWKU+]K\"-?:et/0,", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: i
        }
    }

    @Test(timeout = 4000)
    public void test581640() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test581641() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test581642() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test581643() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test581644() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test581645() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test581646() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test581647() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("gl#+/t~.LgR_d%q", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: g
        }
    }

    @Test(timeout = 4000)
    public void test591648() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test591649() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test591650() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertEquals(408, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test591651() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test591652() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=408,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test591653() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test591654() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test591655() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test591656() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test591657() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test591658() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test591659() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test591660() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test591661() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("];fP>%Q\"w", (TimeZone) simpleTimeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: f
        }
    }

    @Test(timeout = 4000)
    public void test601662() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test601663() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test601664() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("fr_FR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test601665() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test601666() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("FR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test601667() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertEquals("FRA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test601668() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test601669() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(">WK6e]DBk", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: e
        }
    }

    @Test(timeout = 4000)
    public void test611670() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test611671() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test611672() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test611673() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test611674() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test611675() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test611676() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("cu+&Tf&53r^xfe!*`l@", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: c
        }
    }

    @Test(timeout = 4000)
    public void test621677() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test621678() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test621679() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test621680() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test621681() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test621682() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test621683() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test621684() throws Throwable {
        Locale locale0 = Locale.ROOT;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("-b>/gir%,", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: b
        }
    }

    @Test(timeout = 4000)
    public void test631685() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("3(Wd<XHT", (TimeZone) null, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: X
        }
    }

    @Test(timeout = 4000)
    public void test641686() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test641687() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test641688() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test641689() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test641690() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test641691() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test641692() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(":Uhxdjbv", (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: U
        }
    }

    @Test(timeout = 4000)
    public void test651693() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("FTo'rGr4$NMLbEI2U\"");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: T
        }
    }

    @Test(timeout = 4000)
    public void test661694() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        assertEquals("fr", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test661695() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test661696() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test661697() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test661698() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test661699() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test661700() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test661701() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("w$RV7HWI ", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
        }
    }

    @Test(timeout = 4000)
    public void test671702() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("sP`u+I ,=U*");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: P
        }
    }

    @Test(timeout = 4000)
    public void test681703() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test681704() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test681705() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("jpn", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test681706() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("ja", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test681707() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test681708() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test681709() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test681710() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Nl", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: N
        }
    }

    @Test(timeout = 4000)
    public void test691711() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test691712() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test691713() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test691714() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test691715() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test691716() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test691717() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test691718() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test691719() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test691720() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.CANADA;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(".L$D&HvPb", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: L
        }
    }

    @Test(timeout = 4000)
    public void test701721() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test701722() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test701723() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("CHN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test701724() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("zh_CN", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test701725() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test701726() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertEquals("CN", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test701727() throws Throwable {
        Locale locale0 = Locale.CHINA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test701728() throws Throwable {
        Locale locale0 = Locale.CHINA;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("[#K.lmr7[", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: l
        }
    }

    @Test(timeout = 4000)
    public void test711729() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        assertNotNull(zoneId0);
    }

    @Test(timeout = 4000)
    public void test711730() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test711731() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test711732() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("#%F=JFk6A5Dbi1LAQ", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: J
        }
    }

    @Test(timeout = 4000)
    public void test721733() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test721734() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test721735() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test721736() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test721737() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test721738() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test721739() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test721740() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test721741() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test721742() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test721743() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test721744() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test721745() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test721746() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test721747() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test721748() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test721749() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test721750() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test721751() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test721752() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test721753() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test721754() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test721755() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertEquals((-1), parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test721756() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertEquals((-2803), parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test721757() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertEquals("java.text.ParsePosition[index=-2803,errorIndex=-1]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test721758() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertNotNull(parsePosition0);
    }

    @Test(timeout = 4000)
    public void test721759() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test721760() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test721761() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test721762() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test721763() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test721764() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test721765() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test721766() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test721767() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test721768() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test721769() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test721770() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test721771() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test721772() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test721773() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test721774() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test721775() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals(4, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test721776() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals("null", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test721777() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals("null", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test721778() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals(4, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test721779() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test721780() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test721781() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test721782() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test721783() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test721784() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test721785() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test721786() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test721787() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test721788() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test721789() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test721790() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test721791() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test721792() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test721793() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test721794() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("nullThursday, January 1, 1970", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test721795() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(29, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test721796() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals("nullThursday, January 1, 1970", stringBuffer2.toString());
    }

    @Test(timeout = 4000)
    public void test721797() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertEquals(29, stringBuffer2.length());
    }

    @Test(timeout = 4000)
    public void test721798() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test721799() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test721800() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertSame(stringBuffer2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test721801() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertSame(stringBuffer2, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test721802() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        assertNotNull(stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test721803() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test721804() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test721805() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test721806() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test721807() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test721808() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test721809() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test721810() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test721811() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test721812() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test721813() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test721814() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test721815() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test721816() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test721817() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test721818() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test721819() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test721820() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test721821() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test721822() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test721823() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test721824() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test721825() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("HH:mm' Uhr 'z", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test721826() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(19, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test721827() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test721828() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test721829() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test721830() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test721831() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test721832() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("CHN", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test721833() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("zho", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test721834() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("CN", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test721835() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test721836() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("zh_CN", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test721837() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("zh", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test721838() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test721839() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test721840() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertNotNull(locale1);
    }

    @Test(timeout = 4000)
    public void test721841() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test721842() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertNotNull(linkedList0);
    }

    @Test(timeout = 4000)
    public void test721843() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test721844() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test721845() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertFalse(linkedHashSet0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test721846() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertNotNull(linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test721847() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test721848() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test721849() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test721850() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test721851() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test721852() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertFalse(linkedHashSet0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test721853() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertFalse(list0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test721854() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test721855() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test721856() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test721857() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test721858() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test721859() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test721860() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertFalse(linkedHashSet0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test721861() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertFalse(list0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test721862() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertNull(locale2);
    }

    @Test(timeout = 4000)
    public void test721863() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test721864() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test721865() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test721866() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test721867() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("CHN", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test721868() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("zho", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test721869() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("CN", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test721870() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test721871() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("zh_CN", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test721872() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("zh", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test721873() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test721874() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat2.getPattern());
    }

    @Test(timeout = 4000)
    public void test721875() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(17, fastDateFormat2.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test721876() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test721877() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test721878() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test721879() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test721880() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertNotSame(fastDateFormat2, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test721881() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertNotSame(fastDateFormat2, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test721882() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        assertNotNull(fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test721883() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertEquals(2, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test721884() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test721885() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test721886() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test721887() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(48L, stringBuffer0);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) mockSimpleDateFormat0, stringBuffer1, fieldPosition0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
        }
    }

    @Test(timeout = 4000)
    public void test731888() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("9GIgE-");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: I
        }
    }

    @Test(timeout = 4000)
    public void test741889() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test741890() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test741891() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test741892() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test741893() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test741894() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test741895() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test741896() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("z}FWDo.", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
        }
    }

    @Test(timeout = 4000)
    public void test751897() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("ZzBMHX.Xs,:pO[wVvQ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: B
        }
    }

    @Test(timeout = 4000)
    public void test761898() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The pattern must not be null
        }
    }

    @Test(timeout = 4000)
    public void test771899() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 3, (-49), 0);
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        StringBuffer stringBuffer0 = new StringBuffer("7t2Z)Umk`.3en(twdW3");
        mockGregorianCalendar0.setFirstDayOfWeek(1693);
        StringBuffer stringBuffer1 = stringBuffer0.insert(0, "org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField");
        StringBuffer stringBuffer2 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
        Locale locale0 = Locale.CHINESE;
        locale0.getScript();
        Locale.forLanguageTag("");
        FastDateFormat.getDateInstance(0, locale0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
        locale0.getDisplayCountry();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 3, (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat2.applyRules(mockGregorianCalendar0, stringBuffer2);
        StringBuffer stringBuffer3 = fastDateFormat0.format((-2903L), stringBuffer1);
        fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        // Undeclared exception!
        try {
            fastDateFormat1.format((Object) stringBuffer0, stringBuffer0, fieldPosition0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: java.lang.StringBuffer
        }
    }

    @Test(timeout = 4000)
    public void test781900() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        int int0 = 1;
        int int1 = (-2295);
        int int2 = 10;
        int int3 = 99;
        int int4 = 2848;
        int int5 = 1792;
        int int6 = 95;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat.getTimeInstance(1, timeZone0);
        MonthDay monthDay0 = MockMonthDay.of(1, 1);
        // Undeclared exception!
        try {
            ZoneId.from(monthDay0);
            fail("Expecting exception: DateTimeException");
        } catch (DateTimeException e) {
            //
            // Unable to obtain ZoneId from TemporalAccessor: --01-01 of type java.time.MonthDay
        }
    }

    @Test(timeout = 4000)
    public void test791901() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        String string0 = fastDateFormat0.format(0L);
        assertEquals("Thursday, January 1, 1970 12:00:00 AM GMT", string0);
    }

    @Test(timeout = 4000)
    public void test801902() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("\"\"v!j.#");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
        }
    }

    @Test(timeout = 4000)
    public void test811903() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test821904() throws Throwable {
        Locale locale0 = new Locale("T{X#,(0", "T{X#,(0", "T{X#,(0");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "oI\"g!s`4Dh3d9");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("Friday, February 14, 2014", string0);
    }

    @Test(timeout = 4000)
    public void test831905() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test831906() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test831907() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test841908() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test841909() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test851910() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        String string0 = fastDateFormat0.toString();
        assertEquals("FastDateFormat[]", string0);
    }

    @Test(timeout = 4000)
    public void test851911() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        String string0 = fastDateFormat0.toString();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test861912() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        FastDateFormat.getDateInstance(1, locale0);
        int int0 = 1;
        int int1 = (-2295);
        int int2 = 10;
        int int3 = 99;
        int int4 = 2848;
        int int5 = 1792;
        int int6 = 95;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat.getTimeInstance(1, timeZone0);
        MonthDay monthDay0 = MockMonthDay.of(1, 1);
        // Undeclared exception!
        try {
            ZoneId.from(monthDay0);
            fail("Expecting exception: DateTimeException");
        } catch (DateTimeException e) {
            //
            // Unable to obtain ZoneId from TemporalAccessor: --01-01 of type java.time.MonthDay
        }
    }

    @Test(timeout = 4000)
    public void test871913() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        fastDateFormat0.getLocale();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test881914() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, (TimeZone) null);
        assertEquals("h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test891915() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        fastDateFormat0.getPattern();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test901916() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        charArray0[0] = '^';
        charArray0[1] = 'j';
        charArray0[2] = '|';
        charArray0[3] = 'Q';
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2178);
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0);
        fastDateFormat0.equals(fastDateFormat1);
        FastDateFormat.getDateTimeInstance(0, 1);
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance((-2650), timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -2650
        }
    }
}
