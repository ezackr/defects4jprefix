/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:53:06 GMT 2023
 */
package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.junit.runner.RunWith;

public class LocaleUtilsTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        // Undeclared exception!
        try {
            LocaleUtils.toLocale("xp#&U");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid locale format: xp#&U
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        List<Locale> list0 = LocaleUtils.countriesByLanguage("");
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        List<Locale> list0 = LocaleUtils.availableLocaleList();
        assertEquals(160, list0.size());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        List<Locale> list0 = LocaleUtils.countriesByLanguage((String) null);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        List<Locale> list0 = LocaleUtils.languagesByCountry("TH");
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        List<Locale> list0 = LocaleUtils.languagesByCountry((String) null);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Locale locale0 = Locale.US;
        Locale locale1 = new Locale("en-US", "en-US", "en-US");
        List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
        assertEquals(4, list0.size());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Locale locale0 = Locale.US;
        Locale locale1 = new Locale("en-US", "en-US", "en-US");
        List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
        assertTrue(list0.contains(locale0));
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Locale locale0 = Locale.US;
        List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null, locale0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        // Undeclared exception!
        try {
            LocaleUtils.toLocale("vd`(pOev[");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid locale format: vd`(pOev[
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        // Undeclared exception!
        try {
            LocaleUtils.toLocale("lpLG");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid locale format: lpLG
        }
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        // Undeclared exception!
        try {
            LocaleUtils.toLocale("t06ct");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid locale format: t06ct
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Locale locale0 = LocaleUtils.toLocale("en");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        // Undeclared exception!
        try {
            LocaleUtils.toLocale("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid locale format:
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Locale locale0 = LocaleUtils.toLocale((String) null);
        assertNull(locale0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        // Undeclared exception!
        try {
            LocaleUtils.toLocale("|EQaw]eQB1e;oJf>2G,");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid locale format: |EQaw]eQB1e;oJf>2G,
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Set<Locale> set0 = LocaleUtils.availableLocaleSet();
        assertEquals(160, set0.size());
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
        assertEquals(2, list0.size());
    }
}
