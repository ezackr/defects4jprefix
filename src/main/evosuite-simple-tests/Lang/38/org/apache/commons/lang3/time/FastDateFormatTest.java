/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:11:18 GMT 2023
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import java.math.RoundingMode;
import java.nio.CharBuffer;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.junit.runner.RunWith;

public class FastDateFormatTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test0010() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertNotNull(date0);
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0020() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test0021() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0027() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        assertEquals("B:>]S[=_Pv8oQ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0028() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        assertEquals(13, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0029() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0030() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0031() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0032() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0037() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0038() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0039() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test0040() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0041() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test0042() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0043() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("B:>]S[=_Pv8oQ10/15/82 12:00 AM", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test0048() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(30, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test0049() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals("B:>]S[=_Pv8oQ10/15/82 12:00 AM", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test0050() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        assertEquals(30, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test0151() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0152() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0153() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0154() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0155() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0156() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0157() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0158() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0159() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test0160() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0161() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0162() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0163() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0164() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0165() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("2/2/02 10:12 AM", string0);
    }

    @Test(timeout = 4000)
    public void test0166() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0167() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0168() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0169() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62196126477000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=12,SECOND=3,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0170() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test0171() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test0172() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test0273() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test0274() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0275() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0276() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0277() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0278() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0279() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0280() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0281() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0282() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0283() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0284() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test0285() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0286() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test0287() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test0288() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test0289() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test0290() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test0291() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test0292() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test0293() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test0294() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test0295() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test0296() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test0297() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test0298() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test0299() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test02100() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test02101() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test02102() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test02103() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test02104() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test02105() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test02106() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("6");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.init();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test03107() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test03108() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test03109() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test03110() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test03111() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test03112() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test03113() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test03114() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test03115() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test03116() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test03117() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test03118() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test03119() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test03120() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals("U", string0);
    }

    @Test(timeout = 4000)
    public void test03121() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(7, intArray0.length);
    }

    @Test(timeout = 4000)
    public void test03122() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test03123() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test03124() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test03125() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[7];
        String string0 = fastDateFormat0.parseToken("Urk}#", intArray0);
        assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0 }, intArray0);
    }

    @Test(timeout = 4000)
    public void test04126() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test04127() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test04128() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test04129() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test04130() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test04131() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test04132() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test04133() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test04134() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test04135() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test04136() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test04137() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test04138() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test04139() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test04140() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test04143() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test04144() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test04146() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test04148() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test04149() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test04150() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test04151() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04152() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test04153() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test04154() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test04155() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test04156() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test04157() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test04158() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test04159() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test04160() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test05161() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test05162() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test05163() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test05164() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test05165() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test05166() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test05167() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test05168() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test05169() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test05170() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test05171() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test05172() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test05173() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test05174() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test05175() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test05176() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test05177() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertEquals("h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test05178() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test06179() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test06180() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test06181() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test06182() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test06183() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test06184() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test06185() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test06186() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test06187() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test06188() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test06189() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test06190() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test06191() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test06192() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test06193() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test06194() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test06195() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test06196() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test06197() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test06198() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test06199() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test06200() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test06201() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test06202() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test06203() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test06204() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test06205() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test06206() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test06207() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(14, int0);
    }

    @Test(timeout = 4000)
    public void test06208() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test06209() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test06210() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test06211() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test06212() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test06213() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test06214() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test06215() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test06216() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test06217() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test07218() throws Throwable {
        Locale locale0 = Locale.US;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test07219() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("USA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test07220() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("US", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test07221() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test07222() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test07223() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test07224() throws Throwable {
        Locale locale0 = Locale.US;
        assertEquals("en_US", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test07225() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test07226() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test07227() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test07228() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test07229() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test07230() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("USA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test07231() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("US", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test07232() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test07233() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test07234() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test07235() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("en_US", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test07236() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test07237() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test07238() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test08239() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test08240() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test08241() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test08242() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test08243() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test08244() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test08245() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test08246() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test08247() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test08248() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test08249() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test08250() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test08251() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test08252() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test08253() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test08254() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test08255() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test08256() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test08257() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test08258() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test08259() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test08260() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test08261() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test08262() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test08263() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test08264() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test08265() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test08266() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test08267() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test08268() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test08269() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&'C", timeZone0, locale0);
        assertEquals("&'C", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test09270() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test09271() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test09272() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test09273() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test09274() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test09275() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test09276() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test09277() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test10278() throws Throwable {
        Locale locale0 = Locale.ITALY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test10279() throws Throwable {
        Locale locale0 = Locale.ITALY;
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test10280() throws Throwable {
        Locale locale0 = Locale.ITALY;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test10281() throws Throwable {
        Locale locale0 = Locale.ITALY;
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test10282() throws Throwable {
        Locale locale0 = Locale.ITALY;
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test10283() throws Throwable {
        Locale locale0 = Locale.ITALY;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test10284() throws Throwable {
        Locale locale0 = Locale.ITALY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test10285() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test10286() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test10287() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test10288() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test10289() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test10290() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals("ITA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test10291() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test10292() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals("it_IT", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test10293() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals("IT", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test10294() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test10295() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test10296() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test10297() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertEquals("&.", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test10298() throws Throwable {
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&.", locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test11299() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'L[d");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test11300() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'L[d");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test11301() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'L[d");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test11302() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'L[d");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test11303() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'L[d");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test11304() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'L[d");
        assertEquals("'L[d", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test11305() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'L[d");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test11306() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'L[d");
        assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test12307() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test12308() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test12309() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test12310() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test12311() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test12312() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
        assertEquals("MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test12313() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
        assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test12314() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test13315() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test13316() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test13317() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test13318() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test13319() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test13320() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test13321() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test13322() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test14323() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test14324() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test14325() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test14326() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test14327() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test14328() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test14329() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test14330() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test14331() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test14332() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test14333() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test14334() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test14335() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test14336() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test14337() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test14338() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test14339() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test14340() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test14341() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test14342() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test14343() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test14344() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test14345() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test14346() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test14347() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test14348() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test14349() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("Wed Jun 01 14:48:00 GMT 1910", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test14350() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test14351() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test14352() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test14353() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test15354() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test15355() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test15356() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test15357() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test15358() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test15359() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test15360() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test15361() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test15362() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test15363() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test15364() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test15365() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test15366() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test15367() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test15368() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test15369() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test15370() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test15371() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test15372() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test15373() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test15374() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test15375() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test15376() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test15377() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test15378() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test15379() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test15380() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test15381() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test15382() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test15383() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test15384() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test15385() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test15386() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test15387() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test15388() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("de", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test15389() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test15390() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test15391() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test15392() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test15393() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test15394() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test15395() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        assertEquals("Mon Aug 04 09:06:56 GMT 949", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test16396() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test16397() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test16398() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test16399() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test16400() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test16401() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test16402() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test16403() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test16404() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test16405() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test16406() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test16407() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test16408() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test16409() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test16410() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test16411() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test16412() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals("", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test16413() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test16414() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test16415() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test16416() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test16417() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test16418() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test16419() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test16420() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test16421() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test16422() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test16423() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test16424() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test16425() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test16426() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test16427() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test16428() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test16429() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test16430() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test16431() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test16432() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test16433() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test16434() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test16435() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDateFormat0.format(calendar0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test17436() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test17437() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test17438() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test17439() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test17440() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test17441() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test17442() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test17443() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test17444() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test17445() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test17446() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test17447() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test17448() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test17449() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test17450() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test17451() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test17452() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test17453() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test17454() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test17455() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test17456() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test17457() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test17458() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test17459() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test17460() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test17461() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test17462() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test17463() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test17464() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
        assertEquals("", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test18465() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test18466() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test18467() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test18468() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test18469() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test18470() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test18471() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test18472() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test18473() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test18474() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertNotNull(calendar0);
    }

    @Test(timeout = 4000)
    public void test18475() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test18476() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test18477() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test18478() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test18479() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test18480() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test18481() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test18482() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test18483() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        assertEquals("B:>]S[=_Pv8oQ", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test18484() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        assertEquals(13, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test18485() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test18486() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test18487() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test18488() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test18489() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test18490() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test18491() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test18492() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test18493() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test18494() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test18495() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test18496() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test18497() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test18498() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertTrue(calendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test18499() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(1, calendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test18500() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test18501() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test18502() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals("B:>]S[=_Pv8oQ2/14/14 8:21 PM", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test18503() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(28, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test18504() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals("B:>]S[=_Pv8oQ2/14/14 8:21 PM", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test18505() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "B:>]S[=_Pv8oQ");
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        assertEquals(28, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test19506() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test19507() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test19508() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test19509() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test19510() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test19511() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test19512() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test19513() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test19514() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        int[] intArray0 = new int[5];
        // Undeclared exception!
        try {
            fastDateFormat0.parseToken("", intArray0);
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test20515() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test20516() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test20517() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test20518() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test20519() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test20520() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test20521() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test20522() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test20523() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        int[] intArray0 = new int[6];
        // Undeclared exception!
        try {
            fastDateFormat0.parseToken((String) null, intArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test21524() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test21525() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test21526() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test21527() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test21528() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test21529() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test21530() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test21531() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test21532() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[0];
        // Undeclared exception!
        try {
            fastDateFormat0.parseToken("u+drihRG.lY\"~6", intArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
        }
    }

    @Test(timeout = 4000)
    public void test22533() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test22534() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertEquals(3, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test22535() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test22536() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test22537() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test22538() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test22539() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test22540() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test22541() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test22542() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test22543() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test22544() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test22545() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test22546() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test22547() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test22548() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test22549() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test22550() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test22551() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(3, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test22552() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test22553() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test22554() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test22555() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test22556() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test22557() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test22558() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test22559() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test22560() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test22561() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test22562() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test22563() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test22564() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test22565() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
        // Undeclared exception!
        try {
            fastDateFormat0.parseObject("2;Og@Nt", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test23566() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test23567() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test23568() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertEquals(3673, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test23569() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=3673,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test23570() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test23571() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test23572() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, "");
        // Undeclared exception!
        try {
            FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 3673, (Locale) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test24573() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test24574() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        assertEquals("org.apache.commons.lang3.time.FastDateFormat$TextField", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test24575() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateFormat$TextField,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test24576() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test24577() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test24578() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test24579() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        Locale locale0 = Locale.KOREA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test24580() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        Locale locale0 = Locale.KOREA;
        assertEquals("KR", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test24581() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        Locale locale0 = Locale.KOREA;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test24582() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        Locale locale0 = Locale.KOREA;
        assertEquals("KOR", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test24583() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        Locale locale0 = Locale.KOREA;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test24584() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        Locale locale0 = Locale.KOREA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test24585() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        Locale locale0 = Locale.KOREA;
        assertEquals("ko_KR", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test24586() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$TextField");
        Locale locale0 = Locale.KOREA;
        // Undeclared exception!
        try {
            FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 122, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal style: 122
        }
    }

    @Test(timeout = 4000)
    public void test25587() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test25588() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test25589() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(1390, timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 1390
        }
    }

    @Test(timeout = 4000)
    public void test26590() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance(518, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 518
        }
    }

    @Test(timeout = 4000)
    public void test27591() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance((-438));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -438
        }
    }

    @Test(timeout = 4000)
    public void test28592() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(276, 276, (TimeZone) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 276
        }
    }

    @Test(timeout = 4000)
    public void test29593() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test29594() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test29595() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test29596() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test29597() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test29598() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test29599() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test29600() throws Throwable {
        Locale locale0 = Locale.CANADA;
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance((-750), (-750), locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -750
        }
    }

    @Test(timeout = 4000)
    public void test30601() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(11, 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 11
        }
    }

    @Test(timeout = 4000)
    public void test31602() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test31603() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test31604() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance((-2650), timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style -2650
        }
    }

    @Test(timeout = 4000)
    public void test32605() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test32606() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test32607() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test32608() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test32609() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test32610() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test32611() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test32612() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(43, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 43
        }
    }

    @Test(timeout = 4000)
    public void test33613() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(1559);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 1559
        }
    }

    @Test(timeout = 4000)
    public void test34614() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test34615() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test34616() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test34617() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test34618() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test34619() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test34620() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals("", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test34621() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test34622() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        // Undeclared exception!
        try {
            fastDateFormat0.format((Date) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test35623() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test35624() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test35625() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test35626() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test35627() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test35628() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test35629() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test35630() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test35631() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test35632() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test35633() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test35634() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test35635() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test35636() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("ko", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test35637() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("ko", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test35638() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test35639() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test35640() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("kor", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test35641() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test35642() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals("9]Y~%Db~VyH", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test35643() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test35644() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0, 0, 3);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test35645() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("9]Y~%Db~VyH", (TimeZone) null, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0, 0, 3);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test36646() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test36647() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36648() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36649() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36650() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36651() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36652() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36653() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test36654() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test36655() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test36656() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test36657() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test36658() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test36659() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test36660() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test36661() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test36662() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test36663() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test36664() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test36665() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test36666() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test36667() throws Throwable {
        Locale locale0 = Locale.ROOT;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((-2437L), (StringBuffer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test37668() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test37669() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test37670() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test37671() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test37672() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test37673() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test37674() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test37675() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test37676() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test37677() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test37678() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test37679() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test37680() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test37681() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test37682() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test37683() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test38684() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test38685() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test38686() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test38687() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test38688() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test38689() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test38690() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test38691() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test38692() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test38693() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertNotNull(charBuffer0);
    }

    @Test(timeout = 4000)
    public void test38694() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test38695() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertFalse(charBuffer0.isDirect());
    }

    @Test(timeout = 4000)
    public void test38696() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test38697() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertTrue(charBuffer0.hasArray());
    }

    @Test(timeout = 4000)
    public void test38698() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertFalse(charBuffer0.isReadOnly());
    }

    @Test(timeout = 4000)
    public void test38699() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charBuffer0.remaining());
    }

    @Test(timeout = 4000)
    public void test38700() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertTrue(charBuffer0.hasRemaining());
    }

    @Test(timeout = 4000)
    public void test38701() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(0, charBuffer0.position());
    }

    @Test(timeout = 4000)
    public void test38702() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charBuffer0.limit());
    }

    @Test(timeout = 4000)
    public void test38703() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(0, charBuffer0.arrayOffset());
    }

    @Test(timeout = 4000)
    public void test38704() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test38705() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertEquals(4, charBuffer0.capacity());
    }

    @Test(timeout = 4000)
    public void test38706() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test38707() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test38708() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test38709() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertFalse(charBuffer0.isDirect());
    }

    @Test(timeout = 4000)
    public void test38710() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test38711() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertTrue(charBuffer0.hasArray());
    }

    @Test(timeout = 4000)
    public void test38712() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertFalse(charBuffer0.isReadOnly());
    }

    @Test(timeout = 4000)
    public void test38713() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charBuffer0.remaining());
    }

    @Test(timeout = 4000)
    public void test38714() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertTrue(charBuffer0.hasRemaining());
    }

    @Test(timeout = 4000)
    public void test38715() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(0, charBuffer0.position());
    }

    @Test(timeout = 4000)
    public void test38716() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charBuffer0.limit());
    }

    @Test(timeout = 4000)
    public void test38717() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(0, charBuffer0.arrayOffset());
    }

    @Test(timeout = 4000)
    public void test38718() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test38719() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, charBuffer0.capacity());
    }

    @Test(timeout = 4000)
    public void test38720() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals(4, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test38721() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test38722() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test38723() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test38724() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test38725() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test38726() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test38727() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test38728() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charArray0.length);
    }

    @Test(timeout = 4000)
    public void test38729() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test38730() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test38731() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test38732() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test38733() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test38734() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test38735() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test38736() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test38737() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62352892746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=7,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=54,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test38738() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertFalse(charBuffer0.isDirect());
    }

    @Test(timeout = 4000)
    public void test38739() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test38740() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(charBuffer0.hasArray());
    }

    @Test(timeout = 4000)
    public void test38741() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertFalse(charBuffer0.isReadOnly());
    }

    @Test(timeout = 4000)
    public void test38742() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charBuffer0.remaining());
    }

    @Test(timeout = 4000)
    public void test38743() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertTrue(charBuffer0.hasRemaining());
    }

    @Test(timeout = 4000)
    public void test38744() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, charBuffer0.position());
    }

    @Test(timeout = 4000)
    public void test38745() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charBuffer0.limit());
    }

    @Test(timeout = 4000)
    public void test38746() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(0, charBuffer0.arrayOffset());
    }

    @Test(timeout = 4000)
    public void test38747() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test38748() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(4, charBuffer0.capacity());
    }

    @Test(timeout = 4000)
    public void test38749() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000Saturday, February 14, 0007 12:00:54 AM GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test38750() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(47, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test38751() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals("\u0000\u0000\u0000\u0000Saturday, February 14, 0007 12:00:54 AM GMT", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test38752() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertEquals(47, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test38753() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
        char[] charArray0 = new char[4];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test39754() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test39755() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39756() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39757() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39758() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39759() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39760() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test39761() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39762() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39763() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        assertEquals("k", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test39764() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39765() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test39766() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test39767() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test39768() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test39769() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test39770() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test39771() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test39772() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        assertNotNull(zoneId0);
    }

    @Test(timeout = 4000)
    public void test39773() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39774() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test39775() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39776() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test39777() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("Greenwich Mean Time", string0);
    }

    @Test(timeout = 4000)
    public void test39778() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39779() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test39780() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test39781() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test39782() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test39783() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test39784() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test39785() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39786() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39787() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39788() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39789() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test39790() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39791() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39792() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertEquals("k", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test39793() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39794() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test39795() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        assertNotNull(locale1);
    }

    @Test(timeout = 4000)
    public void test39796() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test39797() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        assertEquals("", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test39798() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        assertEquals("", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test39799() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        assertEquals("", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test39800() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        assertEquals("", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test39801() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        assertEquals("", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test39802() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test39803() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test39804() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39805() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39806() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39807() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39808() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test39809() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertNotSame(locale0, locale1);
    }

    @Test(timeout = 4000)
    public void test39810() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test39811() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test39812() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test39813() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test39814() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test39815() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test39816() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test39817() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39818() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals(27, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39819() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertEquals("dd/MM/yy h:mm:ss z a", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test39820() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertFalse(locale0.equals((Object) locale1));
    }

    @Test(timeout = 4000)
    public void test39821() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test39822() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39823() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39824() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39825() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39826() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test39827() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("k", string1);
    }

    @Test(timeout = 4000)
    public void test39828() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test39829() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39830() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39831() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals("k", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test39832() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39833() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test39834() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        assertFalse(string1.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test39835() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39836() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39837() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39838() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39839() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertNotNull(timeZone1);
    }

    @Test(timeout = 4000)
    public void test39840() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertSame(timeZone0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test39841() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test39842() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertSame(timeZone1, timeZone0);
    }

    @Test(timeout = 4000)
    public void test39843() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39844() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39845() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("k", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test39846() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39847() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone1.getID());
    }

    @Test(timeout = 4000)
    public void test39848() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test39849() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39850() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39851() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39852() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39853() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertNotNull(fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test39854() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertSame(timeZone0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test39855() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertNotSame(fastDateFormat2, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test39856() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertNotSame(fastDateFormat2, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test39857() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39858() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals("M/d/yy", fastDateFormat2.getPattern());
    }

    @Test(timeout = 4000)
    public void test39859() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertEquals(10, fastDateFormat2.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39860() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertTrue(fastDateFormat2.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39861() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test39862() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test39863() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        assertNotNull(parsePosition0);
    }

    @Test(timeout = 4000)
    public void test39864() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        assertEquals("java.text.ParsePosition[index=-888,errorIndex=-1]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test39865() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        assertEquals((-1), parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test39866() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        assertEquals((-888), parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test39867() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39868() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39869() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39870() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39871() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test39872() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertNotSame(locale0, locale1);
    }

    @Test(timeout = 4000)
    public void test39873() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test39874() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertNotSame(fastDateFormat1, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test39875() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test39876() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test39877() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test39878() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test39879() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test39880() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test39881() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39882() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals(27, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39883() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals("dd/MM/yy h:mm:ss z a", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test39884() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test39885() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals(0, parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test39886() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertEquals(0, parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test39887() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertFalse(locale0.equals((Object) locale1));
    }

    @Test(timeout = 4000)
    public void test39888() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test39889() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test39890() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertNotNull(string2);
    }

    @Test(timeout = 4000)
    public void test39891() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertEquals("", string2);
    }

    @Test(timeout = 4000)
    public void test39892() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test39893() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertEquals("", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test39894() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertEquals("", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test39895() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertEquals("", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test39896() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertEquals("", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test39897() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertEquals("", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test39898() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test39899() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test39900() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertFalse(string2.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test39901() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        assertFalse(string2.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test39902() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test39903() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertNotNull(decimalFormat0);
    }

    @Test(timeout = 4000)
    public void test39904() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("#,##0.###", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test39905() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test39906() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test39907() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test39908() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(1, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test39909() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test39910() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test39911() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test39912() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test39913() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test39914() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test39915() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test39916() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test39917() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test39918() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test39919() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test39920() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        assertEquals(3, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test39921() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test39922() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test39923() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test39924() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39925() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39926() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39927() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39928() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test39929() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(timeZone0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test39930() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test39931() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test39932() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertNotSame(fastDateFormat0, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test39933() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test39934() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39935() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(2, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test39936() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("12", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test39937() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39938() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("k", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test39939() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39940() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals(2, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test39941() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("12", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test39942() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertEquals("Sat Feb 01 12:12:00 GMT 1902", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test39943() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test39944() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test39945() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39946() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39947() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39948() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39949() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertNotNull(stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test39950() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertSame(timeZone0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test39951() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test39952() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test39953() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test39954() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertNotSame(fastDateFormat0, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test39955() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test39956() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test39957() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertSame(stringBuffer2, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test39958() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertSame(stringBuffer2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test39959() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test39960() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals("120", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test39961() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test39962() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test39963() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals("k", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test39964() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test39965() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals(3, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test39966() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals("120", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test39967() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals("120", stringBuffer2.toString());
    }

    @Test(timeout = 4000)
    public void test39968() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals(3, stringBuffer2.length());
    }

    @Test(timeout = 4000)
    public void test39969() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertEquals("Sat Feb 01 12:12:00 GMT 1902", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test39970() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test39971() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test39972() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test39973() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        assertEquals(945, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test39974() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        assertEquals("java.text.FieldPosition[field=945,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
    }

    @Test(timeout = 4000)
    public void test39975() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test39976() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test39977() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test39978() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test39979() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test39980() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test39981() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertNotNull(stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test39982() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(timeZone0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test39983() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test39984() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test39985() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test39986() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test39987() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertNotSame(fastDateFormat0, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test39988() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test39989() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test39990() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test39991() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(stringBuffer3, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test39992() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(stringBuffer3, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test39993() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertSame(stringBuffer3, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test39994() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("#,##0.###", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test39995() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test39996() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test39997() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test39998() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(1, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test39999() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test391000() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test391001() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test391002() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test391003() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test391004() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test391005() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test391006() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test391007() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test391008() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test391009() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test391010() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(3, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test391011() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test391012() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(9, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test391013() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("120-1,837", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test391014() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test391015() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("k", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test391016() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test391017() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("120-1,837", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test391018() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(9, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test391019() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(945, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test391020() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("java.text.FieldPosition[field=945,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
    }

    @Test(timeout = 4000)
    public void test391021() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test391022() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test391023() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("120-1,837", stringBuffer3.toString());
    }

    @Test(timeout = 4000)
    public void test391024() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals(9, stringBuffer3.length());
    }

    @Test(timeout = 4000)
    public void test391025() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertEquals("Sat Feb 01 12:12:00 GMT 1902", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test391026() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test391027() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test391028() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test391029() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test391030() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test391031() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test391032() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertNotNull(stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test391033() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(timeZone0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test391034() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test391035() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test391036() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer0, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test391037() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test391038() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test391039() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertNotSame(fastDateFormat0, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test391040() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test391041() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer1, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test391042() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test391043() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test391044() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer3, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test391045() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer3, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test391046() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer3, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test391047() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer3, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test391048() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer4, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test391049() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer4, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test391050() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer4, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test391051() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertSame(stringBuffer4, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test391052() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("#,##0.###", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test391053() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test391054() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test391055() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test391056() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(1, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test391057() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test391058() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test391059() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test391060() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test391061() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test391062() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test391063() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test391064() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test391065() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test391066() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test391067() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test391068() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(3, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test391069() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test391070() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(25, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test391071() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("120-1,837%#AZm[miAtF$[5E-", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test391072() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test391073() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("k", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test391074() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test391075() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(25, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test391076() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("120-1,837%#AZm[miAtF$[5E-", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test391077() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(945, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test391078() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("java.text.FieldPosition[field=945,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
    }

    @Test(timeout = 4000)
    public void test391079() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test391080() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test391081() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(25, stringBuffer3.length());
    }

    @Test(timeout = 4000)
    public void test391082() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("120-1,837%#AZm[miAtF$[5E-", stringBuffer3.toString());
    }

    @Test(timeout = 4000)
    public void test391083() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("120-1,837%#AZm[miAtF$[5E-", stringBuffer4.toString());
    }

    @Test(timeout = 4000)
    public void test391084() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals(25, stringBuffer4.length());
    }

    @Test(timeout = 4000)
    public void test391085() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertEquals("Sat Feb 01 12:12:00 GMT 1902", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test391086() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test391087() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test391088() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test391089() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test391090() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test391091() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test391092() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test391093() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test391094() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test391095() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test391096() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertNotNull(stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test391097() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(timeZone0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test391098() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer0, stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test391099() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test391100() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test391101() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer0, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test391102() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test391103() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertNotSame(fastDateFormat0, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test391104() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertNotSame(fastDateFormat0, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test391105() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer1, stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test391106() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test391107() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer1, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test391108() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test391109() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test391110() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertNotSame(locale0, locale1);
    }

    @Test(timeout = 4000)
    public void test391111() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer3, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test391112() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer3, stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test391113() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer3, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test391114() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer3, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test391115() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer3, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test391116() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer5, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test391117() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer5, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test391118() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer5, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test391119() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer5, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test391120() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertSame(stringBuffer5, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test391121() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test391122() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertNotSame(fastDateFormat1, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test391123() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("#,##0.###", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test391124() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test391125() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test391126() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test391127() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(1, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test391128() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test391129() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test391130() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test391131() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test391132() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test391133() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test391134() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test391135() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test391136() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test391137() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test391138() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test391139() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(3, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test391140() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test391141() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("120-1,837%#AZm[miAtF$[5E-01/02/02 12:12:00 GMT PM", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test391142() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(49, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test391143() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test391144() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("k", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test391145() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test391146() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(49, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test391147() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("120-1,837%#AZm[miAtF$[5E-01/02/02 12:12:00 GMT PM", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test391148() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test391149() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test391150() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test391151() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test391152() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test391153() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test391154() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(945, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test391155() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("java.text.FieldPosition[field=945,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
    }

    @Test(timeout = 4000)
    public void test391156() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test391157() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test391158() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(49, stringBuffer3.length());
    }

    @Test(timeout = 4000)
    public void test391159() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("120-1,837%#AZm[miAtF$[5E-01/02/02 12:12:00 GMT PM", stringBuffer3.toString());
    }

    @Test(timeout = 4000)
    public void test391160() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("120-1,837%#AZm[miAtF$[5E-01/02/02 12:12:00 GMT PM", stringBuffer5.toString());
    }

    @Test(timeout = 4000)
    public void test391161() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(49, stringBuffer5.length());
    }

    @Test(timeout = 4000)
    public void test391162() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test391163() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals(27, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test391164() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("dd/MM/yy h:mm:ss z a", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test391165() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertEquals("Sat Feb 01 12:12:00 GMT 1902", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test391166() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test391167() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test391168() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertFalse(locale0.equals((Object) locale1));
    }

    @Test(timeout = 4000)
    public void test391169() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test391170() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        ZoneId zoneId0 = timeZone0.toZoneId();
        boolean boolean0 = timeZone0.observesDaylightTime();
        String string0 = timeZone0.getDisplayName(locale0);
        boolean boolean1 = fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        String string1 = fastDateFormat0.getPattern();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        Object object0 = fastDateFormat1.parseObject("", parsePosition0);
        String string2 = locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        StringBuffer stringBuffer2 = stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer4 = stringBuffer3.append("%#AZm[miAtF$[5E-");
        StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test401171() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test401172() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test401173() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        assertEquals("java.util.SimpleTimeZone[id=$(@RsifXZVY_3`,offset=-1907,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test401174() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        assertEquals("$(@RsifXZVY_3`", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test401175() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        assertEquals((-1907), simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test401176() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test401177() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test401178() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        assertEquals("0|@e(WN#v=", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test401179() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test401180() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        assertEquals("0|@e(wn#v=", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test401181() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test401182() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        assertEquals("0|@e(wn#v=__0|@e(WN#v=", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test401183() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test401184() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test401185() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test401186() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test401187() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test401188() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test401189() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("java.util.SimpleTimeZone[id=$(@RsifXZVY_3`,offset=-1907,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test401190() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("$(@RsifXZVY_3`", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test401191() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals((-1907), simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test401192() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test401193() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("0|@e(WN#v=", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test401194() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test401195() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("0|@e(wn#v=", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test401196() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test401197() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("0|@e(wn#v=__0|@e(WN#v=", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test401198() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test401199() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals(55, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test401200() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), "$(@RsifXZVY_3`");
        Locale locale0 = new Locale("0|@e(WN#v=", "", "0|@e(WN#v=");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test411201() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test411202() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test411203() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("zh", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test411204() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test411205() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test411206() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test411207() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test411208() throws Throwable {
        Locale locale0 = Locale.CHINESE;
        // Undeclared exception!
        try {
            FastDateFormat.getDateTimeInstance(801, 2210, (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style 2210
        }
    }

    @Test(timeout = 4000)
    public void test421209() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test421210() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test421211() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
        // Undeclared exception!
        try {
            FastDateFormat.getTimeInstance((-978), timeZone0, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal time style -978
        }
    }

    @Test(timeout = 4000)
    public void test431212() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test431213() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test431214() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test431215() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test431216() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test431217() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test431218() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test431219() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test431220() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test431221() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test431222() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test431223() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test431224() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test431225() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test431226() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test431227() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test431228() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test431229() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test431230() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test431231() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test431232() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test431233() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test431234() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test431235() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test441236() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(65, (TimeZone) null, (Locale) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 65
        }
    }

    @Test(timeout = 4000)
    public void test451237() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test451238() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451239() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451240() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test451241() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451242() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451243() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451244() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451245() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451246() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451247() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test451248() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("GMT", string0);
    }

    @Test(timeout = 4000)
    public void test451249() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451250() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451251() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451252() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451253() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451254() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451255() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451256() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertNotNull(string1);
    }

    @Test(timeout = 4000)
    public void test451257() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("GMT", string1);
    }

    @Test(timeout = 4000)
    public void test451258() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451259() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451260() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451261() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451262() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451263() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451264() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451265() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test451266() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test451267() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test451268() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test451269() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test451270() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451271() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test451272() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test451273() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test451274() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        assertNotNull(long0);
    }

    @Test(timeout = 4000)
    public void test451275() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        assertEquals(1L, (long) long0);
    }

    @Test(timeout = 4000)
    public void test451276() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test451277() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451278() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertNotNull(decimalFormat0);
    }

    @Test(timeout = 4000)
    public void test451279() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451280() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451281() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451282() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451283() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451284() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451285() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451286() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451287() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test451288() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test451289() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test451290() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test451291() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451292() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test451293() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test451294() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test451295() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test451296() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test451297() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test451298() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test451299() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test451300() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451301() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test451302() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451303() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        assertEquals(3, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test451304() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        assertEquals("GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test451305() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test451306() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test451307() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test451308() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test451309() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451310() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451311() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451312() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451313() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451314() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451315() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451316() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451317() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451318() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451319() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451320() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test451321() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test451322() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test451323() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test451324() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451325() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test451326() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test451327() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test451328() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test451329() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test451330() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test451331() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test451332() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test451333() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451334() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test451335() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("GMT0 %", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test451336() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(6, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test451337() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test451338() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test451339() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test451340() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals("GMT0 %", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test451341() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        assertEquals(6, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test451342() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertNotNull(stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451343() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451344() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451345() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertSame(stringBuffer2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451346() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertSame(stringBuffer2, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451347() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertEquals("GMT0 %GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test451348() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertEquals(9, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test451349() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertEquals("GMT0 %GMT", stringBuffer2.toString());
    }

    @Test(timeout = 4000)
    public void test451350() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        assertEquals(9, stringBuffer2.length());
    }

    @Test(timeout = 4000)
    public void test451351() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertNotNull(stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451352() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451353() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451354() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451355() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451356() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451357() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451358() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer3, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451359() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer3, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451360() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertSame(stringBuffer3, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451361() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451362() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451363() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451364() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451365() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451366() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451367() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451368() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451369() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test451370() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test451371() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test451372() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test451373() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451374() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test451375() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test451376() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test451377() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test451378() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test451379() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test451380() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test451381() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test451382() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451383() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test451384() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(13, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test451385() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("trueGMT0 %GMT", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test451386() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test451387() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test451388() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test451389() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(13, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test451390() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("trueGMT0 %GMT", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test451391() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals("trueGMT0 %GMT", stringBuffer3.toString());
    }

    @Test(timeout = 4000)
    public void test451392() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        assertEquals(13, stringBuffer3.length());
    }

    @Test(timeout = 4000)
    public void test451393() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        assertNotNull(mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test451394() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertNotNull(stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451395() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer4, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451396() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer4, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451397() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer4, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451398() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer4, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451399() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451400() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451401() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451402() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer0, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451403() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451404() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451405() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer1, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451406() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451407() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", stringBuffer4.toString());
    }

    @Test(timeout = 4000)
    public void test451408() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(510, stringBuffer4.length());
    }

    @Test(timeout = 4000)
    public void test451409() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451410() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451411() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451412() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451413() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451414() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451415() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451416() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451417() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451418() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test451419() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test451420() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test451421() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test451422() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451423() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test451424() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test451425() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test451426() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test451427() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test451428() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test451429() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test451430() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test451431() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451432() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test451433() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(510, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test451434() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test451435() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test451436() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test451437() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test451438() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(510, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test451439() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test451440() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test451441() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
    }

    @Test(timeout = 4000)
    public void test451442() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
    }

    @Test(timeout = 4000)
    public void test451443() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        assertTrue(mockGregorianCalendar0.isLenient());
    }

    @Test(timeout = 4000)
    public void test451444() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test451445() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test451446() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test451447() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test451448() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertNotNull(stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test451449() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451450() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451451() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451452() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451453() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451454() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451455() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test451456() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451457() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451458() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451459() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451460() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451461() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451462() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451463() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test451464() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451465() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(535, stringBuffer5.length());
    }

    @Test(timeout = 4000)
    public void test451466() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]Thursday, January 1, 1970", stringBuffer5.toString());
    }

    @Test(timeout = 4000)
    public void test451467() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451468() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451469() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451470() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451471() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451472() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451473() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test451474() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test451475() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test451476() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451477() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451478() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test451479() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test451480() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test451481() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test451482() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451483() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test451484() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test451485() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test451486() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test451487() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test451488() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test451489() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test451490() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test451491() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451492() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test451493() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(535, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test451494() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]Thursday, January 1, 1970", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test451495() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test451496() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test451497() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test451498() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]Thursday, January 1, 1970", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test451499() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        assertEquals(535, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test451500() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test451501() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test451502() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test451503() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test451504() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertNotNull(stringBuffer6);
    }

    @Test(timeout = 4000)
    public void test451505() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer6);
    }

    @Test(timeout = 4000)
    public void test451506() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451507() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451508() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451509() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451510() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer5, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451511() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer6, stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test451512() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer6, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451513() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer6, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451514() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer6, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451515() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer6, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451516() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer6, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451517() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451518() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test451519() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test451520() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451521() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer6);
    }

    @Test(timeout = 4000)
    public void test451522() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer0, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451523() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer3);
    }

    @Test(timeout = 4000)
    public void test451524() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer6);
    }

    @Test(timeout = 4000)
    public void test451525() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test451526() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer4);
    }

    @Test(timeout = 4000)
    public void test451527() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test451528() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertSame(stringBuffer1, stringBuffer5);
    }

    @Test(timeout = 4000)
    public void test451529() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451530() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(560, stringBuffer5.length());
    }

    @Test(timeout = 4000)
    public void test451531() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]Thursday, January 1, 1970Thursday, January 1, 1970", stringBuffer5.toString());
    }

    @Test(timeout = 4000)
    public void test451532() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]Thursday, January 1, 1970Thursday, January 1, 1970", stringBuffer6.toString());
    }

    @Test(timeout = 4000)
    public void test451533() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(560, stringBuffer6.length());
    }

    @Test(timeout = 4000)
    public void test451534() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451535() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451536() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451537() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451538() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451539() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451540() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test451541() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test451542() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test451543() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451544() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(0, decimalFormat0.getMinimumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451545() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertTrue(decimalFormat0.isGroupingUsed());
    }

    @Test(timeout = 4000)
    public void test451546() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertFalse(decimalFormat0.isParseBigDecimal());
    }

    @Test(timeout = 4000)
    public void test451547() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertFalse(decimalFormat0.isParseIntegerOnly());
    }

    @Test(timeout = 4000)
    public void test451548() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(3, decimalFormat0.getGroupingSize());
    }

    @Test(timeout = 4000)
    public void test451549() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(0, decimalFormat0.getMaximumFractionDigits());
    }

    @Test(timeout = 4000)
    public void test451550() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test451551() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(" %", decimalFormat0.getNegativeSuffix());
    }

    @Test(timeout = 4000)
    public void test451552() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
    }

    @Test(timeout = 4000)
    public void test451553() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("-", decimalFormat0.getNegativePrefix());
    }

    @Test(timeout = 4000)
    public void test451554() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("", decimalFormat0.getPositivePrefix());
    }

    @Test(timeout = 4000)
    public void test451555() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(100, decimalFormat0.getMultiplier());
    }

    @Test(timeout = 4000)
    public void test451556() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(" %", decimalFormat0.getPositiveSuffix());
    }

    @Test(timeout = 4000)
    public void test451557() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("#,##0 %", decimalFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test451558() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
    }

    @Test(timeout = 4000)
    public void test451559() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
    }

    @Test(timeout = 4000)
    public void test451560() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(560, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test451561() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]Thursday, January 1, 1970Thursday, January 1, 1970", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test451562() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test451563() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals((-1), fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test451564() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test451565() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals(560, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test451566() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        assertEquals("trueGMT0 %GMTorg.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]Thursday, January 1, 1970Thursday, January 1, 1970", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test451567() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test451568() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test451569() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test451570() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test451571() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test451572() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test451573() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451574() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451575() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451576() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451577() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451578() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451579() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451580() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals(10, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test451581() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertEquals("yyyy-MM-dd", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test451582() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test451583() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test451584() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertNotNull(string2);
    }

    @Test(timeout = 4000)
    public void test451585() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("Heure de Greenwich", string2);
    }

    @Test(timeout = 4000)
    public void test451586() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test451587() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test451588() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test451589() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("fr", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test451590() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test451591() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("fr_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test451592() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertEquals("fra", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test451593() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertFalse(string2.equals((Object) string1));
    }

    @Test(timeout = 4000)
    public void test451594() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeZone.setDefault(timeZone0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = timeZone0.getDisplayName(false, 0, locale0);
        String string1 = timeZone0.getDisplayName(false, 0, locale0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
        Long long0 = new Long(1L);
        boolean boolean0 = timeZone0.observesDaylightTime();
        DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GMT");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
        StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) "GMT");
        StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
        StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
        StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
        String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        assertFalse(string2.equals((Object) string0));
    }

    @Test(timeout = 4000)
    public void test461595() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test461596() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461597() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461598() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461599() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461600() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461601() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461602() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461603() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461604() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461605() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test461606() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461607() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461608() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461609() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461610() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461611() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461612() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461613() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test461614() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertNotNull(stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test461615() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals("", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test461616() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        assertEquals(0, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test461617() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertNotNull(parsePosition0);
    }

    @Test(timeout = 4000)
    public void test461618() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertEquals((-2803), parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test461619() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertEquals((-1), parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test461620() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        assertEquals("java.text.ParsePosition[index=-2803,errorIndex=-1]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test461621() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461622() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461623() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461624() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461625() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test461626() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461627() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461628() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461629() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461630() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461631() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461632() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461633() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test461634() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, parsePosition0.getIndex());
    }

    @Test(timeout = 4000)
    public void test461635() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals(0, parsePosition0.getErrorIndex());
    }

    @Test(timeout = 4000)
    public void test461636() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
    }

    @Test(timeout = 4000)
    public void test461637() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertNotNull(stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test461638() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test461639() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertSame(stringBuffer1, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test461640() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals(4, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test461641() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals("null", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test461642() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals(4, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test461643() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        assertEquals("null", stringBuffer1.toString());
    }

    @Test(timeout = 4000)
    public void test461644() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461645() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461646() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461647() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461648() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertNotNull(stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test461649() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test461650() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertSame(stringBuffer0, stringBuffer2);
    }

    @Test(timeout = 4000)
    public void test461651() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertSame(stringBuffer2, stringBuffer1);
    }

    @Test(timeout = 4000)
    public void test461652() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertSame(stringBuffer2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test461653() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461654() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461655() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461656() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461657() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461658() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461659() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461660() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test461661() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals(29, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test461662() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals("nullThursday, January 1, 1970", stringBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test461663() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals("nullThursday, January 1, 1970", stringBuffer2.toString());
    }

    @Test(timeout = 4000)
    public void test461664() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        assertEquals(29, stringBuffer2.length());
    }

    @Test(timeout = 4000)
    public void test461665() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461666() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461667() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461668() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461669() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461670() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461671() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461672() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461673() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461674() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461675() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461676() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test461677() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test461678() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test461679() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test461680() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test461681() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test461682() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test461683() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test461684() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test461685() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertNotNull(locale1);
    }

    @Test(timeout = 4000)
    public void test461686() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test461687() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("zh", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test461688() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test461689() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("CN", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test461690() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("zh_CN", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test461691() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("zho", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test461692() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertEquals("CHN", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test461693() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test461694() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertNotNull(linkedList0);
    }

    @Test(timeout = 4000)
    public void test461695() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test461696() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertNotNull(linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test461697() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertFalse(linkedHashSet0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461698() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461699() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test461700() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test461701() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertFalse(linkedHashSet0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461702() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertFalse(list0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461703() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test461704() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461705() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test461706() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461707() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test461708() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461709() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461710() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461711() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461712() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test461713() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test461714() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461715() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461716() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461717() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461718() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461719() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals("M/d/yy h:mm:ss a z", fastDateFormat1.getPattern());
    }

    @Test(timeout = 4000)
    public void test461720() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461721() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertEquals(34, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461722() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test461723() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertNull(locale2);
    }

    @Test(timeout = 4000)
    public void test461724() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertFalse(linkedHashSet0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461725() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertFalse(list0.contains(locale1));
    }

    @Test(timeout = 4000)
    public void test461726() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test461727() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461728() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test461729() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test461730() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test461731() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461732() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461733() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461734() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461735() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertNotNull(fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test461736() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertNotSame(fastDateFormat2, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test461737() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertNotSame(fastDateFormat2, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test461738() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test461739() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals(0, fastDateFormat2.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461740() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals("", fastDateFormat2.getPattern());
    }

    @Test(timeout = 4000)
    public void test461741() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertTrue(fastDateFormat2.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461742() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test461743() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test461744() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals(0, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test461745() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test461746() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test461747() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals("zh", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test461748() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test461749() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals("CN", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test461750() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals("zh_CN", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test461751() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals("zho", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test461752() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertEquals("CHN", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test461753() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test461754() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test461755() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test461756() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461757() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461758() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461759() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461760() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertNotNull(fastDateFormat3);
    }

    @Test(timeout = 4000)
    public void test461761() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertNotSame(fastDateFormat3, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test461762() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertNotSame(fastDateFormat3, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test461763() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertNotSame(fastDateFormat3, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test461764() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test461765() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals(17, fastDateFormat3.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461766() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat3.getPattern());
    }

    @Test(timeout = 4000)
    public void test461767() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertFalse(fastDateFormat3.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461768() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("zh", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test461769() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test461770() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("CN", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test461771() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("zh_CN", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test461772() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("zho", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test461773() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertEquals("CHN", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test461774() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test461775() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test461776() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test461777() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test461778() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertNotNull(fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test461779() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertEquals(0, fieldPosition0.getBeginIndex());
    }

    @Test(timeout = 4000)
    public void test461780() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertEquals(0, fieldPosition0.getEndIndex());
    }

    @Test(timeout = 4000)
    public void test461781() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        assertEquals(2, fieldPosition0.getField());
    }

    @Test(timeout = 4000)
    public void test461782() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        assertNotNull(mockDate0);
    }

    @Test(timeout = 4000)
    public void test461783() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test461784() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test461785() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test461786() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test461787() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test461788() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("1925\u5E745\u67083\u65E5 \u661F\u671F\u65E5", string0);
    }

    @Test(timeout = 4000)
    public void test461789() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertNotSame(fastDateFormat3, fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test461790() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertNotSame(fastDateFormat3, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test461791() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertNotSame(fastDateFormat3, fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test461792() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertNotSame(locale1, locale0);
    }

    @Test(timeout = 4000)
    public void test461793() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals(17, fastDateFormat3.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test461794() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat3.getPattern());
    }

    @Test(timeout = 4000)
    public void test461795() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(fastDateFormat3.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test461796() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("Sun May 03 15:56:00 GMT 1925", mockDate0.toString());
    }

    @Test(timeout = 4000)
    public void test461797() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("zh", locale1.getLanguage());
    }

    @Test(timeout = 4000)
    public void test461798() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("", locale1.getVariant());
    }

    @Test(timeout = 4000)
    public void test461799() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("CN", locale1.getCountry());
    }

    @Test(timeout = 4000)
    public void test461800() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("zh_CN", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test461801() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("zho", locale1.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test461802() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertEquals("CHN", locale1.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test461803() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
    }

    @Test(timeout = 4000)
    public void test461804() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
    }

    @Test(timeout = 4000)
    public void test461805() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
    }

    @Test(timeout = 4000)
    public void test461806() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        assertFalse(locale1.equals((Object) locale0));
    }

    @Test(timeout = 4000)
    public void test461807() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        Object object0 = fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
        FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale locale2 = Locale.lookup(linkedList0, list0);
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        String string0 = fastDateFormat3.format((Date) mockDate0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) mockSimpleDateFormat0, stringBuffer1, fieldPosition0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
        }
    }

    @Test(timeout = 4000)
    public void test471808() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test471809() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test471810() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test471811() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test471812() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test471813() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test471814() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test471815() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test471816() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: <null>
        }
    }

    @Test(timeout = 4000)
    public void test481817() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test481818() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test481819() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test481820() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test481821() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test481822() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test481823() throws Throwable {
        Locale locale0 = Locale.CANADA;
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test481824() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test481825() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test481826() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test481827() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test481828() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test481829() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test481830() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test481831() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("CAN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test481832() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test481833() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("en_CA", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test481834() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("CA", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test481835() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test481836() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertEquals(58, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test481837() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test481838() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        SimpleTimeZone simpleTimeZone0 = null;
        try {
            simpleTimeZone0 = new SimpleTimeZone((-1), "", 2, 0, 0, 0, 1293, 1000, 1293, 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal end month 1293
        }
    }

    @Test(timeout = 4000)
    public void test491839() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test491840() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test491841() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test491842() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test491843() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test491844() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test491845() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test491846() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test491847() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test491848() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test491849() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test491850() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test491851() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test491852() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test491853() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test491854() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test491855() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test491856() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test491857() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test491858() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test491859() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
        assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501860() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test501861() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test501862() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test501863() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test501864() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test501865() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test501866() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test501867() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertNotNull(linkedList0);
    }

    @Test(timeout = 4000)
    public void test501868() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test501869() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        assertNotNull(linkedList1);
    }

    @Test(timeout = 4000)
    public void test501870() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        assertFalse(linkedList1.contains(locale0));
    }

    @Test(timeout = 4000)
    public void test501871() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        assertEquals(0, linkedList1.size());
    }

    @Test(timeout = 4000)
    public void test501872() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test501873() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        assertFalse(linkedList1.contains(locale0));
    }

    @Test(timeout = 4000)
    public void test501874() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        assertFalse(list0.contains(locale0));
    }

    @Test(timeout = 4000)
    public void test501875() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test501876() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        assertEquals(0, linkedList1.size());
    }

    @Test(timeout = 4000)
    public void test501877() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test501878() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test501879() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        assertNull(locale1);
    }

    @Test(timeout = 4000)
    public void test501880() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        assertFalse(linkedList1.contains(locale0));
    }

    @Test(timeout = 4000)
    public void test501881() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        assertFalse(list0.contains(locale0));
    }

    @Test(timeout = 4000)
    public void test501882() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test501883() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        assertEquals(0, linkedList1.size());
    }

    @Test(timeout = 4000)
    public void test501884() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test501885() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test501886() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test501887() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test501888() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        assertEquals(1, FastDateFormat.LONG);
    }

    @Test(timeout = 4000)
    public void test501889() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        assertEquals(2, FastDateFormat.MEDIUM);
    }

    @Test(timeout = 4000)
    public void test501890() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        assertEquals(0, FastDateFormat.FULL);
    }

    @Test(timeout = 4000)
    public void test501891() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        assertEquals(3, FastDateFormat.SHORT);
    }

    @Test(timeout = 4000)
    public void test501892() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        assertNotNull(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test501893() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test501894() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        assertEquals("MMM d, yyyy h:mm:ss a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test501895() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test501896() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test501897() throws Throwable {
        String string0 = "";
        Locale locale0 = Locale.ENGLISH;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale locale1 = Locale.lookup(linkedList0, list0);
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
        // Undeclared exception!
        try {
            FastDateFormat.getDateInstance(73, timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal date style 73
        }
    }

    @Test(timeout = 4000)
    public void test511898() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("xY=@f&dA]Vt8U`&4|]");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: x
        }
    }

    @Test(timeout = 4000)
    public void test521899() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("und");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: u
        }
    }

    @Test(timeout = 4000)
    public void test531900() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test531901() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test531902() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test531903() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("ita", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test531904() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test531905() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("it", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test531906() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test531907() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("htC+iAsdS2#%*>BG", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: t
        }
    }

    @Test(timeout = 4000)
    public void test541908() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("@H(d*8qNRb\u0001$;g;eW");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: q
        }
    }

    @Test(timeout = 4000)
    public void test551909() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test551910() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test551911() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test551912() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("en", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test551913() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("USA", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test551914() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test551915() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("eng", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test551916() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("US", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test551917() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        assertEquals("en_US", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test551918() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("<null>", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: n
        }
    }

    @Test(timeout = 4000)
    public void test561919() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test561920() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test561921() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh_TW", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test561922() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zh", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test561923() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TWN", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test561924() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("zho", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test561925() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        assertEquals("TW", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test561926() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("gl#+/t~.LgR_d%q", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: g
        }
    }

    @Test(timeout = 4000)
    public void test571927() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertNotNull(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test571928() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertEquals(408, simpleTimeZone0.getRawOffset());
    }

    @Test(timeout = 4000)
    public void test571929() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertEquals(0, simpleTimeZone0.getDSTSavings());
    }

    @Test(timeout = 4000)
    public void test571930() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertEquals("java.util.SimpleTimeZone[id=,offset=408,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
    }

    @Test(timeout = 4000)
    public void test571931() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertEquals("", simpleTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test571932() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        assertFalse(simpleTimeZone0.useDaylightTime());
    }

    @Test(timeout = 4000)
    public void test571933() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test571934() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test571935() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test571936() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test571937() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test571938() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test571939() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test571940() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, "");
        Locale locale0 = new Locale("");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("];fP>%Q\"w", (TimeZone) simpleTimeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: f
        }
    }

    @Test(timeout = 4000)
    public void test581941() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        assertNotNull(mockSimpleDateFormat0);
    }

    @Test(timeout = 4000)
    public void test581942() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertNotNull(timeZone0);
    }

    @Test(timeout = 4000)
    public void test581943() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test581944() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test581945() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertTrue(mockSimpleDateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test581946() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test581947() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("cu+&Tf&53r^xfe!*`l@", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: c
        }
    }

    @Test(timeout = 4000)
    public void test591948() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test591949() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test591950() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test591951() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test591952() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test591953() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test591954() throws Throwable {
        Locale locale0 = Locale.ROOT;
        assertEquals("", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test591955() throws Throwable {
        Locale locale0 = Locale.ROOT;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("-b>/gir%,", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: b
        }
    }

    @Test(timeout = 4000)
    public void test601956() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("ZzBMHX.Xs,:pO[wVvQ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: B
        }
    }

    @Test(timeout = 4000)
    public void test611957() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertNotNull(locale0);
    }

    @Test(timeout = 4000)
    public void test611958() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("deu", locale0.getISO3Language());
    }

    @Test(timeout = 4000)
    public void test611959() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test611960() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DE", locale0.getCountry());
    }

    @Test(timeout = 4000)
    public void test611961() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test611962() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("DEU", locale0.getISO3Country());
    }

    @Test(timeout = 4000)
    public void test611963() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        assertEquals("de_DE", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test611964() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("YW*-M", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: Y
        }
    }

    @Test(timeout = 4000)
    public void test621965() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("#@:VG&p4(");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: V
        }
    }

    @Test(timeout = 4000)
    public void test631966() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(":Uhxdjbv", (TimeZone) simpleTimeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: U
        }
    }

    @Test(timeout = 4000)
    public void test641967() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("Tis`#pMDw.`n~_g|U", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: T
        }
    }

    @Test(timeout = 4000)
    public void test651968() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("w$RV7HWI ", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: R
        }
    }

    @Test(timeout = 4000)
    public void test661969() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("sP`u+I ,=U*");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: P
        }
    }

    @Test(timeout = 4000)
    public void test671970() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        Locale locale0 = Locale.CANADA;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(".L$D&HvPb", timeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: L
        }
    }

    @Test(timeout = 4000)
    public void test681971() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance(">WK6e]DBk", locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: e
        }
    }

    @Test(timeout = 4000)
    public void test691972() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("#%F=JFk6A5Dbi1LAQ", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: J
        }
    }

    @Test(timeout = 4000)
    public void test701973() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("9GIgE-");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: I
        }
    }

    @Test(timeout = 4000)
    public void test711974() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("G66}%5!O?u@7");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: O
        }
    }

    @Test(timeout = 4000)
    public void test721975() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("z}FWDo.", (TimeZone) null, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: o
        }
    }

    @Test(timeout = 4000)
    public void test731976() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("C8Ktk@{OLOnR", timeZone0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: C
        }
    }

    @Test(timeout = 4000)
    public void test741977() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = Locale.ENGLISH;
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("AL+YIJ6T*8\"x", (TimeZone) simpleTimeZone0, locale0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: A
        }
    }

    @Test(timeout = 4000)
    public void test751978() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The pattern must not be null
        }
    }

    @Test(timeout = 4000)
    public void test761979() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer("");
        ParsePosition parsePosition0 = new ParsePosition((-2803));
        fastDateFormat0.parseObject("YW*-M", parsePosition0);
        StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
        fastDateFormat0.format(45L, stringBuffer0);
        fastDateFormat0.hashCode();
        Locale locale0 = Locale.GERMANY;
        FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
        Locale locale1 = Locale.CHINA;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        Locale.lookup(linkedList0, linkedList1);
        FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale1);
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
        fastDateFormat1.format((Date) mockDate0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) mockSimpleDateFormat0, stringBuffer1, fieldPosition0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
        }
    }

    @Test(timeout = 4000)
    public void test771980() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        String string0 = fastDateFormat0.format((-1796L));
        assertEquals("12/31/69 11:59:58 PM GMT+00:00", string0);
    }

    @Test(timeout = 4000)
    public void test781981() throws Throwable {
        // Undeclared exception!
        try {
            FastDateFormat.getInstance("\"\"v!j.#");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern component: v
        }
    }

    @Test(timeout = 4000)
    public void test791982() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test801983() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
    }

    @Test(timeout = 4000)
    public void test801984() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotSame(fastDateFormat1, fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test801985() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        assertNotNull(fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test811986() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test811987() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test821988() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        String string0 = fastDateFormat0.toString();
        assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
    }

    @Test(timeout = 4000)
    public void test821989() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
        String string0 = fastDateFormat0.toString();
        assertEquals("FastDateFormat[]", string0);
    }

    @Test(timeout = 4000)
    public void test831990() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2571), 1713, 1, 1, 20);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        // Undeclared exception!
        try {
            fastDateFormat0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test841991() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        Locale locale1 = fastDateFormat0.getLocale();
        assertEquals("ko", locale1.toString());
    }

    @Test(timeout = 4000)
    public void test851992() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, (TimeZone) null);
        assertEquals("h:mm a", fastDateFormat0.getPattern());
    }

    @Test(timeout = 4000)
    public void test861993() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k", timeZone0);
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
        timeZone0.toZoneId();
        timeZone0.observesDaylightTime();
        FastDateFormat.getDateInstance(1);
        timeZone0.getDisplayName(locale0);
        fastDateFormat0.equals((Object) null);
        Locale locale1 = Locale.forLanguageTag("");
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
        fastDateFormat1.getPattern();
        fastDateFormat1.getTimeZone();
        FastDateFormat.getDateInstance(3, timeZone0);
        ParsePosition parsePosition0 = new ParsePosition((-888));
        fastDateFormat2.parseObject("", parsePosition0);
        locale1.getDisplayName();
        MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer("");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.append(0);
        FieldPosition fieldPosition0 = new FieldPosition(945);
        StringBuffer stringBuffer2 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
        stringBuffer2.append("%#AZm[miAtF$[5E-");
        fastDateFormat2.format((Date) mockDate0, stringBuffer2);
        fastDateFormat2.parseObject("I+_diH4", parsePosition0);
        TimeZone timeZone1 = TimeZone.getTimeZone("Greenwich Mean Time");
        assertEquals("GMT", timeZone1.getID());
    }
}
