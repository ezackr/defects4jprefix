/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 07:09:30 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import org.junit.runner.RunWith;

public class PeepholeFoldConstantsTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(27);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("45a7.J631Hg Y0o");
        Node node1 = new Node(29, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-77));
        Node node1 = new Node(32, node0, node0, node0, node0, 4095, (-2));
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertEquals(32, node2.getType());
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(34);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(4095, Node.COLUMN_MASK);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2077, 2077, 2077);
        Node node1 = new Node(36, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2077, 2077, 2077);
        Node node1 = new Node(36, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertEquals((-1), node2.getLineno());
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(37);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(22, Node.TARGETBLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2089);
        Node node1 = new Node(12);
        Node node2 = new Node(9, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(14, Node.DEFAULT_PROP);
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(150);
        Node node1 = new Node(39);
        Node node2 = new Node(10, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(39);
        Node node1 = new Node(1);
        Node node2 = new Node(11, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("o!'c64Zh<]qgQE6fT");
        Node node1 = Node.newString("o!'c64Zh<]qgQE6fT", 23, 1);
        Node node2 = new Node(13, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(141, 141, 141);
        Node node1 = new Node(39);
        Node node2 = new Node(14, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(24);
        Node node1 = new Node((-1));
        Node node2 = new Node(16, node0, node1, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(38, 38, 38);
        Node node1 = new Node(19);
        Node node2 = new Node(18, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(132, 132, 132);
        Node node1 = new Node(44);
        Node node2 = new Node(19, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(19, node3.getType());
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(37);
        Node node1 = new Node((-1));
        Node node2 = new Node(20, node1, node0, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(20, node3.getType());
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(69);
        Node node1 = new Node(6);
        Node node2 = new Node(22, node0, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(22, node3.getType());
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(28);
        Node node1 = new Node(44);
        Node node2 = new Node(24, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2978);
        Node node1 = new Node(25, 12, 50);
        Node node2 = new Node(25, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(37);
        Node node1 = new Node((-1));
        Node node2 = new Node(28, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01920() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(1847, 1847, 1847);
        Node node1 = new Node(33);
        Node node2 = new Node(30, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test02021() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(1856);
        Node node1 = new Node(34);
        Node node2 = new Node(31, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test02122() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78);
        Node node1 = Node.newString("45a7.J631Hg Y0o");
        Node node2 = new Node(33, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(149);
        Node node1 = new Node(12);
        Node node2 = new Node(34, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(28);
        Node node1 = new Node(44);
        Node node2 = new Node(35, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(44, Node.IS_OPTIONAL_PARAM);
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2077, 2077, 2077);
        Node node1 = new Node(33);
        Node node2 = new Node(36, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test02526() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(3037, 3037, 3037);
        Node node1 = new Node(25, 45, 50);
        Node node2 = new Node(38, node1, node0, 25, 5);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test02627() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(69);
        Node node1 = new Node(19);
        Node node2 = new Node(39, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test02728() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122);
        Node node1 = new Node(32);
        Node node2 = new Node(40, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(40, node3.getType());
    }

    @Test(timeout = 4000)
    public void test02829() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(3002, 3002, 3002);
        Node node1 = new Node(25, 12, 50);
        Node node2 = new Node(41, node1, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(41, node3.getType());
    }

    @Test(timeout = 4000)
    public void test02930() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(115);
        Node node1 = new Node(29);
        Node node2 = new Node(42, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(42, node3.getType());
    }

    @Test(timeout = 4000)
    public void test03031() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(3037, 3037, 3037);
        Node node1 = new Node(25, 45, 50);
        Node node2 = new Node(43, node1, node1, node0, 50, 17);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test03132() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(31);
        Node node1 = new Node(10);
        Node node2 = new Node(44, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test03233() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2077, 2077, 2077);
        Node node1 = new Node(33);
        Node node2 = new Node(46, node1, node1, node1, node0, 7, 46);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(46, node3.getType());
    }

    @Test(timeout = 4000)
    public void test03334() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52);
        Node node1 = new Node(1);
        Node node2 = new Node(47, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test03435() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2089, 2089, 2089);
        Node node1 = new Node(23);
        Node node2 = new Node(48, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test03536() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(3002, 3002, 3002);
        Node node1 = new Node(0);
        Node node2 = new Node(49, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test03637() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(77);
        Node node1 = new Node(5);
        Node node2 = new Node(50, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03738() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2089, 2089, 2089);
        Node node1 = new Node(23);
        Node node2 = new Node(51, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test03839() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2095, 2095, 2095);
        Node node1 = Node.newString("45a7.J631Hg Y0o");
        Node node2 = new Node(52, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03940() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2095, 2095, 2095);
        Node node1 = Node.newString("45a7.J631Hg Y0o");
        Node node2 = new Node(53, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(53, node3.getType());
    }

    @Test(timeout = 4000)
    public void test04041() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(55, 55, 55);
        Node node1 = Node.newString("");
        Node node2 = new Node(54, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(97, 97, 97);
        Node node1 = new Node(39);
        Node node2 = new Node(55, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04243() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-901));
        Node node1 = new Node(50);
        Node node2 = new Node(56, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04344() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(83);
        Node node1 = new Node(2203);
        Node node2 = new Node(57, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04445() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2107, 2107, 2107);
        Node node1 = Node.newString(29, "45a7.J631Hg Y0o", 11, 36);
        Node node2 = new Node(58, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals((-1), node3.getLineno());
    }

    @Test(timeout = 4000)
    public void test04546() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2095, 2095, 2095);
        Node node1 = Node.newString(29, "45a7.J631Hg Y0o", 11, 36);
        Node node2 = new Node(59, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(59, node3.getType());
    }

    @Test(timeout = 4000)
    public void test04647() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(123, 123, 123);
        Node node1 = new Node(44);
        Node node2 = new Node(60, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04748() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2090, 2090, 2090);
        Node node1 = new Node(2, 40, 38);
        Node node2 = new Node(61, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04849() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(3020);
        Node node1 = new Node(4095);
        Node node2 = new Node(62, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04950() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(57);
        Node node1 = new Node(32);
        Node node2 = new Node(63, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test05051() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(97, 97, 97);
        Node node1 = new Node(39);
        Node node2 = new Node(64, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test05152() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(69);
        Node node1 = new Node(49);
        Node node2 = new Node(65, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test05253() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2092, 2092, 2092);
        Node node1 = Node.newString("u");
        Node node2 = new Node(66, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test05354() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2080);
        Node node1 = Node.newString("");
        Node node2 = new Node(67, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test05455() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2080);
        Node node1 = Node.newString("9>\"i%Je!1bC(Eae-!t");
        Node node2 = new Node(68, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test05556() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122);
        Node node1 = new Node(19);
        Node node2 = new Node(69, node0, node1, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(69, node3.getType());
    }

    @Test(timeout = 4000)
    public void test05657() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(149);
        Node node1 = new Node(12);
        Node node2 = new Node(70, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test05758() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(89);
        Node node1 = new Node(0);
        Node node2 = new Node(71, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(71, node3.getType());
    }

    @Test(timeout = 4000)
    public void test05859() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(149);
        Node node1 = new Node(12);
        Node node2 = new Node(72, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test05960() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(12, 12, 12);
        Node node1 = new Node(1);
        Node node2 = new Node(73, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06061() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2071, 2071, 2071);
        Node node1 = new Node(23);
        Node node2 = new Node(74, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06162() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(85);
        Node node1 = new Node(49);
        Node node2 = new Node(75, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(75, node3.getType());
    }

    @Test(timeout = 4000)
    public void test06263() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2115, 2115, 2115);
        Node node1 = new Node(23);
        Node node2 = new Node(76, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test06364() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-2121));
        Node node1 = new Node(24);
        Node node2 = new Node(77, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06465() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(111, 111, 111);
        Node node1 = new Node(2);
        Node node2 = new Node(78, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06566() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(73);
        Node node1 = new Node(34);
        Node node2 = new Node(79, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test06667() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2090, 2090, 2090);
        Node node1 = new Node(2, 40, 38);
        Node node2 = new Node(80, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test06768() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-871));
        Node node1 = new Node(35);
        Node node2 = new Node(81, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06869() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(149);
        Node node1 = new Node(12);
        Node node2 = new Node(82, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test06970() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(24, 24, 24);
        Node node1 = new Node((-1));
        Node node2 = new Node(83, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(83, node3.getType());
    }

    @Test(timeout = 4000)
    public void test07071() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(94, 94, 94);
        Node node1 = new Node(48);
        Node node2 = new Node(84, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(84, node3.getType());
    }

    @Test(timeout = 4000)
    public void test07172() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2090, 2090, 2090);
        Node node1 = new Node(2, 40, 38);
        Node node2 = new Node(85, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test07273() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2071, 2071, 2071);
        Node node1 = new Node(23);
        Node node2 = new Node(86, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07374() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(89);
        Node node1 = new Node(2, 40, 38);
        Node node2 = new Node(87, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07475() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122);
        Node node1 = new Node(4);
        Node node2 = new Node(88, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07576() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("o!'c64Zh<]qgQE6fT");
        Node node1 = Node.newString("o!'c64Zh<]qgQE6fT");
        Node node2 = new Node(89, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07677() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2080);
        Node node1 = Node.newString("");
        Node node2 = new Node(90, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07778() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(1862, 1862, 1862);
        Node node1 = new Node(33);
        Node node2 = new Node(91, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test07879() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(94, 94, 94);
        Node node1 = new Node(48);
        Node node2 = new Node(92, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(92, node3.getType());
    }

    @Test(timeout = 4000)
    public void test07980() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(111, 111, 111);
        Node node1 = new Node(2);
        Node node2 = new Node(93, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test08081() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(95, 95, 95);
        Node node1 = new Node(44);
        Node node2 = new Node(94, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test08182() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(31);
        Node node1 = new Node(11);
        Node node2 = new Node(95, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(95, node3.getType());
    }

    @Test(timeout = 4000)
    public void test08283() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-1864), (-1864), (-1864));
        Node node1 = new Node(3);
        Node node2 = new Node(96, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test08384() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(93, 93, 93);
        Node node1 = new Node(44);
        Node node2 = new Node(97, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(97, node3.getType());
    }

    @Test(timeout = 4000)
    public void test08485() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2090);
        Node node1 = new Node(2, 40, 38);
        Node node2 = new Node(98, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test08586() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-1338));
        Node node1 = new Node(2, 40, 38);
        Node node2 = new Node(99, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test08687() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(94, 94, 94);
        Node node1 = new Node(48);
        Node node2 = new Node(101, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test08788() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(46);
        Node node1 = new Node(0);
        Node node2 = new Node(1, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test08889() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(32);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(35, Node.QUOTED_PROP);
    }

    @Test(timeout = 4000)
    public void test08990() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-77));
        Node node1 = Node.newNumber((double) 12, 29, 2);
        Node node2 = new Node(32, node1, node1, node0, node1, 4095, (-2));
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09091() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Sgp})D>)h");
        Node node1 = new Node(32, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09192() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122);
        Node node1 = new Node(44);
        Node node2 = new Node(32, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09293() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122);
        Node node1 = new Node(32, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertEquals(1, node2.getChildCount());
    }

    @Test(timeout = 4000)
    public void test09394() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("*hlm");
        Node node1 = new Node(26, 45, 7);
        Node node2 = new Node(26, node1, node1);
        Node node3 = new Node(44, node0, node2);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, node4.getChildCount());
    }

    @Test(timeout = 4000)
    public void test09495() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("*hlm");
        Node node1 = Node.newString("*hlm");
        Node node2 = new Node(26, node1, node1);
        Node node3 = new Node(44, node0, node2);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09596() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2089, 2089, 2089);
        Node node1 = new Node(23);
        Node node2 = new Node(52, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(52, node3.getType());
    }

    @Test(timeout = 4000)
    public void test09697() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122, 122, 122);
        Node node1 = Node.newString("45a7.J631Hg Y0o");
        Node node2 = new Node(52, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09798() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122);
        Node node1 = new Node(44);
        Node node2 = new Node(100, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test09899() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-886));
        Node node1 = Node.newString("Sgp<})Cth");
        Node node2 = new Node(101, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test099100() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-859));
        Node node1 = Node.newString("");
        Node node2 = new Node(101, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test100101() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(123);
        Node node1 = new Node(44);
        Node node2 = new Node(100, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test101102() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122);
        Node node1 = new Node((-1));
        Node node2 = new Node(21, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test102103() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = Node.newString("object");
        Node node2 = new Node(21, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test103104() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122, 122, 122);
        Node node1 = Node.newString("length");
        Node node2 = new Node(21, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test104105() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122);
        Node node1 = new Node(44);
        Node node2 = new Node(21, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test105106() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(132, 132, 132);
        Node node1 = Node.newNumber((double) 43, 19, 1);
        Node node2 = new Node(23, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test106107() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(39, 33, 23);
        Node node1 = Node.newNumber((double) 43, 19, 1);
        Node node2 = new Node(23, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Number node not created with Node.newNumber
        }
    }

    @Test(timeout = 4000)
    public void test107108() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(115);
        Node node1 = new Node(44);
        Node node2 = new Node(21, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test108109() throws Throwable {
        Node node0 = new Node((-888), (-888), (-888));
        Node node1 = Node.newNumber((double) 1);
        Node node2 = new Node(20, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test109110() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122, 122, 122);
        Node node1 = new Node(44);
        Node node2 = new Node(45, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test110111() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(44);
        Node node1 = new Node(44);
        Node node2 = new Node(17, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test111112() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(122);
        Node node1 = Node.newString("Q]x -I}dSO[cWP:']C", 13, 45);
        node0.addChildToFront(node1);
        Node node2 = new Node(44);
        Node node3 = new Node(15, node0, node2);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node3);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test112113() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(41);
        Node node1 = new Node(44);
        Node node2 = new Node(12, node1, node0, node0, 14, 16);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test113114() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(123, 123, 123);
        Node node1 = new Node(44);
        Node node2 = new Node(16, node1, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test114115() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(44);
        Node node1 = new Node(44);
        Node node2 = new Node(45, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test115116() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2, 2, 2);
        Node node1 = Node.newString("x/3o+uT");
        Node node2 = new Node(14, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(14, node3.getType());
    }

    @Test(timeout = 4000)
    public void test116117() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("zCoT_6m)%.az");
        Node node1 = Node.newString("zCoT_6m)%.az");
        Node node2 = new Node(12, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test117118() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Object");
        Node node1 = Node.newString("Object");
        Node node2 = new Node(17, node0, node1, node1, 0, 4095);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test118119() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("aBo9OF");
        Node node1 = Node.newString("zCoT_6m)%.az");
        Node node2 = new Node(13, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test119120() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(39, "45akqS15Og Y;0o", 1, 1);
        Node node1 = Node.newNumber((double) 16, 29, 39);
        Node node2 = new Node(15, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Number node not created with Node.newNumber
        }
    }

    @Test(timeout = 4000)
    public void test120121() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(55, 55, 55);
        Node node1 = new Node(37, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test120122() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(55, 55, 55);
        Node node1 = new Node(37, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertTrue(node2.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test121123() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(31);
        Node node1 = new Node(19);
        Node node2 = new Node(37, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(37, node3.getType());
    }

    @Test(timeout = 4000)
    public void test122124() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = new Node(6);
        Node node2 = new Node(35, node0, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test123125() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(2147483601);
        Node node1 = new Node(2147483601);
        Node node2 = new Node(33, node1, node0, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }
}
