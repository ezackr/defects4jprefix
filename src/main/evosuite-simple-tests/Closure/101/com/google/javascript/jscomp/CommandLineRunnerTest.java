/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:54:02 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import java.io.PrintStream;
import org.junit.runner.RunWith;

public class CommandLineRunnerTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Compiler compiler0 = commandLineRunner0.createCompiler();
        assertNotNull(compiler0);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        String[] stringArray0 = new String[0];
        // Undeclared exception!
        try {
            CommandLineRunner.main(stringArray0);
            fail("Expecting exception: System.SystemExitException");
        } catch (System.SystemExitException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "com.google.javascript.jscomp.CommandLineRunner$FormattingOption";
        CommandLineRunner commandLineRunner0 = null;
        try {
            commandLineRunner0 = new CommandLineRunner(stringArray0);
            fail("Expecting exception: Exception");
        } catch (Throwable e) {
            //
            // No argument is allowed: com.google.javascript.jscomp.CommandLineRunner$FormattingOption
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "--A=";
        CommandLineRunner commandLineRunner0 = null;
        try {
            commandLineRunner0 = new CommandLineRunner(stringArray0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No match found
        }
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
        assertFalse(compilerOptions0.generatePseudoNames);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
        assertTrue(compilerOptions0.closurePass);
    }
}
