/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 22:39:30 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.rhino.FunctionNode;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.junit.runner.RunWith;

public class NodeUtilTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.getPrototypePropertyName(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsCall(node0);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 35);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 35);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 32);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 32);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 1);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0059() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 1);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test00610() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("NaN", node0, "NaN");
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test00611() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("NaN", node0, "NaN");
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test00612() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("NaN", node0, "NaN");
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test00713() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.isVarArgsFunction(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test00814() throws Throwable {
        Node node0 = Node.newString("E:]( Z8O[_ytgm");
        int int0 = NodeUtil.getNameReferenceCount(node0, "E:]( Z8O[_ytgm");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test00915() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.getFunctionBody(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test01016() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.referencesThis(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01117() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01118() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01219() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("dxV", node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test01220() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("dxV", node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01221() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("dxV", node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test01222() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("dxV", node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01323() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 8233, 110);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01324() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 8233, 110);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertEquals(110, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test01325() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 8233, 110);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertEquals(8233, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test01326() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 8233, 110);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01427() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01428() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01529() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(114);
        Node node1 = NodeUtil.getConditionExpression(node0);
        boolean boolean0 = NodeUtil.getBooleanValue(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01630() throws Throwable {
        Node node0 = Node.newString("");
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01731() throws Throwable {
        Node node0 = new Node((-4096), (-4096), (-4096));
        Node node1 = new Node(41, node0, node0);
        boolean boolean0 = NodeUtil.getBooleanValue(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01832() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(43, node0);
        boolean boolean0 = NodeUtil.getBooleanValue(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01933() throws Throwable {
        Node node0 = new Node(44, 3149, 44);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02034() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02135() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02236() throws Throwable {
        Node node0 = Node.newString(64, "We)%1:uG}p");
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02337() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(49, node0);
        // Undeclared exception!
        try {
            NodeUtil.getBooleanValue(node1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Non-literal value: THROW
        }
    }

    @Test(timeout = 4000)
    public void test02438() throws Throwable {
        Node node0 = Node.newString("sk^.");
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02539() throws Throwable {
        Node node0 = Node.newNumber((-1.0), (-3385), (-3385));
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02640() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("Infinity", node0, "prototype");
        boolean boolean0 = NodeUtil.getBooleanValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02641() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("Infinity", node0, "prototype");
        boolean boolean0 = NodeUtil.getBooleanValue(node1);
        assertTrue(node1.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test02742() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 64, 64);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertEquals(64, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test02743() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 64, 64);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02744() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 64, 64);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertEquals(64, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test02845() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("3'?X;", 100, 100);
        // Undeclared exception!
        try {
            NodeUtil.getBooleanValue(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Non-literal value: NAME 3'?X; 100
        }
    }

    @Test(timeout = 4000)
    public void test02946() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("T7OY9|N~')5", 0, 1);
        NodeUtil.getStringValue(node0);
        assertEquals(0, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test02947() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("T7OY9|N~')5", 0, 1);
        NodeUtil.getStringValue(node0);
        assertEquals(1, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test03048() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        String string0 = NodeUtil.getStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test03149() throws Throwable {
        Node node0 = Node.newNumber((double) 47);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("47", string0);
    }

    @Test(timeout = 4000)
    public void test03250() throws Throwable {
        Node node0 = Node.newString("8u|");
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("8u|", string0);
    }

    @Test(timeout = 4000)
    public void test03351() throws Throwable {
        Node node0 = new Node(43);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("false", string0);
    }

    @Test(timeout = 4000)
    public void test03452() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("true", string0);
    }

    @Test(timeout = 4000)
    public void test03553() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("undefined", string0);
    }

    @Test(timeout = 4000)
    public void test03654() throws Throwable {
        Node node0 = Node.newNumber((-846.21631));
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("-846.21631", string0);
    }

    @Test(timeout = 4000)
    public void test03755() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("QhEaKP)Zdpxd", 108, 108);
        Node node1 = new Node(94, node0);
        NodeUtil.getFunctionName(node1, node0);
        assertEquals(108, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test03756() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("QhEaKP)Zdpxd", 108, 108);
        Node node1 = new Node(94, node0);
        NodeUtil.getFunctionName(node1, node0);
        assertEquals(108, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test03857() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("znz([", linkedList0, node0, 23, 3);
        String string0 = NodeUtil.getFunctionName(functionNode0, functionNode0);
        assertEquals("znz([", functionNode0.getFunctionName());
    }

    @Test(timeout = 4000)
    public void test03858() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("znz([", linkedList0, node0, 23, 3);
        String string0 = NodeUtil.getFunctionName(functionNode0, functionNode0);
        assertEquals("znz([", string0);
    }

    @Test(timeout = 4000)
    public void test03859() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("znz([", linkedList0, node0, 23, 3);
        String string0 = NodeUtil.getFunctionName(functionNode0, functionNode0);
        assertEquals(3, functionNode0.getCharno());
    }

    @Test(timeout = 4000)
    public void test03860() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("znz([", linkedList0, node0, 23, 3);
        String string0 = NodeUtil.getFunctionName(functionNode0, functionNode0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test03861() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("znz([", linkedList0, node0, 23, 3);
        String string0 = NodeUtil.getFunctionName(functionNode0, functionNode0);
        assertEquals(23, functionNode0.getLineno());
    }

    @Test(timeout = 4000)
    public void test03962() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("", node0, "");
        Node node2 = new Node(29, node1, node0, 44, 20);
        String string0 = NodeUtil.getFunctionName(node2, node2);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test04063() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        Node node1 = new Node(29, node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04164() throws Throwable {
        Node node0 = Node.newString("dot", 6, 113);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04265() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(41, node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04366() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(43, node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04467() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04568() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(97, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04669() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("undefined", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04670() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("undefined", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertFalse(node1.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04771() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("WJ", 2224, 2224);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04772() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("WJ", 2224, 2224);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertEquals(2224, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test04773() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("WJ", 2224, 2224);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertEquals(2224, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test04874() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04975() throws Throwable {
        Node node0 = Node.newString(64, "We)%1:uG}p");
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05076() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = Node.newString(84, "D&D9V9&1nshQlSz", 48, 64);
        node0.addChildToBack(node1);
        node0.setType(47);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05177() throws Throwable {
        Node node0 = new Node(9);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05278() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(10, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05379() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(11, node0, node0, node0, 25, 13);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05480() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(12, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05581() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(14, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05682() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(15, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05783() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(16, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05884() throws Throwable {
        Node node0 = new Node(17, (-925), (-1032));
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05985() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = new Node(18, node0);
        Locale locale0 = Locale.ENGLISH;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06086() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(19, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06187() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(20, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06288() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(21, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06389() throws Throwable {
        Node node0 = new Node(22);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06490() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(23, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06591() throws Throwable {
        Node node0 = new Node(2908);
        Node node1 = new Node(24, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06692() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(25, node0, 0, 29);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06793() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(26, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06894() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(27, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06995() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(28, node0, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07096() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(29, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07197() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(30, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07298() throws Throwable {
        Node node0 = new Node(31, 72, 14);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Set<String> set0 = jSDocInfo0.getSuppressions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07399() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(32, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test074100() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(33, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test075101() throws Throwable {
        Node node0 = Node.newString(34, "'?X;", 2, 6);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test076102() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(35, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test077103() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        node0.setType(36);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078104() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(37);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test079105() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = Node.newNumber((double) 35);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test080106() throws Throwable {
        Node node0 = Node.newString("Unknown op ");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test081107() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(41, node0, node0, node0, node0, 24, 32);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test082108() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(42, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test083109() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(43, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test084110() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(44, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test085111() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertEquals(778, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test085112() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test085113() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test085114() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test085115() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertEquals(778, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test086116() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("prototype", node0, "prototype");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("prototype");
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test087117() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test088118() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test089119() throws Throwable {
        Node node0 = new Node(125);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test090120() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test091121() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test092122() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test093123() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(12, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test094124() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test095125() throws Throwable {
        Node node0 = new Node(14);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test096126() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test097127() throws Throwable {
        Node node0 = new Node(16, 15, 2);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test098128() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test099129() throws Throwable {
        Node node0 = new Node(18);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test100130() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test101131() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test102132() throws Throwable {
        Node node0 = new Node(21, 21, 21);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test103133() throws Throwable {
        Node node0 = new Node(22, 30, 28);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test104134() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(23, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test105135() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test106136() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(25, node0, node0, node0, (-3), (-1));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test107137() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test108138() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test109139() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test110140() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test111141() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112142() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(31, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test113143() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test114144() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test115145() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test116146() throws Throwable {
        Node node0 = new Node(35, 8, (-2));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test117147() throws Throwable {
        Node node0 = new Node(36);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test118148() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test119149() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test120150() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(39);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test121151() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(40);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test122152() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test123153() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test124154() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125155() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test126156() throws Throwable {
        Node node0 = new Node(45, 1, (-949));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test127157() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test128158() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test129159() throws Throwable {
        Node node0 = new Node(48);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test130160() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test131161() throws Throwable {
        Node node0 = Node.newString(50, "QhEaKP)Zdpxd");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test132162() throws Throwable {
        Node node0 = new Node(52, 52, 52);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test133163() throws Throwable {
        Node node0 = new Node(53, 53, 53);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test134164() throws Throwable {
        Node node0 = Node.newString(54, "f~th}]^Vf?Q$)/W-8");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test135165() throws Throwable {
        Node node0 = new Node(55, 116, 116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test136166() throws Throwable {
        Node node0 = new Node(56, 56, 56);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test137167() throws Throwable {
        Node node0 = new Node(57, 57, 57);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test138168() throws Throwable {
        Node node0 = new Node(58, 58, 58);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test139169() throws Throwable {
        Node node0 = new Node(59);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test140170() throws Throwable {
        Node node0 = new Node(60);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test141171() throws Throwable {
        Node node0 = Node.newString(61, "nve", 61, 61);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test142172() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test143173() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test144174() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test145175() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test146176() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test147177() throws Throwable {
        Node node0 = new Node(67, 23, (-902));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test148178() throws Throwable {
        Node node0 = Node.newString(68, "GC=2");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test149179() throws Throwable {
        Node node0 = new Node(69);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test150180() throws Throwable {
        Node node0 = new Node(70);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test151181() throws Throwable {
        Node node0 = new Node(71);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test152182() throws Throwable {
        Node node0 = new Node(72);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test153183() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test154184() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test155185() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(75, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test156186() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test157187() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test158188() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test159189() throws Throwable {
        Node node0 = new Node(79, 79, 79);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test160190() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test161191() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test162192() throws Throwable {
        Node node0 = new Node(82, 82, 82);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test163193() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(83);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test164194() throws Throwable {
        Node node0 = Node.newString(84, "vBlError");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test165195() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test166196() throws Throwable {
        Node node0 = new Node(86);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test167197() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test168198() throws Throwable {
        Node node0 = new Node(89, 77, 77);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test169199() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(90, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test170200() throws Throwable {
        Node node0 = Node.newString(91, "|h");
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test171201() throws Throwable {
        Node node0 = new Node(92);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test172202() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test173203() throws Throwable {
        Node node0 = new Node(2851, 1, 94);
        Node node1 = new Node(94, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test174204() throws Throwable {
        Node node0 = Node.newString(95, "Zl");
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test175205() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(96, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test176206() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test177207() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(99, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test178208() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test179209() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test180210() throws Throwable {
        Node node0 = new Node(102, 37, 2);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test181211() throws Throwable {
        Node node0 = Node.newString(103, "Zl");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test182212() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test183213() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(106, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test184214() throws Throwable {
        Node node0 = new Node(107);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test185215() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test186216() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test187217() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test188218() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test189219() throws Throwable {
        Node node0 = new Node(112, 112, 303);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test190220() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test191221() throws Throwable {
        Node node0 = Node.newString(115, "Zl");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test192222() throws Throwable {
        Node node0 = new Node(116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test193223() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test194224() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test195225() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(121, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test196226() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(30, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test197227() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test198228() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(41, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test199229() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(42, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test200230() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test201231() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(44, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test202232() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test203233() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(49, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test204234() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test205235() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test206236() throws Throwable {
        Node node0 = Node.newString(64, "We)%1:uG}p");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test207237() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test208238() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test209239() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test210240() throws Throwable {
        Node node0 = Node.newString(100, "Wje)%1:fuGc}p");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test211241() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test212242() throws Throwable {
        Node node0 = new Node(60);
        Node node1 = new Node(104, node0, node0, node0, (-3), 15);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test213243() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test214244() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test215245() throws Throwable {
        Node node0 = new Node(113, 92, 113);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test216246() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test217247() throws Throwable {
        Node node0 = Node.newString(119, "TypeError");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test218248() throws Throwable {
        Node node0 = new Node(123);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test219249() throws Throwable {
        Node node0 = Node.newString(124, "function (");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test220250() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test221251() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test222252() throws Throwable {
        Node node0 = new Node(128, 128, 128);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test223253() throws Throwable {
        Node node0 = Node.newString("collect");
        node0.setType(129);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test224254() throws Throwable {
        Node node0 = Node.newString("collect");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test225255() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test226256() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(38, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test227257() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(105);
        Node node1 = new Node(90, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test228258() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(105);
        Node node1 = new Node(125, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test229259() throws Throwable {
        Node node0 = new Node(37, 1224, 1224);
        node0.setIsNoSideEffectsCall();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test230260() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(4239);
        Node[] nodeArray0 = new Node[2];
        nodeArray0[0] = node0;
        nodeArray0[1] = node1;
        Node node2 = new Node(87, nodeArray0, 113, 12);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test231261() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.constructorCallHasSideEffects(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Expected NEW node, got VOID
        }
    }

    @Test(timeout = 4000)
    public void test232262() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(30, node0);
        boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test233263() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(30);
        node0.setIsNoSideEffectsCall();
        boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test234264() throws Throwable {
        Node node0 = new Node(60);
        // Undeclared exception!
        try {
            NodeUtil.functionCallHasSideEffects(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Expected CALL node, got ENUM_ID
        }
    }

    @Test(timeout = 4000)
    public void test235265() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(37);
        boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test236266() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName(">=", node0);
        node0.addChildrenToFront(node1);
        assertTrue(node1.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test236267() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName(">=", node0);
        node0.addChildrenToFront(node1);
        node0.setType(37);
        boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test237268() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test238269() throws Throwable {
        Node node0 = new Node(87);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test239270() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(30, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test240271() throws Throwable {
        Node node0 = new Node(2827);
        Node node1 = new Node(31, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test241272() throws Throwable {
        Node node0 = new Node(37, 1224, 1224);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test242273() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("3'IL;", 100, 100);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test242274() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("3'IL;", 100, 100);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(100, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test242275() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("3'IL;", 100, 100);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(100, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test243276() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(49, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test244277() throws Throwable {
        Node node0 = new Node(102, 23, 2);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test245278() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test246279() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(30, node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test247280() throws Throwable {
        Node node0 = new Node(2827);
        Node node1 = new Node(31, node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test248281() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test249282() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertEquals(35, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test249283() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test249284() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertEquals(35, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test249285() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test249286() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test250287() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(34, node0, node0, node0, node0, 19, 2);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test251288() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        Node node1 = new Node(35, node0, node0, node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test252289() throws Throwable {
        Node node0 = new Node(36);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test253290() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test254291() throws Throwable {
        int int0 = NodeUtil.precedence(4);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test255292() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(59);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=59> (type 59)
        }
    }

    @Test(timeout = 4000)
    public void test256293() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(5);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for goto (type 5)
        }
    }

    @Test(timeout = 4000)
    public void test257294() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(6);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifeq (type 6)
        }
    }

    @Test(timeout = 4000)
    public void test258295() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(7);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifne (type 7)
        }
    }

    @Test(timeout = 4000)
    public void test259296() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(8);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setname (type 8)
        }
    }

    @Test(timeout = 4000)
    public void test260297() throws Throwable {
        int int0 = NodeUtil.precedence(9);
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test261298() throws Throwable {
        int int0 = NodeUtil.precedence(10);
        assertEquals(6, int0);
    }

    @Test(timeout = 4000)
    public void test262299() throws Throwable {
        int int0 = NodeUtil.precedence(11);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test263300() throws Throwable {
        int int0 = NodeUtil.precedence(12);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test264301() throws Throwable {
        int int0 = NodeUtil.precedence(13);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test265302() throws Throwable {
        int int0 = NodeUtil.precedence(14);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test266303() throws Throwable {
        int int0 = NodeUtil.precedence(15);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test267304() throws Throwable {
        int int0 = NodeUtil.precedence(16);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test268305() throws Throwable {
        int int0 = NodeUtil.precedence(17);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test269306() throws Throwable {
        int int0 = NodeUtil.precedence(18);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test270307() throws Throwable {
        int int0 = NodeUtil.precedence(19);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test271308() throws Throwable {
        int int0 = NodeUtil.precedence(20);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test272309() throws Throwable {
        int int0 = NodeUtil.precedence(21);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test273310() throws Throwable {
        int int0 = NodeUtil.precedence(22);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test274311() throws Throwable {
        int int0 = NodeUtil.precedence(23);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test275312() throws Throwable {
        int int0 = NodeUtil.precedence(24);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test276313() throws Throwable {
        int int0 = NodeUtil.precedence(25);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test277314() throws Throwable {
        int int0 = NodeUtil.precedence(26);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test278315() throws Throwable {
        int int0 = NodeUtil.precedence(27);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test279316() throws Throwable {
        int int0 = NodeUtil.precedence(28);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test280317() throws Throwable {
        int int0 = NodeUtil.precedence(29);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test281318() throws Throwable {
        int int0 = NodeUtil.precedence(30);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test282319() throws Throwable {
        int int0 = NodeUtil.precedence(31);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test283320() throws Throwable {
        int int0 = NodeUtil.precedence(32);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test284321() throws Throwable {
        int int0 = NodeUtil.precedence(33);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test285322() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(34);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setprop (type 34)
        }
    }

    @Test(timeout = 4000)
    public void test286323() throws Throwable {
        int int0 = NodeUtil.precedence(35);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test287324() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(36);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setelem (type 36)
        }
    }

    @Test(timeout = 4000)
    public void test288325() throws Throwable {
        int int0 = NodeUtil.precedence(37);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test289326() throws Throwable {
        int int0 = NodeUtil.precedence(38);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test290327() throws Throwable {
        int int0 = NodeUtil.precedence(39);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test291328() throws Throwable {
        int int0 = NodeUtil.precedence(40);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test292329() throws Throwable {
        int int0 = NodeUtil.precedence(41);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test293330() throws Throwable {
        int int0 = NodeUtil.precedence(42);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test294331() throws Throwable {
        int int0 = NodeUtil.precedence(43);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test295332() throws Throwable {
        int int0 = NodeUtil.precedence(44);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test296333() throws Throwable {
        int int0 = NodeUtil.precedence(45);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test297334() throws Throwable {
        int int0 = NodeUtil.precedence(46);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test298335() throws Throwable {
        int int0 = NodeUtil.precedence(47);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test299336() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(48);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for bindname (type 48)
        }
    }

    @Test(timeout = 4000)
    public void test300337() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(49);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for throw (type 49)
        }
    }

    @Test(timeout = 4000)
    public void test301338() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(50);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=50> (type 50)
        }
    }

    @Test(timeout = 4000)
    public void test302339() throws Throwable {
        int int0 = NodeUtil.precedence(51);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test303340() throws Throwable {
        int int0 = NodeUtil.precedence(52);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test304341() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(53);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=53> (type 53)
        }
    }

    @Test(timeout = 4000)
    public void test305342() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(54);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for getvar (type 54)
        }
    }

    @Test(timeout = 4000)
    public void test306343() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(55);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setvar (type 55)
        }
    }

    @Test(timeout = 4000)
    public void test307344() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(56);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=56> (type 56)
        }
    }

    @Test(timeout = 4000)
    public void test308345() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(57);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=57> (type 57)
        }
    }

    @Test(timeout = 4000)
    public void test309346() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(58);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=58> (type 58)
        }
    }

    @Test(timeout = 4000)
    public void test310347() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(60);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=60> (type 60)
        }
    }

    @Test(timeout = 4000)
    public void test311348() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(61);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for thisfn (type 61)
        }
    }

    @Test(timeout = 4000)
    public void test312349() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(62);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=62> (type 62)
        }
    }

    @Test(timeout = 4000)
    public void test313350() throws Throwable {
        int int0 = NodeUtil.precedence(63);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test314351() throws Throwable {
        int int0 = NodeUtil.precedence(64);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test315352() throws Throwable {
        int int0 = NodeUtil.precedence(65);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test316353() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(66);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=66> (type 66)
        }
    }

    @Test(timeout = 4000)
    public void test317354() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(67);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=67> (type 67)
        }
    }

    @Test(timeout = 4000)
    public void test318355() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(68);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=68> (type 68)
        }
    }

    @Test(timeout = 4000)
    public void test319356() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(69);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ref_special (type 69)
        }
    }

    @Test(timeout = 4000)
    public void test320357() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(70);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=70> (type 70)
        }
    }

    @Test(timeout = 4000)
    public void test321358() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(71);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=71> (type 71)
        }
    }

    @Test(timeout = 4000)
    public void test322359() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(72);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=72> (type 72)
        }
    }

    @Test(timeout = 4000)
    public void test323360() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(73);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=73> (type 73)
        }
    }

    @Test(timeout = 4000)
    public void test324361() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(74);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=74> (type 74)
        }
    }

    @Test(timeout = 4000)
    public void test325362() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(75);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=75> (type 75)
        }
    }

    @Test(timeout = 4000)
    public void test326363() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(76);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=76> (type 76)
        }
    }

    @Test(timeout = 4000)
    public void test327364() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for try (type 77)
        }
    }

    @Test(timeout = 4000)
    public void test328365() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(78);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for semi (type 78)
        }
    }

    @Test(timeout = 4000)
    public void test329366() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(79);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lb (type 79)
        }
    }

    @Test(timeout = 4000)
    public void test330367() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(80);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rb (type 80)
        }
    }

    @Test(timeout = 4000)
    public void test331368() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lc (type 81)
        }
    }

    @Test(timeout = 4000)
    public void test332369() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(82);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rc (type 82)
        }
    }

    @Test(timeout = 4000)
    public void test333370() throws Throwable {
        int int0 = NodeUtil.precedence(83);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test334371() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rp (type 84)
        }
    }

    @Test(timeout = 4000)
    public void test335372() throws Throwable {
        int int0 = NodeUtil.precedence(85);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test336373() throws Throwable {
        int int0 = NodeUtil.precedence(86);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test337374() throws Throwable {
        int int0 = NodeUtil.precedence(87);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test338375() throws Throwable {
        int int0 = NodeUtil.precedence(88);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test339376() throws Throwable {
        int int0 = NodeUtil.precedence(89);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test340377() throws Throwable {
        int int0 = NodeUtil.precedence(90);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test341378() throws Throwable {
        int int0 = NodeUtil.precedence(91);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test342379() throws Throwable {
        int int0 = NodeUtil.precedence(92);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test343380() throws Throwable {
        int int0 = NodeUtil.precedence(93);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test344381() throws Throwable {
        int int0 = NodeUtil.precedence(94);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test345382() throws Throwable {
        int int0 = NodeUtil.precedence(95);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test346383() throws Throwable {
        int int0 = NodeUtil.precedence(96);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test347384() throws Throwable {
        int int0 = NodeUtil.precedence(97);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test348385() throws Throwable {
        int int0 = NodeUtil.precedence(98);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test349386() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(99);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for colon (type 99)
        }
    }

    @Test(timeout = 4000)
    public void test350387() throws Throwable {
        int int0 = NodeUtil.precedence(100);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test351388() throws Throwable {
        int int0 = NodeUtil.precedence(101);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test352389() throws Throwable {
        int int0 = NodeUtil.precedence(102);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test353390() throws Throwable {
        int int0 = NodeUtil.precedence(103);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test354391() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(104);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for dot (type 104)
        }
    }

    @Test(timeout = 4000)
    public void test355392() throws Throwable {
        int int0 = NodeUtil.precedence(105);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test356393() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(106);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for export (type 106)
        }
    }

    @Test(timeout = 4000)
    public void test357394() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(107);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for import (type 107)
        }
    }

    @Test(timeout = 4000)
    public void test358395() throws Throwable {
        int int0 = NodeUtil.precedence(108);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test359396() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(109);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for else (type 109)
        }
    }

    @Test(timeout = 4000)
    public void test360397() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(110);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for switch (type 110)
        }
    }

    @Test(timeout = 4000)
    public void test361398() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(111);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for case (type 111)
        }
    }

    @Test(timeout = 4000)
    public void test362399() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(112);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for default (type 112)
        }
    }

    @Test(timeout = 4000)
    public void test363400() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(113);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for while (type 113)
        }
    }

    @Test(timeout = 4000)
    public void test364401() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(114);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for do (type 114)
        }
    }

    @Test(timeout = 4000)
    public void test365402() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(115);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for for (type 115)
        }
    }

    @Test(timeout = 4000)
    public void test366403() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(116);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for break (type 116)
        }
    }

    @Test(timeout = 4000)
    public void test367404() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(117);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for continue (type 117)
        }
    }

    @Test(timeout = 4000)
    public void test368405() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(118);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for var (type 118)
        }
    }

    @Test(timeout = 4000)
    public void test369406() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(119);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for with (type 119)
        }
    }

    @Test(timeout = 4000)
    public void test370407() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(120);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for catch (type 120)
        }
    }

    @Test(timeout = 4000)
    public void test371408() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for finally (type 121)
        }
    }

    @Test(timeout = 4000)
    public void test372409() throws Throwable {
        int int0 = NodeUtil.precedence(122);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test373410() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(123);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for reserved (type 123)
        }
    }

    @Test(timeout = 4000)
    public void test374411() throws Throwable {
        int int0 = NodeUtil.precedence(124);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test375412() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(126);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for label (type 126)
        }
    }

    @Test(timeout = 4000)
    public void test376413() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test377414() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(15);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test378415() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test379416() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test380417() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test381418() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test382419() throws Throwable {
        Node node0 = new Node(87);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test383420() throws Throwable {
        Node node0 = new Node(89);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test384421() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        Node node1 = new Node(88, node0, node0, node0, node0, 10, 49);
        int int0 = NodeUtil.getOpFromAssignmentOp(node1);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test385422() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(18, int0);
    }

    @Test(timeout = 4000)
    public void test386423() throws Throwable {
        Node node0 = new Node(91, 98, 98);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(19, int0);
    }

    @Test(timeout = 4000)
    public void test387424() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(20, int0);
    }

    @Test(timeout = 4000)
    public void test388425() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(21, int0);
    }

    @Test(timeout = 4000)
    public void test389426() throws Throwable {
        Node node0 = new Node(94);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(22, int0);
    }

    @Test(timeout = 4000)
    public void test390427() throws Throwable {
        Node node0 = new Node(95, 95, 95);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(23, int0);
    }

    @Test(timeout = 4000)
    public void test391428() throws Throwable {
        Node node0 = new Node(96, 96, 96);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(24, int0);
    }

    @Test(timeout = 4000)
    public void test392429() throws Throwable {
        Node node0 = new Node(97);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(25, int0);
    }

    @Test(timeout = 4000)
    public void test393430() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
        }
    }

    @Test(timeout = 4000)
    public void test394431() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test395432() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test396433() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test396434() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertEquals(35, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test396435() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test396436() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertEquals(35, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test397437() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(37);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test398438() throws Throwable {
        Node node0 = Node.newString(35, "prototype");
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test399439() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(778, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test399440() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test399441() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(778, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test399442() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test399443() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test399444() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.collect.ImmutableCollection$EmptyImmutableCollection", 778, 778);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test400445() throws Throwable {
        Node node0 = new Node(2908);
        // Undeclared exception!
        try {
            NodeUtil.getAssignedValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test401446() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isNew(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test402447() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(30, node0);
        boolean boolean0 = NodeUtil.isNew(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test403448() throws Throwable {
        Node node0 = Node.newString("RY");
        Node node1 = NodeUtil.newQualifiedNameNode("RY", node0, "RY");
        NodeUtil.newExpr(node1);
        Node node2 = NodeUtil.getAssignedValue(node1);
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test404449() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = NodeUtil.newQualifiedNameNode(">>", 16, (-2));
        node0.addChildrenToBack(node1);
        Node node2 = NodeUtil.getAssignedValue(node1);
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test404450() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = NodeUtil.newQualifiedNameNode(">>", 16, (-2));
        node0.addChildrenToBack(node1);
        Node node2 = NodeUtil.getAssignedValue(node1);
        assertEquals((-1), node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test404451() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = NodeUtil.newQualifiedNameNode(">>", 16, (-2));
        node0.addChildrenToBack(node1);
        Node node2 = NodeUtil.getAssignedValue(node1);
        assertEquals((-1), node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test405452() throws Throwable {
        Node node0 = new Node(36);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test406453() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName(">-Q6N1", node0);
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test406454() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName(">-Q6N1", node0);
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        assertFalse(node1.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test407455() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = NodeUtil.newQualifiedNameNode("Y-uJf0g8\"z4VoR", 16, (-2));
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test407456() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = NodeUtil.newQualifiedNameNode("Y-uJf0g8\"z4VoR", 16, (-2));
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        assertEquals((-1), node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test408457() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test409458() throws Throwable {
        Node node0 = Node.newString("KE_fbNjwERWMg'R[Z");
        boolean boolean0 = NodeUtil.isString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test410459() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test411460() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test411461() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test412462() throws Throwable {
        Node node0 = new Node(86, 1524, 113);
        boolean boolean0 = NodeUtil.isAssign(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test413463() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test414464() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test414465() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test415466() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(37);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test416467() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test417468() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test418469() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("cp~uA{<,Lh[F:/", node0, "cp~uA{<,Lh[F:/");
        node0.addChildToFront(node1);
        assertFalse(node1.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test418470() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("cp~uA{<,Lh[F:/", node0, "cp~uA{<,Lh[F:/");
        node0.addChildToFront(node1);
        node0.setType(115);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test419471() throws Throwable {
        Node node0 = new Node(113, 123, 99);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test420472() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test421473() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(114);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test422474() throws Throwable {
        Node node0 = Node.newNumber(740.67635406, 1664, 1664);
        node0.setType(115);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test423475() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(113);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertEquals(41, Node.BRACELESS_TYPE);
    }

    @Test(timeout = 4000)
    public void test424476() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test425477() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(114);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test426478() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertEquals(25, Node.ISNUMBER_PROP);
    }

    @Test(timeout = 4000)
    public void test427479() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test428480() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test429481() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test430482() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test431483() throws Throwable {
        Node node0 = new Node(112, 65535, 83);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test432484() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test433485() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(114);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test434486() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test435487() throws Throwable {
        Node node0 = new Node(120, 95, 37);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test436488() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(126, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test437489() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test438490() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test439491() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test440492() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(110, nodeArray0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test441493() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(111, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test442494() throws Throwable {
        Node node0 = new Node(112, 147, 3755);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test443495() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test444496() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test445497() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test446498() throws Throwable {
        Node node0 = new Node(120, 1877, 29);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test447499() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test448500() throws Throwable {
        Node node0 = Node.newString(",u,M4j");
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test449501() throws Throwable {
        Node node0 = new Node(44);
        Node node1 = new Node(126, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test450502() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test451503() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test452504() throws Throwable {
        Node node0 = new Node(2827);
        Node node1 = new Node(120, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test453505() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test454506() throws Throwable {
        Node node0 = new Node(108);
        node0.setType(109);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ELSE does not have a condition.
        }
    }

    @Test(timeout = 4000)
    public void test455507() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(110, nodeArray0);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // SWITCH 0 does not have a condition.
        }
    }

    @Test(timeout = 4000)
    public void test456508() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test457509() throws Throwable {
        Node node0 = new Node(112);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // DEFAULT does not have a condition.
        }
    }

    @Test(timeout = 4000)
    public void test458510() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test459511() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // malformed 'for' statement FOR
        }
    }

    @Test(timeout = 4000)
    public void test460512() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // VOID does not have a condition.
        }
    }

    @Test(timeout = 4000)
    public void test461513() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("cp~uA{<,Lh[F:/", node0, "cp~uA{<,Lh[F:/");
        node0.addChildToFront(node1);
        node0.setType(115);
        node0.addChildToBack(node0);
        Node node2 = NodeUtil.getConditionExpression(node0);
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test462514() throws Throwable {
        Node node0 = new Node(118);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test463515() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(126, node0, node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test464516() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(132, node0, node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test465517() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test466518() throws Throwable {
        Node node0 = new Node(118);
        node0.setType(112);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test467519() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test468520() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test469521() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = NodeUtil.newQualifiedNameNode(">>", 16, (-2));
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.isLabelName(node1);
        assertEquals((-1), node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test469522() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = NodeUtil.newQualifiedNameNode(">>", 16, (-2));
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.isLabelName(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test470523() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(77);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: TRY of TRY
        }
    }

    @Test(timeout = 4000)
    public void test471524() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newUndefinedNode();
        node0.addChildToFront(node1);
        node0.addChildToFront(node0);
        node0.setType(77);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: TRY of TRY
        }
    }

    @Test(timeout = 4000)
    public void test472525() throws Throwable {
        Node node0 = new Node(125);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test473526() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("un^efinei", node0);
        assertTrue(node1.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test473527() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("un^efinei", node0);
        Node node2 = NodeUtil.newVarNode("un^efinei", node0);
        node2.addChildrenToBack(node1);
        assertEquals(118, node2.getType());
    }

    @Test(timeout = 4000)
    public void test473528() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("un^efinei", node0);
        Node node2 = NodeUtil.newVarNode("un^efinei", node0);
        node2.addChildrenToBack(node1);
        NodeUtil.removeChild(node2, node1);
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test473529() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("un^efinei", node0);
        Node node2 = NodeUtil.newVarNode("un^efinei", node0);
        node2.addChildrenToBack(node1);
        NodeUtil.removeChild(node2, node1);
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test474530() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(125);
        NodeUtil.removeChild(node0, node1);
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test474531() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(125);
        NodeUtil.removeChild(node0, node1);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test475532() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(126);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: LABEL of LABEL
        }
    }

    @Test(timeout = 4000)
    public void test476533() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(126, node0, node0, 138, (-4104));
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test477534() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: FOR of FOR
        }
    }

    @Test(timeout = 4000)
    public void test478535() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("G`zrK(:", node0);
        node0.addChildrenToFront(node1);
        Node node2 = NodeUtil.newQualifiedNameNode("The existing child node of the parent zhould not be null.", node0, "The existing child node of the parent zhould not be null.");
        node0.addChildToFront(node2);
        node0.setType(115);
        node0.addChildToBack(node0);
        NodeUtil.removeChild(node0, node2);
        assertEquals(4, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test478536() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("G`zrK(:", node0);
        node0.addChildrenToFront(node1);
        Node node2 = NodeUtil.newQualifiedNameNode("The existing child node of the parent zhould not be null.", node0, "The existing child node of the parent zhould not be null.");
        node0.addChildToFront(node2);
        node0.setType(115);
        node0.addChildToBack(node0);
        NodeUtil.removeChild(node0, node2);
        assertEquals(2, node2.getChildCount());
    }

    @Test(timeout = 4000)
    public void test479537() throws Throwable {
        Node node0 = new Node(2782);
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test480538() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Node node1 = new Node(126, node0, 13, (-1));
        boolean boolean0 = NodeUtil.tryMergeBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test481539() throws Throwable {
        Node node0 = Node.newString(125, "|", 125, 125);
        node0.addChildrenToBack(node0);
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test482540() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Node node1 = new Node(0, node0, 13, (-1));
        boolean boolean0 = NodeUtil.tryMergeBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test483541() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        boolean boolean0 = NodeUtil.isCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test484542() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.isCall(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test485543() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(105);
        Node node1 = NodeUtil.getFunctionBody(node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node1);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test486544() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isThis(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test487545() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(42, node0, node0, node0);
        boolean boolean0 = NodeUtil.isThis(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test488546() throws Throwable {
        Node node0 = new Node(57, 57, 57);
        boolean boolean0 = NodeUtil.isFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test489547() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(105);
        Node node1 = new Node(10, node0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test490548() throws Throwable {
        Node node0 = Node.newString(50, "QhEaKP)Zdpxd");
        boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test491549() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(105);
        // Undeclared exception!
        try {
            NodeUtil.isAnonymousFunction(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test492550() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(105);
        Node node1 = new Node(125, node0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test493551() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(105);
        Node node1 = new Node(28, node0, node0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test494552() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test495553() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        boolean boolean0 = NodeUtil.isLhs((Node) null, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test496554() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test497555() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test498556() throws Throwable {
        Node node0 = Node.newString("ia`h&g?6c2oS)uf9p");
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test499557() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(9);
        assertEquals("|", string0);
    }

    @Test(timeout = 4000)
    public void test500558() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(53);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 53: LOCAL_LOAD
        }
    }

    @Test(timeout = 4000)
    public void test501559() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(10);
        assertEquals("^", string0);
    }

    @Test(timeout = 4000)
    public void test502560() throws Throwable {
        String string0 = NodeUtil.opToStr(11);
        assertEquals("&", string0);
    }

    @Test(timeout = 4000)
    public void test503561() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(12);
        assertEquals("==", string0);
    }

    @Test(timeout = 4000)
    public void test504562() throws Throwable {
        String string0 = NodeUtil.opToStr(13);
        assertEquals("!=", string0);
    }

    @Test(timeout = 4000)
    public void test505563() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(14);
        assertEquals("<", string0);
    }

    @Test(timeout = 4000)
    public void test506564() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(15);
        assertEquals("<=", string0);
    }

    @Test(timeout = 4000)
    public void test507565() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(16);
        assertEquals(">", string0);
    }

    @Test(timeout = 4000)
    public void test508566() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(17);
        assertEquals(">=", string0);
    }

    @Test(timeout = 4000)
    public void test509567() throws Throwable {
        String string0 = NodeUtil.opToStr(18);
        assertEquals("<<", string0);
    }

    @Test(timeout = 4000)
    public void test510568() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(19);
        assertEquals(">>", string0);
    }

    @Test(timeout = 4000)
    public void test511569() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(20);
        assertEquals(">>>", string0);
    }

    @Test(timeout = 4000)
    public void test512570() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(21);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test513571() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(22);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test514572() throws Throwable {
        String string0 = NodeUtil.opToStr(23);
        assertEquals("*", string0);
    }

    @Test(timeout = 4000)
    public void test515573() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
        assertEquals("/", string0);
    }

    @Test(timeout = 4000)
    public void test516574() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(25);
        assertEquals("%", string0);
    }

    @Test(timeout = 4000)
    public void test517575() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
        assertEquals("!", string0);
    }

    @Test(timeout = 4000)
    public void test518576() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(27);
        assertEquals("~", string0);
    }

    @Test(timeout = 4000)
    public void test519577() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(28);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test520578() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test520579() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test521580() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(30);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 30: NEW
        }
    }

    @Test(timeout = 4000)
    public void test522581() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(31);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 31: DELPROP
        }
    }

    @Test(timeout = 4000)
    public void test523582() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(32);
        assertEquals("typeof", string0);
    }

    @Test(timeout = 4000)
    public void test524583() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(33);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 33: GETPROP
        }
    }

    @Test(timeout = 4000)
    public void test525584() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(34);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 34: SETPROP
        }
    }

    @Test(timeout = 4000)
    public void test526585() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(35);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 35: GETELEM
        }
    }

    @Test(timeout = 4000)
    public void test527586() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(36);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 36: SETELEM
        }
    }

    @Test(timeout = 4000)
    public void test528587() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(37);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 37: CALL
        }
    }

    @Test(timeout = 4000)
    public void test529588() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(38);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 38: NAME
        }
    }

    @Test(timeout = 4000)
    public void test530589() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test531590() throws Throwable {
        String string0 = NodeUtil.opToStr(40);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test532591() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(41);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 41: NULL
        }
    }

    @Test(timeout = 4000)
    public void test533592() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test534593() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test535594() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(44);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 44: TRUE
        }
    }

    @Test(timeout = 4000)
    public void test536595() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
        assertEquals("===", string0);
    }

    @Test(timeout = 4000)
    public void test537596() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
        assertEquals("!==", string0);
    }

    @Test(timeout = 4000)
    public void test538597() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(47);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 47: OBJECT
        }
    }

    @Test(timeout = 4000)
    public void test539598() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(48);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 48: BINDNAME
        }
    }

    @Test(timeout = 4000)
    public void test540599() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(49);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 49: THROW
        }
    }

    @Test(timeout = 4000)
    public void test541600() throws Throwable {
        String string0 = NodeUtil.opToStr(50);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test542601() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(51);
        assertEquals("in", string0);
    }

    @Test(timeout = 4000)
    public void test543602() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
        assertEquals("instanceof", string0);
    }

    @Test(timeout = 4000)
    public void test544603() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(54);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 54: GETVAR
        }
    }

    @Test(timeout = 4000)
    public void test545604() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(55);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 55: SETVAR
        }
    }

    @Test(timeout = 4000)
    public void test546605() throws Throwable {
        String string0 = NodeUtil.opToStr(56);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test547606() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(57);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 57: ENUM_INIT_KEYS
        }
    }

    @Test(timeout = 4000)
    public void test548607() throws Throwable {
        String string0 = NodeUtil.opToStr(58);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test549608() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(59);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 59: ENUM_NEXT
        }
    }

    @Test(timeout = 4000)
    public void test550609() throws Throwable {
        String string0 = NodeUtil.opToStr(60);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test551610() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(61);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 61: THISFN
        }
    }

    @Test(timeout = 4000)
    public void test552611() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(62);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 62: RETURN_RESULT
        }
    }

    @Test(timeout = 4000)
    public void test553612() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(63);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 63: ARRAYLIT
        }
    }

    @Test(timeout = 4000)
    public void test554613() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(64);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 64: OBJECTLIT
        }
    }

    @Test(timeout = 4000)
    public void test555614() throws Throwable {
        String string0 = NodeUtil.opToStr(65);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test556615() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(66);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 66: SET_REF
        }
    }

    @Test(timeout = 4000)
    public void test557616() throws Throwable {
        String string0 = NodeUtil.opToStr(67);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test558617() throws Throwable {
        String string0 = NodeUtil.opToStr(68);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test559618() throws Throwable {
        String string0 = NodeUtil.opToStr(69);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test560619() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(70);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 70: DEFAULTNAMESPACE
        }
    }

    @Test(timeout = 4000)
    public void test561620() throws Throwable {
        String string0 = NodeUtil.opToStr(71);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test562621() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(72);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 72: ESCXMLTEXT
        }
    }

    @Test(timeout = 4000)
    public void test563622() throws Throwable {
        String string0 = NodeUtil.opToStr(73);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test564623() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test565624() throws Throwable {
        String string0 = NodeUtil.opToStr(75);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test566625() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test567626() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 77: TRY
        }
    }

    @Test(timeout = 4000)
    public void test568627() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(78);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 78: SEMI
        }
    }

    @Test(timeout = 4000)
    public void test569628() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(79);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 79: LB
        }
    }

    @Test(timeout = 4000)
    public void test570629() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test571630() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 81: LC
        }
    }

    @Test(timeout = 4000)
    public void test572631() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(82);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 82: RC
        }
    }

    @Test(timeout = 4000)
    public void test573632() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test574633() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 84: RP
        }
    }

    @Test(timeout = 4000)
    public void test575634() throws Throwable {
        String string0 = NodeUtil.opToStr(85);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test576635() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
        assertEquals("=", string0);
    }

    @Test(timeout = 4000)
    public void test577636() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(87);
        assertEquals("|=", string0);
    }

    @Test(timeout = 4000)
    public void test578637() throws Throwable {
        String string0 = NodeUtil.opToStr(88);
        assertEquals("^=", string0);
    }

    @Test(timeout = 4000)
    public void test579638() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(89);
        assertEquals("&=", string0);
    }

    @Test(timeout = 4000)
    public void test580639() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(90);
        assertEquals("<<=", string0);
    }

    @Test(timeout = 4000)
    public void test581640() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
        assertEquals(">>=", string0);
    }

    @Test(timeout = 4000)
    public void test582641() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(92);
        assertEquals(">>>=", string0);
    }

    @Test(timeout = 4000)
    public void test583642() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(93);
        assertEquals("+=", string0);
    }

    @Test(timeout = 4000)
    public void test584643() throws Throwable {
        String string0 = NodeUtil.opToStr(94);
        assertEquals("-=", string0);
    }

    @Test(timeout = 4000)
    public void test585644() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
        assertEquals("*=", string0);
    }

    @Test(timeout = 4000)
    public void test586645() throws Throwable {
        String string0 = NodeUtil.opToStr(96);
        assertEquals("/=", string0);
    }

    @Test(timeout = 4000)
    public void test587646() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(97);
        assertEquals("%=", string0);
    }

    @Test(timeout = 4000)
    public void test588647() throws Throwable {
        String string0 = NodeUtil.opToStr(98);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test589648() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test590649() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(100);
        assertEquals("||", string0);
    }

    @Test(timeout = 4000)
    public void test591650() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
        assertEquals("&&", string0);
    }

    @Test(timeout = 4000)
    public void test592651() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(102);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 102: INC
        }
    }

    @Test(timeout = 4000)
    public void test593652() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(103);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 103: DEC
        }
    }

    @Test(timeout = 4000)
    public void test594653() throws Throwable {
        String string0 = NodeUtil.opToStr(104);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test595654() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(105);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 105: FUNCTION
        }
    }

    @Test(timeout = 4000)
    public void test596655() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(106);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 106: EXPORT
        }
    }

    @Test(timeout = 4000)
    public void test597656() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(107);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 107: IMPORT
        }
    }

    @Test(timeout = 4000)
    public void test598657() throws Throwable {
        String string0 = NodeUtil.opToStr(108);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test599658() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(109);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 109: ELSE
        }
    }

    @Test(timeout = 4000)
    public void test600659() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(110);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 110: SWITCH
        }
    }

    @Test(timeout = 4000)
    public void test601660() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(111);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 111: CASE
        }
    }

    @Test(timeout = 4000)
    public void test602661() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(112);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 112: DEFAULT
        }
    }

    @Test(timeout = 4000)
    public void test603662() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(113);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 113: WHILE
        }
    }

    @Test(timeout = 4000)
    public void test604663() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(114);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 114: DO
        }
    }

    @Test(timeout = 4000)
    public void test605664() throws Throwable {
        String string0 = NodeUtil.opToStr(115);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test606665() throws Throwable {
        String string0 = NodeUtil.opToStr(116);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test607666() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test608667() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(118);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 118: VAR
        }
    }

    @Test(timeout = 4000)
    public void test609668() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(119);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 119: WITH
        }
    }

    @Test(timeout = 4000)
    public void test610669() throws Throwable {
        String string0 = NodeUtil.opToStr(120);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test611670() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 121: FINALLY
        }
    }

    @Test(timeout = 4000)
    public void test612671() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(122);
        assertEquals("void", string0);
    }

    @Test(timeout = 4000)
    public void test613672() throws Throwable {
        String string0 = NodeUtil.opToStr(4095);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test614673() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = NodeUtil.newQualifiedNameNode("Y-uJf0g8\"z4VoR", 16, (-2));
        node0.addChildrenToBack(node1);
        // Undeclared exception!
        try {
            NodeUtil.redeclareVarsInsideBranch(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test615674() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.copyNameAnnotations(node0, node0);
        assertEquals(26, Node.DIRECTCALL_PROP);
    }

    @Test(timeout = 4000)
    public void test616675() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString("collect");
        linkedList0.add(node0);
        // Undeclared exception!
        try {
            NodeUtil.newFunctionNode("collect", linkedList0, node0, 4, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test617676() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("p");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test618677() throws Throwable {
        boolean boolean0 = NodeUtil.isLatin("\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uAA50\uFF10");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test619678() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("Expected CALL node, got ");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test620679() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("in");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test621680() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("dxV", 14, 2);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(2, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test621681() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("dxV", 14, 2);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(14, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test622682() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(35, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test622683() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(35, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test622684() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test622685() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test622686() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.N!deUtil", 35, 35);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test623687() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test624688() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype", 2224, 2224);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(2224, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test624689() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype", 2224, 2224);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertNotNull(node1);
    }

    @Test(timeout = 4000)
    public void test624690() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype", 2224, 2224);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test624691() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype", 2224, 2224);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(2224, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test624692() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype", 2224, 2224);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(2224, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test625693() throws Throwable {
        Node node0 = NodeUtil.newVarNode("at index ", (Node) null);
        assertEquals(19, Node.LABEL_PROP);
    }

    @Test(timeout = 4000)
    public void test626694() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 120, 116);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, ">");
        assertEquals(120, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test626695() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 120, 116);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, ">");
        assertEquals(116, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test626696() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 120, 116);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, ">");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test627697() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("T7OY9|N~')5", 0, 1);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "T7OY9|N~')5");
        assertEquals(0, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test627698() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("T7OY9|N~')5", 0, 1);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "T7OY9|N~')5");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test627699() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("T7OY9|N~')5", 0, 1);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "T7OY9|N~')5");
        assertEquals(1, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test628700() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(105);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertFalse(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test629701() throws Throwable {
        Node node0 = Node.newNumber((double) (-1466));
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2);
        boolean boolean0 = NodeUtil.containsType(node0, 31, nodeUtil_MatchNodeType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test630702() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsType(node0, 39);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test631703() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("Not declared as a constructor", node0, "");
        int int0 = NodeUtil.getNameReferenceCount(node1, "Not declared as a constructor");
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test632704() throws Throwable {
        Node node0 = Node.newString("DPVu6`AYZFs_");
        Node node1 = new Node(1, node0, 1, 36);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test633705() throws Throwable {
        Node node0 = Node.newString("DPVu6`AYZFs_");
        Node node1 = new Node(1, node0, 1, 36);
        node1.removeChildren();
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test634706() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.hasFinally(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test635707() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.hasFinally(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test636708() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newUndefinedNode();
        node0.addChildToFront(node1);
        node0.addChildToFront(node0);
        node0.setType(77);
        boolean boolean0 = NodeUtil.hasFinally(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test637709() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test638710() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test639711() throws Throwable {
        Node node0 = Node.newNumber((-846.21631));
        // Undeclared exception!
        try {
            NodeUtil.hasCatchHandler(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test640712() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test641713() throws Throwable {
        Node node0 = new Node(125);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test642714() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.getFnParameters(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test643715() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(105);
        Node node1 = NodeUtil.getFnParameters(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test644716() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test645717() throws Throwable {
        Node node0 = new Node(113, 92, 113);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test646718() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.setJSDocInfo(jSDocInfo0);
        JSDocInfo jSDocInfo1 = NodeUtil.getInfoForNameNode(node0);
        assertFalse(jSDocInfo1.isDeprecated());
    }

    @Test(timeout = 4000)
    public void test647719() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(19, node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test648720() throws Throwable {
        Node node0 = new Node(2782);
        Node node1 = new Node(118, node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test649721() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("un^efinei", node0);
        Node node2 = NodeUtil.newVarNode("un^efinei", node0);
        node2.addChildrenToBack(node1);
        NodeUtil.getInfoForNameNode(node1);
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test649722() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("un^efinei", node0);
        Node node2 = NodeUtil.newVarNode("un^efinei", node0);
        node2.addChildrenToBack(node1);
        NodeUtil.getInfoForNameNode(node1);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test650723() throws Throwable {
        Node node0 = new Node(119);
        String string0 = NodeUtil.getSourceName(node0);
        assertNull(string0);
    }
}
