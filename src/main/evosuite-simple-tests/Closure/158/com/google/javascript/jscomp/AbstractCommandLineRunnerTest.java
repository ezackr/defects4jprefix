/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 07:37:42 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.common.base.Function;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.SimpleErrorReporter;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Stack;
import java.util.logging.Logger;
import org.junit.runner.RunWith;

public class AbstractCommandLineRunnerTest {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        String[] stringArray0 = new String[6];
        stringArray0[0] = "Bad --js flag. ";
        stringArray0[1] = "ECMASCRIPT5";
        stringArray0[2] = "{%s%s}\n";
        stringArray0[3] = "{0} is never defined";
        stringArray0[4] = "0dKsZ;";
        stringArray0[5] = "_vars_map.out";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.initOptionsFromFlags((CompilerOptions) null);
        assertFalse(commandLineRunner0.shouldRunCompiler());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "M+Iq?";
        stringArray0[1] = "M+Iq?";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Compiler compiler0 = commandLineRunner0.getCompiler();
        assertNull(compiler0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        String[] stringArray0 = new String[0];
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        try {
            commandLineRunner0.createJsModules(list0, list0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Expected 2-4 colon-delimited parts in module spec: java.class
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = CompilerOptions.TweakProcessing.OFF;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setTweakProcessing(compilerOptions_TweakProcessing0);
        assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setTweak(list0);
        assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
        assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        SourceMap.Format sourceMap_Format0 = SourceMap.Format.LEGACY;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSourceMapFormat(sourceMap_Format0);
        assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Supplier<List<JSModule>> supplier0 = (Supplier<List<JSModule>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
        Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
        commandLineRunner0.enableTestMode((Supplier<List<JSSourceFile>>) null, (Supplier<List<JSSourceFile>>) null, supplier0, function0);
        assertTrue(commandLineRunner0.shouldRunCompiler());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        String[] stringArray0 = new String[2];
        stringArray0[0] = "M+Iq?";
        stringArray0[1] = "M+Iq?";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        commandLineRunner0.setRunOptions(compilerOptions0);
        assertFalse(compilerOptions0.aliasAllStrings);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        // Undeclared exception!
        try {
            commandLineRunner0.run();
            fail("Expecting exception: System.SystemExitException");
        } catch (System.SystemExitException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        List<JSSourceFile> list1 = commandLineRunner0.createInputs(list0, true);
        assertEquals(1, list1.size());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        JSModule jSModule0 = new JSModule("-");
        List<String> list0 = jSModule0.getProvides();
        List<JSSourceFile> list1 = commandLineRunner0.createInputs(list0, true);
        assertEquals(1, list1.size());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        JSModule jSModule0 = new JSModule("-");
        List<String> list0 = jSModule0.getProvides();
        try {
            commandLineRunner0.createInputs(list0, false);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Can't specify stdin.
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Supplier<List<JSSourceFile>> supplier0 = (Supplier<List<JSSourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
        Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
        commandLineRunner0.enableTestMode(supplier0, supplier0, (Supplier<List<JSModule>>) null, function0);
        Stack<String> stack0 = new Stack<String>();
        // Undeclared exception!
        try {
            commandLineRunner0.createJsModules(stack0, stack0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        String[] stringArray0 = new String[0];
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        // Undeclared exception!
        try {
            commandLineRunner0.createJsModules((List<String>) null, list0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        // Undeclared exception!
        try {
            commandLineRunner0.createJsModules(stack0, stack0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        String[] stringArray0 = new String[0];
        List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        // Undeclared exception!
        try {
            commandLineRunner0.createJsModules(list0, (List<String>) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        String[] stringArray0 = new String[0];
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.warning("uhn:>i8qYA", "\"rVzs2;K'", (-3064), "\"rVzs2;K'", (-3064));
        List<String> list0 = simpleErrorReporter0.warnings();
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        try {
            commandLineRunner0.createJsModules(list0, list0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Invalid js file count '>i8qYA' for module: uhn
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.warning("q&C M,9:bb (q&C M,9:bb#1081)", "q&C M,9:bb (q&C M,9:bb#1081)", 2141, "Ug[zwIL;_]L}6Yrtr}", 18);
        List<String> list0 = simpleErrorReporter0.warnings();
        try {
            commandLineRunner0.createJsModules(list0, list0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Expected 2-4 colon-delimited parts in module spec: q&C M,9:bb (q&C M,9:bb#1081) (q&C M,9:bb (q&C M,9:bb#1081)#2141)
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        String[] stringArray0 = new String[0];
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.warning("q&C M,9:bb", "q&C M,9:bb", 1081, "q&C M,9:bb", 1081);
        List<String> list0 = simpleErrorReporter0.warnings();
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        try {
            commandLineRunner0.createJsModules(list0, list0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Invalid module name: 'q&C M,9'
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        // Undeclared exception!
        try {
            AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, arrayList0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        Result result0 = compiler0.getResult();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        int int0 = commandLineRunner0.processResults(result0, arrayList0, compilerOptions0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        arrayList0.add((JSModule) null);
        // Undeclared exception!
        try {
            AbstractCommandLineRunner.parseModuleWrappers(list0, arrayList0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.warning("q&C M,9:bb", "q&C M,9:bb", 1081, "q&C M,9:bb", 1081);
        List<String> list0 = simpleErrorReporter0.warnings();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        try {
            AbstractCommandLineRunner.parseModuleWrappers(list0, stack0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unknown module: 'q&C M,9'
        }
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.allocate(204);
        AbstractCommandLineRunner.writeOutput(charBuffer0, (Compiler) null, "pfnDvw,G%M.9%r2bUBn", "replaceStrings", "pfnDvw,G%M.9%r2bUBn");
        assertEquals(20, charBuffer0.position());
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.allocate(204);
        AbstractCommandLineRunner.writeOutput(charBuffer0, (Compiler) null, "pfnDvw,G%M.9%r2bUBn", "replaceStrings", "pfnDvw,G%M.9%r2bUBn");
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test2726() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.allocate(170);
        AbstractCommandLineRunner.writeOutput(charBuffer0, (Compiler) null, "replaceStrings", "replaceStrings", "replaceStrings");
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.allocate(170);
        AbstractCommandLineRunner.writeOutput(charBuffer0, (Compiler) null, "replaceStrings", "replaceStrings", "replaceStrings");
        assertEquals(155, charBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        String[] stringArray0 = new String[5];
        stringArray0[0] = "q&C M,9:bb";
        stringArray0[1] = "q&C M,9:bb";
        stringArray0[2] = "q&C M,9:bb";
        stringArray0[3] = "q&C M,9:bb";
        stringArray0[4] = "q&C M,9:bb";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        Result result0 = compiler0.getResult();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        int int0 = commandLineRunner0.processResults(result0, arrayList0, compilerOptions0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        String string0 = commandLineRunner0.expandManifest((JSModule) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream("Vw[Q.l=E~t>9");
        assertNotNull(outputStream0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream((String) null);
        assertNull(outputStream0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.add("");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            AbstractCommandLineRunner.createDefineOrTweakReplacements(stack0, compilerOptions0, false);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // --define flag syntax invalid:
        }
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
        AbstractCommandLineRunner.createDefineOrTweakReplacements(list0, compilerOptions0, false);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
        AbstractCommandLineRunner.createDefineOrTweakReplacements(list0, compilerOptions0, true);
        assertFalse(compilerOptions0.rewriteFunctionExpressions);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.add(", localSets=");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            AbstractCommandLineRunner.createDefineOrTweakReplacements(stack0, compilerOptions0, false);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // --define flag syntax invalid: , localSets=
        }
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.add(">,O9w\"?=YGuSwl");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            AbstractCommandLineRunner.createDefineOrTweakReplacements(stack0, compilerOptions0, true);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // --tweak flag syntax invalid: >,O9w\"?=YGuSwl
        }
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        JSModule jSModule0 = new JSModule("java.class");
        JSModule[] jSModuleArray0 = new JSModule[3];
        jSModuleArray0[0] = jSModule0;
        JSModule jSModule1 = new JSModule("java.class");
        jSModuleArray0[1] = jSModule1;
        jSModuleArray0[2] = jSModule0;
        JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1046);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charset0);
        String[] stringArray0 = new String[4];
        stringArray0[0] = "java.class";
        stringArray0[1] = "java.class";
        stringArray0[2] = "java.class";
        stringArray0[3] = "java.class";
        MockPrintStream mockPrintStream0 = new MockPrintStream("inlineFunctions");
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
        commandLineRunner0.printModuleGraphManifestTo(jSModuleGraph0, outputStreamWriter0);
        assertFalse(commandLineRunner0.shouldRunCompiler());
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        MockFile mockFile0 = new MockFile("-", "-");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("-");
        stack0.add(jSSourceFile0);
        Supplier<List<JSSourceFile>> supplier0 = (Supplier<List<JSSourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
        doReturn(stack0, stack0, (Object) null, (Object) null).when(supplier0).get();
        Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null, (Object) null).when(function0).apply(anyInt());
        commandLineRunner0.enableTestMode(supplier0, supplier0, (Supplier<List<JSModule>>) null, function0);
        commandLineRunner0.run();
        commandLineRunner0.run();
        assertTrue(commandLineRunner0.shouldRunCompiler());
    }
}
