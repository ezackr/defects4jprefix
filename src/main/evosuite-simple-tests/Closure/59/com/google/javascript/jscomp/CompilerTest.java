/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 02:56:27 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CrossModuleCodeMotion;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.runner.RunWith;

public class CompilerTest {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource((JSModule) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSourceArray();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Node node0 = compiler0.parseTestCode("4`rnDcpCv~zUmi(");
        compiler0.toSource(compiler_CodeBuilder0, (-1), node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Node node0 = compiler0.parseTestCode("4`rnDcpCv~zUmi(");
        compiler0.toSource(compiler_CodeBuilder0, (-1), node0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSourceArray((JSModule) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test0069() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule[] jSModuleArray0 = new JSModule[3];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            compiler0.init((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Level level0 = Level.ALL;
        Compiler.setLoggingLevel(level0);
        assertEquals("ALL", level0.toString());
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getCssRenamingMap();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("iDMYQ#U+5.L?@3T-0X");
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        // Undeclared exception!
        try {
            compiler0.updateGlobalVarReferences(treeMap0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.rebuildInputsFromModules();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.computeCFG();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getPropertyMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parseSyntheticCode("}7OS6NG%(qC ");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.processDefines();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        Callable<RenameVars> callable0 = (Callable<RenameVars>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        RenameVars renameVars0 = Compiler.runCallableWithLargeStack(callable0);
        assertNull(renameVars0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        // Undeclared exception!
        try {
            compiler0.languageMode();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.setCssRenamingMap((CssRenamingMap) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getWarningCount();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
        assertNull(functionInformationMap0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parse();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        assertNotNull(supplier0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        Compiler compiler0 = new Compiler();
        SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
        assertNotNull(symbolTable0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.recordFunctionInformation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getExternsInOrder();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" [testcode] ");
        String string0 = compiler0.toSource(node0);
        assertEquals("[testcode]", string0);
    }

    @Test(timeout = 4000)
    public void test03132() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" [testcode] ");
        String string0 = compiler0.toSource(node0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test03233() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();
        assertNull(jSModuleGraph0);
    }

    @Test(timeout = 4000)
    public void test03334() throws Throwable {
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        SourceMap sourceMap0 = compiler0.getSourceMap();
        assertNull(sourceMap0);
    }

    @Test(timeout = 4000)
    public void test03435() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.isTypeCheckingEnabled();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test03536() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test03637() throws Throwable {
        MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.Compiler$3");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test03738() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("H+TSwrUF4lolL?Kgx", "eCFG");
        JSModule[] jSModuleArray0 = new JSModule[5];
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04039() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getMessages();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04140() throws Throwable {
        Compiler compiler0 = new Compiler();
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test04241() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.removeTryCatchFinally();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test04342() throws Throwable {
        MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.Compiler$3");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Scope scope0 = compiler0.getTopScope();
        assertNull(scope0);
    }

    @Test(timeout = 4000)
    public void test04443() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
        assertNull(referenceCollectingCallback_ReferenceMap0);
    }

    @Test(timeout = 4000)
    public void test04544() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04645() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test04746() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04847() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04948() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        assertEquals("", compiler_CodeBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test05049() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("(?T", "(?T");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("(?T", "(?T");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.optimize();
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("toSourceArray");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertNotNull(errorManager0);
    }

    @Test(timeout = 4000)
    public void test05152() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("toSourceArray");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test05253() throws Throwable {
        Compiler compiler0 = new Compiler();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup("}7OS6NG%(qC ", diagnosticTypeArray0);
        DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        compiler0.parseTestCode("}7OS6NG%(qC ");
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test05254() throws Throwable {
        Compiler compiler0 = new Compiler();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup("}7OS6NG%(qC ", diagnosticTypeArray0);
        DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        compiler0.parseTestCode("}7OS6NG%(qC ");
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05355() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("yxaVT%'");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("yxaVT%'");
        jSSourceFileArray0[0] = jSSourceFile0;
        CompilerOptions compilerOptions0 = compiler0.options;
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel0);
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05456() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.checkSymbols = true;
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05457() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.checkSymbols = true;
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test05558() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        JSModule jSModule0 = new JSModule(" nzl9y0'|z");
        stack0.add(jSModule0);
        stack0.add(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05559() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        JSModule jSModule0 = new JSModule(" nzl9y0'|z");
        stack0.add(jSModule0);
        stack0.add(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test05660() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("$", "$");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "$";
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        assertTrue(jSSourceFile0.isExtern());
    }

    @Test(timeout = 4000)
    public void test05761() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("computeCFG");
        stack0.add(jSSourceFile0);
        stack0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05762() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("computeCFG");
        stack0.add(jSSourceFile0);
        stack0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test05863() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test05964() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        // Undeclared exception!
        try {
            compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test06065() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule((String) null);
        linkedList0.add(jSModule0);
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06166() throws Throwable {
        // Undeclared exception!
        try {
            Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, false);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NullPointerException
        }
    }

    @Test(timeout = 4000)
    public void test06267() throws Throwable {
        Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, true);
        assertNull(crossModuleCodeMotion0);
    }

    @Test(timeout = 4000)
    public void test06368() throws Throwable {
        Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, false);
        assertNull(crossModuleCodeMotion0);
    }

    @Test(timeout = 4000)
    public void test06469() throws Throwable {
        // Undeclared exception!
        try {
            Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, true);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NullPointerException
        }
    }

    @Test(timeout = 4000)
    public void test06670() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        // Undeclared exception!
        try {
            compiler0.setPassConfig(passConfig0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // this.passes has already been assigned
        }
    }

    @Test(timeout = 4000)
    public void test06771() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("$", "$");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        assertTrue(jSSourceFile0.isExtern());
    }

    @Test(timeout = 4000)
    public void test06772() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("$", "$");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.check();
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06873() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        // Undeclared exception!
        try {
            compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
        }
    }

    @Test(timeout = 4000)
    public void test06974() throws Throwable {
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("%name%");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Compiler compiler0 = new Compiler();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.startPass("XJPu>");
        // Undeclared exception!
        try {
            compiler0.optimize();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07075() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.endPass();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Tracer should not be null at the end of a pass.
        }
    }

    @Test(timeout = 4000)
    public void test07176() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.reportCodeChange();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        // Undeclared exception!
        try {
            compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07277() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        // Undeclared exception!
        try {
            compiler0.areNodesEqualForInlining((Node) null, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07378() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("$");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("$", "$");
        jSSourceFileArray0[0] = jSSourceFile0;
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.removeExternInput("$");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test07479() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("");
        compiler0.removeExternInput((String) null);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07580() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.newExternInput((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // a source must have a name
        }
    }

    @Test(timeout = 4000)
    public void test07681() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("yxaVT%'", "yxaVT%'");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        stack0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.newExternInput("yxaVT%'");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Conflicting externs name: yxaVT%'
        }
    }

    @Test(timeout = 4000)
    public void test07782() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        jSSourceFileArray0[0] = jSSourceFile0;
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFileArray0[0]);
        // Undeclared exception!
        try {
            compiler0.addIncrementalSourceAst(jsAst0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Duplicate input of name 
        }
    }

    @Test(timeout = 4000)
    public void test07883() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("iDMYQ#U+5.L?@3T-0X");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("AzLBi", (Charset) null);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07984() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" [testcode] ");
        node0.addChildrenToBack(node0);
        assertEquals(2, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test07985() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" [testcode] ");
        node0.addChildrenToBack(node0);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(" [testcode] ", " [testcode] ");
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08086() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertNotNull(errorManager0);
    }

    @Test(timeout = 4000)
    public void test08087() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test08188() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test08189() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        assertNotNull(reverseAbstractInterpreter0);
    }

    @Test(timeout = 4000)
    public void test08290() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getTypeValidator();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test08291() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getTypeValidator();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        assertNotNull(typeValidator0);
    }

    @Test(timeout = 4000)
    public void test08392() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Yhy)pH(\"1");
        compiler0.parseTestCode("Yhy)pH(\"1");
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test08493() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("// Input %num%");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08594() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("INTERNAL COMPILER ERROR.\nPlease report this problem.\n");
        assertEquals("INTERNAL COMPILER ERROR.\nPlease report this problem.\n", compiler_CodeBuilder1.toString());
    }

    @Test(timeout = 4000)
    public void test08695() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("<V@U4^S&B+Eak8]P,");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08796() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("ThOgu+7B'@ X8]@vgQQ");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("\"7>c%IX^hYB=O");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08897() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08898() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test08999() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test089100() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test090101() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        String[] stringArray0 = new String[3];
        JSError jSError0 = JSError.make("JSC_EMPTY_MODULE_LIST_ERROR", (-2134), (-2915), checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        compiler0.report(jSError0);
        assertEquals((-2915), jSError0.getCharno());
    }

    @Test(timeout = 4000)
    public void test091102() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.throwInternalError("o9-`\"+UyN(Zj;n+", (Exception) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // o9-`\"+UyN(Zj;n+
        }
    }

    @Test(timeout = 4000)
    public void test092103() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("y]`");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            compiler0.compile((List<JSSourceFile>) null, (List<JSSourceFile>) null, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test093104() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion("this.passes has already been assigned", (-2082408384));
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test094105() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        compiler0.getSourceRegion("toSourceArray", 15);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test095106() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        Region region0 = compiler0.getSourceRegion(" [testcode] ", 15);
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test095107() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        Region region0 = compiler0.getSourceRegion(" [testcode] ", 15);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test096108() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("JSC_MODULE_DEPENDENCY_ERROR");
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Root module has no inputs
        }
    }

    @Test(timeout = 4000)
    public void test097109() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertEquals("[[singleton]]", node0.getSourceFileName());
    }

    @Test(timeout = 4000)
    public void test097110() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test097111() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertEquals(4096, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test098112() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion((JSModule) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No inputs
        }
    }

    @Test(timeout = 4000)
    public void test099113() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("JSC_MODULE_DEPENDENCY_ERROR");
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(sourceFile_Generator0).getCode();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("JSC_MODULE_DEPENDENCY_ERROR", sourceFile_Generator0);
        jSModule0.addFirst(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test100114() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test101115() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test101116() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
        assertEquals("digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\"BLOCK\"];\n  node1 [label=\"SCRIPT\"];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> RETURN [label=\"SYN_BLOCK\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> node1 [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n}\n", string0);
    }

    @Test(timeout = 4000)
    public void test102117() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.getErrorManager();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test103118() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.SymbolTable$Symbol");
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        // Undeclared exception!
        try {
            compiler0.updateGlobalVarReferences(treeMap0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }

    @Test(timeout = 4000)
    public void test104119() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("I_\"`I'5PT0%MCgP(4");
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        // Undeclared exception!
        try {
            compiler0.updateGlobalVarReferences(treeMap0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
        }
    }
}
